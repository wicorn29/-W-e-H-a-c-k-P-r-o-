export interface Player {
    _isFocusModeEnabled: boolean;
    _saveEnabled: boolean;
    _ultimateSessionStatusLocked: boolean;
    appearanceChanged: boolean
    earlyBirdLastChance: boolean;
    hasGrade: boolean;
    hasUsedTicket: boolean;
    immortal: boolean;
    inPVP: boolean;
    isClassCodeAttached: boolean;
    isFocusModeEnabled: boolean;
    isOpponent: boolean;
    isTrackingQuestEnabled: boolean;
    isZoneQuestEnabled: boolean;
    justLeveled: boolean;
    memberPrompt: boolean;
    parentalLink: boolean;
    saveEnabled: boolean;
    showHealthBar: boolean;
    tt: boolean;
    tutorialCompletedThisSession: boolean;
    updated: boolean;
    _ultimateSessionStatus: number;
    _ultimateTaskId: number;
    answerStreak: number;
    aoaTier: number;
    broadcastId: number;
    catchAttempt: number;
    grade: number;
    pvpHP: number;
    starsEarned: number;
    starsReward: number;
    starsRewardBase: number;
    starsToProcess: number;
    ultimateSessionStatus: number;
    ultimateTaskId: number;
    userID: number;
    _locationSelectionType: string;
    _ultimateQuestId: string;
    _userDataPlatform: string;
    curriculumTreeID: string;
    locationSelectionType: string;
    parentEmail: string;
    type: string;
    ultimateQuestId: string;
    userDataPlatform: string;
    username: string;
    _goalId: null;
    chatID: null;
    coOpTeam: null;
    currentVideoSkillId: null;
    danceID: null;
    emoteID: null;
    goalId: null;
    lastVisited: null;
    memberShareDate: null;
    primaryParentID: null;
    source: null;
    transformID: null;
    world: null;
    memberEndDate: undefined;
    memberStartDate: undefined;
    team: undefined;
    addAsset(c: any): void;
    addAssets(c: any): void;
    addBattle(): void;
    addBountyScore(c: any): void;
    addLoss(): void;
    addSpell(c: any): void;
    addStars(u: any, h: any, a: any): any;
    addWin(): void;
    anyPetsAboveLevel(c: any): any;
    canCatch(): any;
    canSpin(c: any): any;
    changeCurrentHearts(c: any, u: any): void;
    changeCurrentHeartsPercent(c: any): void;
    changeEnergy(c: any): void;
    changeGold(c: any, u: any): void;
    checkVersion(): any;
    clearTransitionSessionStatus(): void;
    completeDaily(c: any, u: any): void;
    completeTower(c: any): void;
    createDataClone(): any;
    createRandom(): void;
    diffAttackSlots(c: any): any;
    equip(c: any, u: any): any;
    evolve(c: any, u: any): void;
    forceSaveCharacter(c: any, u: any): void;
    getAllAttacks(): any;
    getAllEvolutions(): any;
    getAllowsHouseVisitors(): any;
    getAnswerStreak(): any;
    getAttacks(c: any): any;
    getAvailableEvolutions(): any;
    getBamSpells(c: any): any;
    getBaseMaxHearts(u: any): any;
    getBattles(): any;
    getBountyScore(): any;
    getColiseum(): any;
    getCurrentBamSpells(): any;
    getCurrentHearts(): any;
    getDailyQuestions(): any;
    getDamageBonus(): any;
    getDataAndClear(): any;
    getDrops(): any;
    getElement(): any;
    getEnergy(): any;
    getEquipmentSpell(c: any): any;
    getFirstName(): any;
    getGold(): any;
    getHeartBonus(): any;
    getID(): any;
    getLatestClassIDLegacy(): any;
    getLevel(): any;
    getLevelingCurve(c: any): any;
    getLosses(): any;
    getMaxHearts(c: any): any;
    getMaxTimeForCurrentMorphMarbleEffect(): any;
    getName(): any;
    getNameWithoutNickname(): any;
    getNativeSpell(c: any, u: any): any;
    getNumAttacks(): any;
    getNumRelics(): any;
    getPercentToLevel(): any;
    getPlayerClass(): any;
    getPlayerData(): any;
    getRegisterDate(): any;
    getSettings(): any;
    getSpellAssets(): any;
    getStarReward(): any;
    getStarRewardByDamage(c: any): any;
    getStars(): any;
    getStarsToLevel(): any;
    getStatHealth(): any;
    getStatPower(): any;
    getTeamScore(): any;
    getTowerProgress(): any;
    getUltimatePetId(): any;
    getUpdatedData(c: any, u?: any): any;
    getWins(): any;
    hasCompletedTowerTownTutorial(): any;
    hasCompletedTutorial(): any;
    hasHouseItem(c: any): any;
    hasLegacyMembership(): any;
    hasMaxQuantityOfItem(c: any, u: any): any;
    hasMembership(): any;
    hasValidatedParentEmail(): any;
    hasValidatedTeacherEmail(): any;
    heal(): void;
    healTeam(c: any): void;
    healTeamMember(c: any, u: any, h: any): void;
    init(u: any): any;
    initEducation(): void;
    initFromProtobuf(c: any): void;
    isBlockedByDarkTowerMemberGate(): any;
    isItemOwned(c: any): any;
    isKnockedOut(): any;
    isPlayerTransformed(): any;
    isPlayingAtSchool(): any;
    onEducationLoaded(c: any): void;
    onQuestionAnswered(c: any): void;
    onTutorialComplete(): void;
    processDeserter(): any;
    processStars(): void;
    registerIncomingAttack(c: any, u: any, h: any, a: any): void;
    removeTeam(): void;
    resetAccount(): any;
    resetModifiers(): void;
    rewardMembershipPrizes(c: any): any;
    sendInitialGTMEvents(): void;
    setAllowsHouseVisitors(u: any): void;
    setBGMVolume(c: any): void;
    setColiseum(c: any): void;
    setCurrentHearts(c: any, u: any): void;
    setData(c: any): void;
    setDefault(c: any, u: any): void;
    setEducation(c: any, u: any): void;
    setEnergy(u: any): void;
    setLocation(c: any): void;
    setMembership(c: any): void;
    setParentEmail(c: any): void;
    setPlayerClass(c: any): void;
    setSFXVolume(c: any): void;
    setSpinDate(c: any): void;
    setUltimateSessionStatus(c: any, u: any, h: any, a: any): void;
    setVoiceVolume(c: any): void;
    setZone(c: any): void;
    spinWheel(c: any): void;
    swapSpells(c: any, u: any): void;
    transformPlayer(u: any, h: any, a: any): void;
    unEquip(c: any, u: any): any;
    unlockMemberItems(): void;
    unlockSessionStatus(): void;
    updateMembershipVideoAdData(c: any): void;
    updateModifier(c: any, u: any): void;
    validateLevel(): void;
    registerDate: Date;
    _educationData: {
        chosenGrade: number;
        curriculumTreeID: number;
        grade: number;
        placementTestID: number;
        placementTestInstanceID: number;
        subject: string;
        gradeOverride: null;
        goalId: undefined;
        classIds: never[];
        defaultCurriculum: {
            id: string;
            name: string;
            subject: string;
        };
        homework: never[];
        placementTestData: {
            placementTestComposition: {
                "1": { difficulty_score: number; strandId: number; skillIds: any /* too deep */; }[];
                "2": { difficulty_score: number; strandId: number; skillIds: any /* too deep */; }[];
                "3": { difficulty_score: number; strandId: number; skillIds: any /* too deep */; }[];
                "4": { difficulty_score: number; strandId: number; skillIds: any /* too deep */; }[];
                "5": { difficulty_score: number; strandId: number; skillIds: any /* too deep */; }[];
                "6": { difficulty_score: number; strandId: number; skillIds: any /* too deep */; }[];
                "7": { difficulty_score: number; strandId: number; skillIds: any /* too deep */; }[];
                "8": { difficulty_score: number; strandId: number; skillIds: any /* too deep */; }[];
            };
            placementTestStats: {
                potentialPlacementGradeNum: number;
                currentStrandData: {
                    gradeNum: number;
                    momentum: number;
                    skillId: number;
                    strandId: number;
                };
                pastStrandData: {
                    placed: any /* too deep */[];
                };
                placementTestSkillsEncountered: { answersCorrect: number; answersIncorrect: number; skillId: number; }[];
            };
        };
        plans: never[];
        skills: ({ correct: number; decay: number; incorrect: number; last_updated: number; lock: number; skillID: number; theta: number; time_spent: number; date_mastered: null; } | { correct: number; decay: number; incorrect: number; last_updated: number; lock: number; skillID: number; time_spent: number; date_mastered: null; theta: null; } | { correct: number; decay: number; incorrect: number; last_updated: number; lock: number; skillID: number; theta: number; time_spent: number; date_mastered: string; })[];
    };
    _playerContainer: {
        _accessibleActive: boolean;
        _cacheAsBitmap: boolean;
        _destroyed: boolean;
        _isCreatedInBackpack: boolean;
        _isModalWithTransparency: boolean;
        _mountPending: boolean;
        accessible: boolean;
        accessibleChildren: boolean;
        battleShy: boolean;
        buttonMode: boolean;
        cacheAsBitmap: boolean;
        clickEnabled: boolean;
        complete: boolean;
        destroyed: boolean;
        digSetup: boolean;
        disableTransform: boolean;
        evtProc: boolean;
        exists: boolean;
        fixedToCamera: boolean;
        forceWeaponVisual: boolean;
        headOnly: boolean;
        hideHat: boolean;
        hideMount: boolean;
        interactive: boolean;
        interactiveChildren: boolean;
        isInTransformedMode: boolean;
        isMainPlayer: boolean;
        isMask: boolean;
        isModalWithTransparency: boolean;
        isSprite: boolean;
        loading: boolean;
        outOfDate: boolean;
        pendingDestroy: boolean;
        ran: boolean;
        renderable: boolean;
        showHandIK: boolean;
        showTransformationEffect: boolean;
        sortableChildren: boolean;
        sortDirty: boolean;
        transformationCompleted: boolean;
        transforming: boolean;
        visible: boolean;
        walkIntoBattle: boolean;
        worldVisible: boolean;
        _boundsID: number;
        _cacheAsBitmapMultisample: number;
        _eventsCount: number;
        _lastSortedIndex: number;
        _zIndex: number;
        alpha: number;
        anchorOffsetY: number;
        angle: number;
        bottom: number;
        broadcastId: number;
        cacheAsBitmapMultisample: number;
        castDelay: number;
        centerX: number;
        centerY: number;
        flagsToComplete: number;
        fxQueue: number;
        height: number;
        left: number;
        length: number;
        offsetX: number;
        offsetY: number;
        renderId: number;
        right: number;
        rotation: number;
        setScale: number;
        speed: number;
        tabIndex: number;
        timerForPlayerDataUpdate: number;
        top: number;
        updateTime: number;
        walkSpeed: number;
        width: number;
        worldAlpha: number;
        worldRotation: number;
        x: number;
        y: number;
        z: number;
        zIndex: number;
        _sortProperty: string;
        accessiblePointerEvents: string;
        accessibleType: string;
        animState: string;
        bootsTag: string;
        faceTag: string;
        hairTag: string;
        hatTag: string;
        name: string;
        outfitTag: string;
        weaponTag: string;
        _accessibleDiv: null;
        _boundsRect: null;
        _cacheAsBitmapResolution: null;
        _cacheData: null;
        _enabledFilters: null;
        _mask: null;
        accessibleHint: null;
        accessibleTitle: null;
        activeMount: null;
        cacheAsBitmapResolution: null;
        captured: null;
        cursor: null;
        filterArea: null;
        filters: null;
        hitArea: null;
        lastSmoothing: null;
        mask: null;
        membershipSprite: null;
        morph: null;
        pairs: null;
        potencyIcon: null;
        potionIcon: null;
        smoke: null;
        statusEffects: null;
        transformID: null;
        weapon: null;
        loadedCallback: undefined;
        _cacheAsBitmapDestroy(t: any): void;
        _calculateBounds(): void;
        _calculateCachedBounds(): void;
        _destroyCachedDisplayObject(): void;
        _getCachedLocalBounds(): any;
        _initCachedDisplayObject(t: any): void;
        _initCachedDisplayObjectCanvas(t: any): void;
        _recursivePostUpdateTransform(): void;
        _render(t: any): void;
        _renderCached(t: any): void;
        _renderCachedCanvas(t: any): void;
        add(c: any, u: any): any;
        addAt(c: any, u: any): any;
        addBarrierSpritesheet(c: any, u: any, h: any): void;
        addChild(): any;
        addChildAt(t: any, e: any): any;
        addListener(t: any, e: any, r: any): any;
        addOnClick(c: any): void;
        attack(): void;
        bringChildToTop(c: any): void;
        broadcastPlayerFullInfo(c: any): void;
        broadcastStopPlayer(): void;
        calculateBounds(): void;
        callAll(c: any, u: any): void;
        callbackFromArray(c: any, u: any): any;
        chat(c: any, u: any, h: any): void;
        cleanup(): void;
        clickCallback(arg0: any): void;
        containerUpdateTransform(): void;
        createActiveMount(c: any): void;
        createHealthBar(c: any): any;
        createMountByID(c: any): void;
        damaged(): void;
        dance(c: any, u: any): void;
        defeated(): void;
        destroy(): void;
        destroyMount(): void;
        dig(c: any, u: any): void;
        disableMovement(): void;
        disableTempParent(t: any): void;
        displayDamage(c: any, u: any, h: any, a: any): void;
        displayHeal(c: any, u: any): void;
        displayObjectUpdateTransform(): void;
        doBarrierAnimation(): void;
        doBarrierBreakAnimation(): void;
        doesMountMatchCurrentMount(c: any): any;
        doPuppetBreakAnimation(c: any): void;
        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
        emote(c: any, u: any, h: any): any;
        enableLocomotion(c: any, u: any): void;
        enableTempParent(): any;
        endChat(): void;
        eventNames(): any;
        faceToward(c: any): void;
        flip(): void;
        float(c: any): void;
        forceOutfit(c: any): void;
        getAt(c: any): any;
        getBounds(t: any, e: any): any;
        getByName(c: any): any;
        getChildAt(t: any): any;
        getChildByName(t: any, e: any): any;
        getChildIndex(t: any): any;
        getGlobalPosition(t: any, e: any): any;
        getHitboxHeight(): any;
        getHitboxLeft(): any;
        getHitboxTop(): any;
        getHitboxWidth(): any;
        getIndex(c: any): any;
        getInjectedValue(c: any): any;
        getLocalBounds(e: any, r: any): any;
        getRemainingTransformationTime(): any;
        getSource(): any;
        getTargetingOffset(): any;
        handlePostSprites(): void;
        hasTooltip(): any;
        hideName(): void;
        highlight(c: any, u: any, h: any, a: any): void;
        hop(c: any, u: any, h: any, a: any): void;
        initListeners(): void;
        isDefeated(): any;
        isFacingLeft(): any;
        isHighlighted(): any;
        isMounted(): any;
        isTransformed(): any;
        listenerCount(t: any): any;
        listeners(t: any): any;
        loadPrefabs(): any;
        lockOpponentSpell(): void;
        moonwalk(): void;
        mount(c: any): void;
        mountSprites(): void;
        moveDown(c: any): any;
        moveUp(c: any): any;
        off(t: any, e: any, i: any, n: any): any;
        on(t: any, e: any, r: any): any;
        once(t: any, e: any, r: any): any;
        onChildrenChange(t: any): void;
        onCreatureLevelUp(c: any, u: any): void;
        onFxAnimationDone(): void;
        onLoadComplete(): void;
        onStarsAdded(): void;
        patrol(c: any, u: any): void;
        play(c: any, u: any): void;
        playAll(c: any): void;
        playerClicked(): void;
        postStartLoad(): void;
        randomSetup(): void;
        reload(c: any): void;
        remove(c: any, u: any): any;
        removeAll(c: any): void;
        removeAllListeners(t: any): any;
        removeBetween(c: any, u: any, h: any, a: any): void;
        removeChild(): any;
        removeChildAt(t: any): any;
        removeChildren(t: any, e: any): any;
        removeListener(t: any, e: any, i: any, n: any): any;
        render(t: any): void;
        renderAdvanced(t: any): void;
        resetCharacterPosition(): void;
        resetItemTransformation(c: any): void;
        retreat(c: any): void;
        sendChildToBack(c: any): void;
        sendNpcClickedEvent(): void;
        setChildIndex(t: any, e: any): void;
        setData(): void;
        setElementAsModal(c: any): void;
        setHitbox(c: any): void;
        setNewAnimationState(c: any, u: any, h: any): void;
        setNewTarget(c: any, u: any): void;
        setParent(t: any): any;
        setPath(c: any, u: any, h: any): void;
        setRenderState(c: any, u: any): void;
        setSpriteInput(c: any): void;
        setSpritesVisible(c: any): void;
        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
        setTransformationContainer(c: any, u: any, h: any): void;
        setup(u: any, h: any): void;
        setupAnimations(): void;
        setupAssetsToLoad(): any;
        setupCollisionBlock(): void;
        setValidPath(c: any, u: any, h: any, a: any, f: any): void;
        shouldPlayRetreatOnDefeat(): any;
        shouldResetArmsOnDance(): any;
        showChat(c: any): void;
        showName(u: any): void;
        showSmoke(): void;
        showTooltip(c: any, u: any): void;
        showTransformationContainer(): void;
        showTransformationSmoke(c: any): void;
        sortChildren(): void;
        stand(): void;
        standStill(): void;
        startChat(c: any): void;
        startLoad(): void;
        stopAllAnimations(): void;
        stopAnimation(c: any): void;
        stopListeners(): void;
        stopMoveTween(): void;
        stopTweens(): void;
        swap(c: any, u: any): void;
        swapChildren(t: any, e: any): void;
        switchOpponent(c: any): void;
        toggleMount(): void;
        toGlobal(t: any, e: any, r: any): any;
        toLocal(t: any, e: any, r: any, i: any): any;
        transformToItem(c: any, u: any, h: any, a: any): void;
        unmount(): void;
        update(): void;
        updateFace(c: any): void;
        updateHair(c: any): void;
        updateHat(c: any): void;
        updateHead(c: any): void;
        updateLeftArm(c: any): void;
        updateLegs(c: any): void;
        updateNeck(c: any): void;
        updateRightArm(c: any): void;
        updateShirt(c: any): void;
        updateSprites(): void;
        updateTransform(): void;
        updateWeapon(c: any): void;
        updateZ(): void;
        walk(): void;
        _bounds: {
            maxX: number;
            maxY: number;
            minX: number;
            minY: number;
            updateID: number;
            rect: null;
            addBounds(t: any): void;
            addBoundsArea(t: any, e: any): void;
            addBoundsMask(t: any, e: any): void;
            addBoundsMatrix(t: any, e: any): void;
            addFrame(t: any, e: any, r: any, i: any, n: any): void;
            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
            addPoint(t: any): void;
            addPointMatrix(t: any, e: any): void;
            addQuad(t: any): void;
            addVertexData(t: any, e: any, r: any): void;
            addVertices(t: any, e: any, r: any, i: any): void;
            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
            clear(): void;
            getRectangle(t: any): any;
            isEmpty(): any;
            pad(t: any, e: any): void;
        };
        _events: {};
        _game: {
            _paused: boolean;
            _pausedByCode: boolean;
            isBooted: boolean;
            paused: boolean;
            pausedByCode: boolean;
            transparent: boolean;
            versioned: boolean;
            _height: number;
            _width: number;
            broadcastId: number;
            height: number;
            resolution: number;
            width: number;
            clientVersion: string;
            windowHeight: undefined;
            windowWidth: undefined;
            boot(): void;
            bootSystems(): void;
            createApp(u: any, h: any): any;
            createSystems(): void;
            destroy(): void;
            focusGain(c: any): void;
            focusLoss(c: any): void;
            gamePaused(c: any): void;
            gameResumed(u: any): void;
            init(): void;
            pauseGame(u: any): void;
            postUpdate(c: any): void;
            showDebugHeader(): void;
            toggleFpsGraph(): void;
            update(u: any): void;
            canvas: HTMLCanvasElement;
            parent: HTMLCanvasElement;
            _add: {
                audio(c: any, u: any, h: any, a: any): any;
                bitmapData(c: any, u: any, h: any, a: any): any;
                container(c: any, u: any, h: any): any;
                existing(c: any): any;
                graphics(c: any, u: any, h: any): any;
                group(c: any, u: any, h: any): any;
                renderTexture(c: any, u: any, h: any, a: any): any;
                sound(c: any, u: any, h: any, a: any): any;
                spine(c: any, u: any, h: any, a: any): any;
                sprite(c: any, u: any, h: any, a: any, f: any, l: any): any;
                text(c: any, u: any, h: any, f: any, l: any): any;
                tileSprite(c: any, u: any, h: any, a: any, f: any, l: any, b: any): any;
                tween(c: any, u: any, h: any): any;
                game: Player["_playerContainer"]["_game"];
                prodigyGame: Player["_playerContainer"]["_game"];
                stage: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    disableVisibilityChange: boolean;
                    exists: boolean;
                    fixedToCamera: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    _hiddenVar: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    name: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    camera: undefined;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    boot(): void;
                    calculateBounds(): void;
                    checkVisibility(): void;
                    containerUpdateTransform(): void;
                    destroy(): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(e: any, r: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    parseConfig(c: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setBackgroundColor(c: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    update(): void;
                    updateTransform(): void;
                    visibilityChange(c: any): any;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _game: Player["_playerContainer"]["_game"];
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    children: any /* too deep */[];
                    game: Player["_playerContainer"]["_game"];
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(e: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: Player["_playerContainer"]["_game"]["_add"]["stage"][];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_add"]["stage"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_add"]["stage"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_game"]["_add"]["stage"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_game"]["_add"]["stage"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_game"]["_add"]["stage"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_add"]["stage"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["_game"]["_add"]["stage"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["_game"]["_add"]["stage"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            _app: {
                _resizeId: null;
                _resizeTo: null;
                cancelResize(): void;
                destroy(e: any, r: any): void;
                queueResize(): any;
                render(): void;
                resize(): void;
                start(): void;
                stop(): void;
                view: HTMLCanvasElement;
                _ticker: {
                    _protected: boolean;
                    autoStart: boolean;
                    started: boolean;
                    _lastFrame: number;
                    _maxElapsedMS: number;
                    _minElapsedMS: number;
                    _requestId: number;
                    count: number;
                    deltaMS: number;
                    deltaTime: number;
                    elapsedMS: number;
                    FPS: number;
                    lastTime: number;
                    maxFPS: number;
                    minFPS: number;
                    speed: number;
                    _addListener(t: any): any;
                    _cancelIfNeeded(): void;
                    _requestIfNeeded(): void;
                    _startIfPossible(): void;
                    _tick(e: any): void;
                    add(e: any, r: any, i: any): any;
                    addOnce(e: any, r: any, i: any): any;
                    destroy(): void;
                    remove(t: any, e: any): any;
                    start(): void;
                    stop(): void;
                    update(t: any): any;
                    _head: {
                        _destroyed: boolean;
                        once: boolean;
                        priority: number;
                        context: null;
                        fn: null;
                        previous: null;
                        connect(t: any): void;
                        destroy(t: any): any;
                        emit(t: any): any;
                        match(t: any, e: any): any;
                        next: {
                            _destroyed: boolean;
                            once: boolean;
                            priority: number;
                            connect(t: any): void;
                            destroy(t: any): any;
                            emit(t: any): any;
                            fn(u: any): void;
                            match(t: any, e: any): any;
                            context: Player["_playerContainer"]["_game"];
                            next: any /* too deep */;
                            previous: Player["_playerContainer"]["_game"]["_app"]["_ticker"]["_head"];
                        };
                    };
                };
                loader: {
                    _protected: boolean;
                    loading: boolean;
                    concurrency: number;
                    progress: number;
                    baseUrl: string;
                    defaultQueryString: string;
                    _add(e: any, r: any, i: any, n: any): any;
                    _boundLoadResource(t: any, e: any): any;
                    _loadResource(t: any, e: any): void;
                    _onComplete(): void;
                    _onLoad(t: any): void;
                    _onStart(): void;
                    _prepareUrl(t: any): any;
                    add(t: any, e: any, r: any, i: any): any;
                    destroy(): void;
                    load(t: any): any;
                    pre(t: any): any;
                    reset(): any;
                    use(t: any): any;
                    _afterMiddleware: (((e: any, r: any) => any) | ((e: any, r: any) => void) | ((r: any, i: any) => void) | ((r: any, i: any) => any) | ((t: any, e: any) => void) | ((r: any, n: any) => any))[];
                    _beforeMiddleware: ((t: any, e: any) => void)[];
                    _queue: {
                        paused: boolean;
                        started: boolean;
                        buffer: number;
                        concurrency: number;
                        workers: number;
                        _insert(t: any, e: any, i: any): any;
                        _next(t: any): any;
                        _worker(t: any, e: any): any;
                        drain(): void;
                        empty(): void;
                        error(): void;
                        idle(): any;
                        kill(): void;
                        length(): any;
                        pause(): void;
                        process(): void;
                        push(t: any, e: any): void;
                        resume(): void;
                        running(): any;
                        saturated(): void;
                        unsaturated(): void;
                        unshift(t: any, e: any): void;
                        _tasks: never[];
                    };
                    _resourcesParsing: never[];
                    onComplete: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    onError: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    onLoad: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    onProgress: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    onStart: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    resources: {};
                };
                renderer: {
                    autoDensity: boolean;
                    clearBeforeRender: boolean;
                    preserveDrawingBuffer: boolean;
                    renderingToScreen: boolean;
                    useContextAlpha: boolean;
                    _backgroundColor: number;
                    _eventsCount: number;
                    backgroundAlpha: number;
                    backgroundColor: number;
                    CONTEXT_UID: number;
                    height: number;
                    multisample: number;
                    resolution: number;
                    type: number;
                    width: number;
                    _backgroundColorString: string;
                    addListener(t: any, e: any, r: any): any;
                    addSystem(t: any, e: any): any;
                    clear(): void;
                    contextChange(): void;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    generateTexture(t: any, r: any, i: any, n: any): any;
                    initPlugins(t: any): void;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any, e: any): void;
                    reset(): any;
                    resize(t: any, r: any): void;
                    gl: WebGL2RenderingContext;
                    view: HTMLCanvasElement;
                    _backgroundColorRgba: number[];
                    _events: {
                        prerender: {
                            once: boolean;
                            fn(): void;
                            context: any /* too deep */;
                        };
                    };
                    _lastObjectRendered: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"];
                    batch: {
                        boundArray(t: any, e: any, r: any, i: any): void;
                        copyBoundTextures(t: any, e: any): void;
                        destroy(): void;
                        flush(): void;
                        reset(): void;
                        setObjectRenderer(t: any): void;
                        currentRenderer: {
                            _aIndex: number;
                            _bufferSize: number;
                            _dcIndex: number;
                            _flushId: number;
                            _iIndex: number;
                            _indexCount: number;
                            _packedGeometryPoolSize: number;
                            _vertexCount: number;
                            MAX_TEXTURES: number;
                            size: number;
                            vertexSize: number;
                            bindAndClearTexArray(t: any): void;
                            buildDrawCalls(t: any, e: any, i: any): void;
                            buildTexturesAndDrawCalls(): void;
                            contextChange(): void;
                            destroy(): void;
                            drawBatches(): void;
                            flush(): void;
                            geometryClass(r: any): any;
                            getAttributeBuffer(t: any): any;
                            getIndexBuffer(t: any): any;
                            initFlushBuffers(): void;
                            onPrerender(): void;
                            packInterleavedGeometry(t: any, e: any, r: any, i: any, n: any): void;
                            render(t: any): void;
                            start(): void;
                            stop(): void;
                            updateGeometry(): void;
                            _indexBuffer: Uint16Array;
                            _aBuffers: any /* too deep */;
                            _attributeBuffer: any /* too deep */;
                            _bufferedElements: any /* too deep */;
                            _bufferedTextures: any /* too deep */;
                            _iBuffers: any /* too deep */;
                            _packedGeometries: any /* too deep */;
                            _shader: any /* too deep */;
                            _tempBoundTextures: any /* too deep */;
                            renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                            shaderGenerator: any /* too deep */;
                            state: any /* too deep */;
                        };
                        emptyRenderer: {
                            destroy(): void;
                            flush(): void;
                            render(t: any): void;
                            start(): void;
                            stop(): void;
                            renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        };
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                    };
                    buffer: {
                        CONTEXT_UID: number;
                        bind(t: any): void;
                        bindBufferBase(t: any, e: any): void;
                        bindBufferRange(t: any, e: any, r: any): void;
                        contextChange(): void;
                        createGLBuffer(t: any): any;
                        destroy(): void;
                        dispose(t: any, e: any): void;
                        disposeAll(t: any): void;
                        update(t: any): void;
                        gl: WebGL2RenderingContext;
                        boundBufferBases: {};
                        managedBuffers: {
                            "0": any /* too deep */;
                            "1": any /* too deep */;
                            "2": any /* too deep */;
                            "3": any /* too deep */;
                            "4": any /* too deep */;
                            "5": any /* too deep */;
                            "6": any /* too deep */;
                            "7": any /* too deep */;
                            "8": any /* too deep */;
                            "9": any /* too deep */;
                        };
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                    };
                    context: {
                        isLost: boolean;
                        webGLVersion: number;
                        contextChange(t: any): void;
                        createContext(e: any, r: any): any;
                        destroy(): void;
                        getExtensions(): void;
                        handleContextLost(arg0: any): void;
                        handleContextRestored(): void;
                        initFromContext(t: any): void;
                        initFromOptions(t: any): void;
                        postrender(): void;
                        validateContext(t: any): void;
                        gl: WebGL2RenderingContext;
                        extensions: {
                            astc: null;
                            atc: null;
                            etc: null;
                            etc1: null;
                            pvrtc: null;
                            anisotropicFiltering: any /* too deep */;
                            colorBufferFloat: any /* too deep */;
                            floatTextureLinear: any /* too deep */;
                            s3tc: any /* too deep */;
                            s3tc_sRGB: any /* too deep */;
                        };
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        supports: {
                            uint32Indices: boolean;
                        };
                    };
                    extract: {
                        base64(t: any, e: any, r: any): any;
                        canvas(e: any): any;
                        destroy(): void;
                        image(t: any, e: any, r: any): any;
                        pixels(e: any): any;
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                    };
                    filter: {
                        forceClear: boolean;
                        useMaxPadding: boolean;
                        applyFilter(e: any, r: any, i: any, n: any): void;
                        bindAndClear(e: any, r: any): void;
                        calculateSpriteMatrix(t: any, e: any): any;
                        destroy(): void;
                        emptyPool(): void;
                        getFilterTexture(e: any, r: any, i: any): any;
                        getOptimalFilterTexture(e: any, r: any, i: any, n: any): any;
                        pop(): any;
                        push(t: any, e: any): void;
                        resize(): void;
                        returnFilterTexture(t: any): any;
                        roundFrame(t: any, e: any, r: any, i: any, n: any): any;
                        transformAABB(t: any, e: any): void;
                        activeState: {
                            multisample: number;
                            resolution: number;
                            filters: null;
                            renderTexture: null;
                            target: null;
                            legacy: undefined;
                            transform: undefined;
                            clear(): void;
                            bindingDestinationFrame: any /* too deep */;
                            bindingSourceFrame: any /* too deep */;
                            destinationFrame: any /* too deep */;
                            sourceFrame: any /* too deep */;
                        };
                        defaultFilterStack: any /* too deep */[];
                        globalUniforms: {
                            group: boolean;
                            static: boolean;
                            ubo: boolean;
                            dirtyId: number;
                            id: number;
                            add(t: any, r: any, i: any): void;
                            update(): void;
                            syncUniforms: any /* too deep */;
                            uniforms: any /* too deep */;
                        };
                        quad: {
                            instanced: boolean;
                            id: number;
                            instanceCount: number;
                            refCount: number;
                            addAttribute(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            addIndex(e: any): any;
                            clone(): any;
                            destroy(): void;
                            dispose(): void;
                            getAttribute(t: any): any;
                            getBuffer(t: any): any;
                            getIndex(): any;
                            getSize(): any;
                            interleave(): any;
                            attributes: any /* too deep */;
                            buffers: any /* too deep */;
                            disposeRunner: any /* too deep */;
                            glVertexArrayObjects: any /* too deep */;
                            indexBuffer: any /* too deep */;
                        };
                        quadUv: {
                            instanced: boolean;
                            id: number;
                            instanceCount: number;
                            refCount: number;
                            addAttribute(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            addIndex(e: any): any;
                            clone(): any;
                            destroy(): void;
                            dispose(): void;
                            getAttribute(t: any): any;
                            getBuffer(t: any): any;
                            getIndex(): any;
                            getSize(): any;
                            interleave(): any;
                            invalidate(): any;
                            map(t: any, e: any): any;
                            uvs: Float32Array;
                            vertices: Float32Array;
                            attributes: any /* too deep */;
                            buffers: any /* too deep */;
                            disposeRunner: any /* too deep */;
                            glVertexArrayObjects: any /* too deep */;
                            indexBuffer: any /* too deep */;
                            uvBuffer: any /* too deep */;
                            vertexBuffer: any /* too deep */;
                        };
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        statePool: Player["_playerContainer"]["_game"]["_app"]["renderer"]["filter"]["activeState"][];
                        tempRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        texturePool: {
                            enableFullScreen: boolean;
                            _pixelsHeight: number;
                            _pixelsWidth: number;
                            clear(t: any): void;
                            createTexture(e: any, r: any, i: any): any;
                            getFilterTexture(e: any, r: any, i: any): any;
                            getOptimalTexture(e: any, r: any, i: any, n: any): any;
                            returnFilterTexture(t: any): any;
                            returnTexture(t: any): void;
                            setScreenSize(t: any): void;
                            textureOptions: any /* too deep */;
                            texturePool: any /* too deep */;
                        };
                    };
                    framebuffer: {
                        hasMRT: boolean;
                        writeDepthTexture: boolean;
                        CONTEXT_UID: number;
                        current: null;
                        bind(t: any, e: any, r: any): void;
                        blit(t: any, e: any, r: any): any;
                        canMultisampleFramebuffer(t: any): any;
                        clear(e: any, r: any, i: any, n: any, o: any): void;
                        contextChange(): any;
                        destroy(): void;
                        detectSamples(e: any): any;
                        disposeAll(t: any): void;
                        disposeFramebuffer(t: any, e: any): void;
                        forceStencil(): void;
                        initFramebuffer(t: any): any;
                        reset(): void;
                        resizeFramebuffer(t: any): void;
                        setViewport(t: any, e: any, r: any, i: any): void;
                        updateFramebuffer(t: any, e: any): void;
                        gl: WebGL2RenderingContext;
                        msaaSamples: Int32Array;
                        managedFramebuffers: any /* too deep */[];
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        size: {
                            height: number;
                            width: number;
                            x: number;
                            y: number;
                        };
                        anyFramebuffer: {
                            depth: boolean;
                            stencil: boolean;
                            dirtyFormat: number;
                            dirtyId: number;
                            dirtySize: number;
                            height: number;
                            multisample: number;
                            width: number;
                            depthTexture: null;
                            colorTexture: undefined;
                            addColorTexture(e: any, r: any): any;
                            addDepthTexture(e: any): any;
                            destroyDepthTexture(): void;
                            dispose(): void;
                            enableDepth(): any;
                            enableStencil(): any;
                            resize(t: any, e: any): void;
                            colorTextures: any /* too deep */;
                            disposeRunner: any /* too deep */;
                            glFramebuffers: any /* too deep */;
                        };
                        viewport: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                    };
                    geometry: {
                        canUseUInt32ElementIndex: boolean;
                        hasInstance: boolean;
                        hasVao: boolean;
                        CONTEXT_UID: number;
                        activateVao(t: any, e: any): void;
                        bind(t: any, e: any): void;
                        checkCompatibility(t: any, e: any): void;
                        contextChange(): any;
                        destroy(): void;
                        disposeAll(t: any): void;
                        disposeGeometry(t: any, e: any): void;
                        draw(t: any, e: any, r: any, i: any): any;
                        getSignature(t: any, e: any): any;
                        initGeometryVao(t: any, e: any, r: any): any;
                        reset(): void;
                        unbind(): void;
                        updateBuffers(): void;
                        _activeVao: WebGLVertexArrayObject;
                        gl: WebGL2RenderingContext;
                        _activeGeometry: {
                            instanced: boolean;
                            id: number;
                            instanceCount: number;
                            refCount: number;
                            addAttribute(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            addIndex(e: any): any;
                            clone(): any;
                            destroy(): void;
                            dispose(): void;
                            getAttribute(t: any): any;
                            getBuffer(t: any): any;
                            getIndex(): any;
                            getSize(): any;
                            interleave(): any;
                            _buffer: any /* too deep */;
                            _indexBuffer: any /* too deep */;
                            attributes: any /* too deep */;
                            buffers: any /* too deep */;
                            disposeRunner: any /* too deep */;
                            glVertexArrayObjects: any /* too deep */;
                            indexBuffer: any /* too deep */;
                        };
                        managedGeometries: {
                            "0": Player["_playerContainer"]["_game"]["_app"]["renderer"]["filter"]["quad"];
                            "1": Player["_playerContainer"]["_game"]["_app"]["renderer"]["filter"]["quadUv"];
                            "2": any /* too deep */;
                            "3": Player["_playerContainer"]["_game"]["_app"]["renderer"]["geometry"]["_activeGeometry"];
                        };
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                    };
                    globalUniforms: {
                        group: boolean;
                        static: boolean;
                        ubo: boolean;
                        dirtyId: number;
                        id: number;
                        add(t: any, r: any, i: any): void;
                        update(): void;
                        syncUniforms: {
                            "0"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "1"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "2"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "3"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "5"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "6"(ud: any, uv: any, renderer: any, syncData: any): void;
                        };
                        uniforms: {
                            projectionMatrix: any /* too deep */;
                        };
                    };
                    mask: {
                        enableScissor: boolean;
                        alphaMaskIndex: number;
                        destroy(): void;
                        detect(e: any): void;
                        pop(e: any): void;
                        popSpriteMask(): void;
                        push(e: any, r: any): void;
                        pushSpriteMask(t: any): void;
                        setMaskStack(t: any): void;
                        alphaMaskPool: never[];
                        maskDataPool: never[];
                        maskStack: never[];
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                    };
                    options: {
                        antialias: boolean;
                        autoDensity: boolean;
                        autoStart: boolean;
                        clearBeforeRender: boolean;
                        forceCanvas: boolean;
                        legacy: boolean;
                        preserveDrawingBuffer: boolean;
                        sharedTicker: boolean;
                        useContextAlpha: boolean;
                        backgroundAlpha: number;
                        height: number;
                        resolution: number;
                        width: number;
                        backgroundColor: undefined;
                        powerPreference: undefined;
                        resizeTo: undefined;
                        sharedLoader: undefined;
                        view: HTMLCanvasElement;
                    };
                    plugins: {
                        accessibility: {
                            _isActive: boolean;
                            _isMobileAccessibility: boolean;
                            debug: boolean;
                            isActive: boolean;
                            isMobileAccessibility: boolean;
                            androidUpdateCount: number;
                            androidUpdateFrequency: number;
                            renderId: number;
                            _hookDiv: null;
                            _onClick(t: any): void;
                            _onFocus(t: any): void;
                            _onFocusOut(t: any): void;
                            _onKeyDown(arg0: any): void;
                            _onMouseMove(arg0: any): void;
                            activate(): void;
                            addChild(t: any): void;
                            capHitArea(t: any): void;
                            createTouchHook(): void;
                            deactivate(): void;
                            destroy(): void;
                            destroyTouchHook(): void;
                            update(): void;
                            updateAccessibleObjects(t: any): void;
                            updateDebugHTML(t: any): void;
                            div: HTMLDivElement;
                            children: any /* too deep */;
                            pool: any /* too deep */;
                            renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        };
                        batch: Player["_playerContainer"]["_game"]["_app"]["renderer"]["batch"]["currentRenderer"];
                        extract: Player["_playerContainer"]["_game"]["_app"]["renderer"]["extract"];
                        interaction: {
                            _useSystemTicker: boolean;
                            autoPreventDefault: boolean;
                            eventsAdded: boolean;
                            mouseOverRenderer: boolean;
                            moveWhenInside: boolean;
                            supportsPointerEvents: boolean;
                            supportsTouchEvents: boolean;
                            tickerAdded: boolean;
                            useSystemTicker: boolean;
                            _eventsCount: number;
                            interactionFrequency: number;
                            resolution: number;
                            currentCursorMode: null;
                            cursor: null;
                            eventData: null;
                            interactionDOMElement: null;
                            mouse: null;
                            onPointerCancel: null;
                            onPointerDown: null;
                            onPointerMove: null;
                            onPointerOut: null;
                            onPointerOver: null;
                            onPointerUp: null;
                            processPointerCancel: null;
                            processPointerDown: null;
                            processPointerMove: null;
                            processPointerOverOut: null;
                            processPointerUp: null;
                            renderer: null;
                            search: null;
                            addEvents(): void;
                            addListener(t: any, e: any, r: any): any;
                            addTickerListener(): void;
                            configureInteractionEventForDOMEvent(t: any, e: any, r: any): any;
                            delayDispatchEvent(t: any, e: any, r: any): void;
                            destroy(): void;
                            dispatchEvent(t: any, e: any, r: any): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            eventNames(): any;
                            getInteractionDataForPointerId(t: any): any;
                            hitTest(t: any, e: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            mapPositionToPoint(t: any, e: any, r: any): void;
                            normalizeToPointerData(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onPointerComplete(t: any, e: any, r: any): void;
                            processInteractive(t: any, e: any, r: any, i: any): any;
                            releaseInteractionDataForPointerId(t: any): void;
                            removeAllListeners(t: any): any;
                            removeEvents(): void;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            removeTickerListener(): void;
                            setCursorMode(t: any): void;
                            setTargetElement(t: any, e: any): void;
                            tickerUpdate(t: any): void;
                            update(): void;
                            _eventListenerOptions: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObject: any /* too deep */;
                            activeInteractionData: any /* too deep */;
                            cursorStyles: any /* too deep */;
                            delayedEvents: any /* too deep */;
                            interactionDataPool: any /* too deep */;
                        };
                        particle: {
                            _generateOneMoreBuffer(t: any): any;
                            destroy(): void;
                            flush(): void;
                            generateBuffers(t: any): any;
                            render(t: any): void;
                            start(): void;
                            stop(): void;
                            uploadPosition(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            uploadRotation(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            uploadTint(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            uploadUvs(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            uploadVertices(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            properties: any /* too deep */;
                            renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                            shader: any /* too deep */;
                            state: any /* too deep */;
                            tempMatrix: any /* too deep */;
                        };
                        prepare: {
                            ticking: boolean;
                            add(t: any): any;
                            delayedTick(): void;
                            destroy(): void;
                            prepareItems(): void;
                            registerFindHook(t: any): any;
                            registerUploadHook(t: any): any;
                            tick(): void;
                            upload(e: any, r: any): void;
                            addHooks: any /* too deep */;
                            completes: any /* too deep */;
                            limiter: any /* too deep */;
                            queue: any /* too deep */;
                            renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                            uploadHookHelper: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                            uploadHooks: any /* too deep */;
                        };
                        tilingSprite: {
                            destroy(): void;
                            flush(): void;
                            render(e: any): void;
                            start(): void;
                            stop(): void;
                            quad: any /* too deep */;
                            renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                            shader: any /* too deep */;
                            simpleShader: any /* too deep */;
                            state: any /* too deep */;
                        };
                    };
                    projection: {
                        defaultFrame: null;
                        transform: null;
                        calculateProjection(t: any, e: any, r: any, i: any): void;
                        destroy(): void;
                        setTransform(t: any): void;
                        update(t: any, e: any, r: any, i: any): void;
                        destinationFrame: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        projectionMatrix: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                            array: Float32Array;
                        };
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        sourceFrame: Player["_playerContainer"]["_game"]["_app"]["renderer"]["projection"]["destinationFrame"];
                    };
                    renderTexture: {
                        current: null;
                        bind(t: any, e: any, r: any): void;
                        clear(t: any, e: any): void;
                        destroy(): void;
                        reset(): void;
                        resize(): void;
                        clearColor: Player["_playerContainer"]["_game"]["_app"]["renderer"]["_backgroundColorRgba"];
                        defaultMaskStack: Player["_playerContainer"]["_game"]["_app"]["renderer"]["mask"]["maskStack"];
                        destinationFrame: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        sourceFrame: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        viewportFrame: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                    };
                    runners: {
                        contextChange: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        destroy: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        postrender: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        prerender: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        reset: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        resize: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        update: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                    };
                    scissor: {
                        glConst: number;
                        _useCurrent(): void;
                        destroy(): void;
                        getStackLength(): any;
                        pop(): void;
                        push(t: any): void;
                        setMaskStack(t: any): void;
                        maskStack: Player["_playerContainer"]["_game"]["_app"]["renderer"]["mask"]["maskStack"];
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                    };
                    screen: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    shader: {
                        destroyed: boolean;
                        id: number;
                        bind(t: any, e: any): any;
                        contextChange(t: any): void;
                        createSyncBufferGroup(t: any, e: any, r: any): any;
                        createSyncGroups(t: any): any;
                        destroy(): void;
                        generateProgram(t: any): any;
                        getGlProgram(): any;
                        getSignature(t: any, e: any, r: any): any;
                        reset(): void;
                        setUniforms(t: any): void;
                        syncUniformBufferGroup(t: any, e: any): void;
                        syncUniformGroup(t: any, e: any): void;
                        syncUniforms(t: any, e: any, r: any): void;
                        systemCheck(): any;
                        gl: WebGL2RenderingContext;
                        _uboCache: {};
                        cache: {
                            "u--epsilon-float-originalColors-vec3-targetColors-vec3-uSampler-sampler2D-filterGlobals-globals"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "u--globals-uMapCoord-mat3-uClampFrame-vec4-uClampOffset-vec2-uTransform-mat3-uColor-vec4-translationMatrix-mat3-uSampler-sampler2D"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "u--outputFrame-inputSize-inputPixel-inputClamp-resolution-filterArea-filterClamp"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "u--outputFrame-vec4-inputSize-vec4-inputPixel-inputClamp-resolution-filterArea-filterClamp"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "u--projectionMatrix-mat3"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "u--strength-float-uSampler-sampler2D-filterGlobals-globals"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "u--tint-vec4-translationMatrix-mat3-default-globals"(ud: any, uv: any, renderer: any, syncData: any): void;
                            "u--uSamplers-sampler2D"(ud: any, uv: any, renderer: any, syncData: any): void;
                        };
                        program: {
                            id: number;
                            fragmentSrc: string;
                            vertexSrc: string;
                            syncUniforms: null;
                            attributeData: any /* too deep */;
                            glPrograms: any /* too deep */;
                            uniformData: any /* too deep */;
                        };
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        shader: {
                            uniformBindCount: number;
                            checkUniformExists(t: any, e: any): any;
                            destroy(): void;
                            program: Player["_playerContainer"]["_game"]["_app"]["renderer"]["shader"]["program"];
                            uniformGroup: any /* too deep */;
                            uniforms: any /* too deep */;
                        };
                    };
                    state: {
                        _blendEq: boolean;
                        blendMode: number;
                        polygonOffset: number;
                        stateId: number;
                        contextChange(e: any): any;
                        destroy(): void;
                        forceState(t: any): void;
                        reset(): void;
                        set(t: any): void;
                        setBlend(t: any): void;
                        setBlendMode(t: any): void;
                        setCullFace(t: any): void;
                        setDepthMask(t: any): void;
                        setDepthTest(t: any): void;
                        setFrontFace(t: any): void;
                        setOffset(t: any): void;
                        setPolygonOffset(t: any, e: any): void;
                        updateCheck(t: any, e: any): void;
                        gl: WebGL2RenderingContext;
                        blendModes: any /* too deep */[];
                        checks: ((t: any, e: any) => void)[];
                        defaultState: {
                            blend: boolean;
                            clockwiseFrontFace: boolean;
                            culling: boolean;
                            depthMask: boolean;
                            depthTest: boolean;
                            offsets: boolean;
                            _blendMode: number;
                            _polygonOffset: number;
                            blendMode: number;
                            data: number;
                            polygonOffset: number;
                        };
                        map: ((t: any) => void)[];
                    };
                    stencil: {
                        glConst: number;
                        _getBitwiseMask(): any;
                        _useCurrent(): void;
                        destroy(): void;
                        getStackLength(): any;
                        pop(t: any): void;
                        push(t: any): void;
                        setMaskStack(t: any): void;
                        maskStack: Player["_playerContainer"]["_game"]["_app"]["renderer"]["mask"]["maskStack"];
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                    };
                    texture: {
                        _anyBoundTextures: boolean;
                        hasIntegerTextures: boolean;
                        CONTEXT_UID: number;
                        currentLocation: number;
                        webGLVersion: number;
                        bind(t: any, e: any): void;
                        contextChange(): any;
                        destroy(): void;
                        destroyTexture(t: any, e: any): void;
                        ensureSamplerType(e: any): void;
                        initTexture(t: any): any;
                        initTextureType(e: any, r: any): void;
                        reset(): void;
                        setStyle(e: any, r: any): void;
                        unbind(t: any): void;
                        updateTexture(e: any): void;
                        updateTextureStyle(e: any): void;
                        gl: WebGL2RenderingContext;
                        boundTextures: any /* too deep */[];
                        emptyTextures: {
                            "34067": any /* too deep */;
                            "3553": any /* too deep */;
                        };
                        internalFormats: {
                            "32819": any /* too deep */;
                            "32820": any /* too deep */;
                            "33635": any /* too deep */;
                            "33640": any /* too deep */;
                            "34042": any /* too deep */;
                            "35899": any /* too deep */;
                            "35902": any /* too deep */;
                            "36193": any /* too deep */;
                            "36269": any /* too deep */;
                            "5120": any /* too deep */;
                            "5121": any /* too deep */;
                            "5122": any /* too deep */;
                            "5123": any /* too deep */;
                            "5124": any /* too deep */;
                            "5125": any /* too deep */;
                            "5126": any /* too deep */;
                        };
                        managedTextures: any /* too deep */[];
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                        anyTexture: {
                            destroyed: boolean;
                            isPowerOfTwo: boolean;
                            valid: boolean;
                            _batchEnabled: number;
                            _batchLocation: number;
                            _eventsCount: number;
                            _mipmap: number;
                            _scaleMode: number;
                            _wrapMode: number;
                            alphaMode: number;
                            anisotropicLevel: number;
                            dirtyId: number;
                            dirtyStyleId: number;
                            format: number;
                            height: number;
                            mipmap: number;
                            realHeight: number;
                            realWidth: number;
                            resolution: number;
                            scaleMode: number;
                            target: number;
                            touched: number;
                            type: number;
                            uid: number;
                            width: number;
                            wrapMode: number;
                            cacheId: null;
                            parentTextureArray: null;
                            resource: null;
                            _refreshPOT(): void;
                            addListener(t: any, e: any, r: any): any;
                            castToBaseTexture(): any;
                            destroy(): void;
                            dispose(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            eventNames(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onError(t: any): void;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setRealSize(t: any, e: any, r: any): any;
                            setResolution(t: any): any;
                            setResource(t: any): any;
                            setSize(t: any, e: any, r: any): any;
                            setStyle(t: any, e: any): any;
                            update(): void;
                            _events: any /* too deep */;
                            _glTextures: any /* too deep */;
                            textureCacheIds: any /* too deep */;
                        };
                    };
                    textureGC: {
                        checkCount: number;
                        checkCountMax: number;
                        count: number;
                        maxIdle: number;
                        mode: number;
                        destroy(): void;
                        postrender(): void;
                        run(): void;
                        unload(t: any): void;
                        renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
                    };
                };
                screen: Player["_playerContainer"]["_game"]["_app"]["renderer"]["screen"];
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"]["parent"];
            };
            _cache: {
                addAtlasAlias(c: any, u: any, h: any): void;
                addBitmapData(u: any, h: any, a: any): any;
                addImage(u: any, h: any, a: any): any;
                addItem(c: any, u: any, h: any): void;
                addJSON(u: any, h: any): any;
                addRenderTexture(u: any, h: any): any;
                addSound(u: any, h: any): any;
                addSpine(u: any, h: any): any;
                addText(u: any, h: any): any;
                addTextureAtlas(u: any, h: any, a: any): any;
                checkBitmapDataKey(u: any): any;
                checkFrameData(u: any): any;
                checkImageKey(u: any): any;
                checkJSONKey(u: any): any;
                checkRenderTextureKey(u: any): any;
                checkSoundKey(u: any): any;
                checkSpineKey(u: any): any;
                checkTextKey(u: any): any;
                deleteStaleCache(u: any, h: any, a: any): void;
                destroy(): void;
                getAtlasAlias(c: any): any;
                getBitmapData(u: any): any;
                getFrameByName(u: any, h: any, a: any): any;
                getFrameData(u: any, h: any): any;
                getGameKey(c: any): any;
                getImage(u: any): any;
                getJSON(u: any): any;
                getKeys(c: any): any;
                getMap(c: any): any;
                getRenderTexture(u: any): any;
                getSound(u: any): any;
                getSpine(u: any): any;
                getText(u: any): any;
                getTexture(u: any, h: any): any;
                getTextureAtlas(c: any): any;
                hasMap(c: any): any;
                isSoundDecoded(c: any): any;
                removeAllItems(): void;
                removeAllItemsOfType(c: any): void;
                removeAtlasAlias(c: any): void;
                removeBitmapData(u: any): any;
                removeImage(u: any): any;
                removeItem(c: any, u: any): void;
                removeJSON(u: any): any;
                removeRenderTexture(u: any): any;
                removeSound(u: any): any;
                removeSpine(u: any): any;
                removeText(u: any): any;
                removeTextureAtlas(u: any): any;
                _atlasFrameAlias: Map<never, never>;
                _cacheMap: Map<never, never>;
                cacheMap: Map<never, never>;
                _game: Player["_playerContainer"]["_game"];
                game: Player["_playerContainer"]["_game"];
            };
            _cameraCollisions: {
                addCollider(c: any): void;
                removeCollider(c: any): any;
                _cameraColliders: never[];
                cameraColliders: Player["_playerContainer"]["_game"]["_cameraCollisions"]["_cameraColliders"];
            };
            _config: {
                failIfMajorPerformanceCaveat: boolean;
                roundPixels: boolean;
                height: number;
                width: number;
                parent: string;
            };
            _consoleLogger: {
                _shouldColorCodeLogs: boolean;
                _minimumLogLevel: number;
                _stackTraceLogLevel: number;
                getLogStyle(c: any): any;
                getTextStyle(): any;
                log(c: any, u: any): void;
                setColoredLogsEnabled(c: any): void;
                setLogLevel(c: any): void;
            };
            _destroyQueue: {
                addGameObjectToDestroyQueue(c: any): void;
                destroy(): void;
                processDestroyQueue(): void;
                _queue: Set<never>;
            };
            _device: {
                isInitialized: boolean;
                deviceReadyAt: number;
                cleanUp(): void;
                initialize(): void;
                onDeviceRotation(): void;
                whenReady(c: any): void;
                callbacks: never[];
                rotationEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
            };
            _input: {
                enabled: boolean;
                pollLocked: boolean;
                recordPointerHistory: boolean;
                resetLocked: boolean;
                _pollCounter: number;
                _x: number;
                _y: number;
                doubleTapRate: number;
                holdRate: number;
                justPressedRate: number;
                justReleasedRate: number;
                maxPointers: number;
                minPriorityID: number;
                multiInputOverride: number;
                pollRate: number;
                recordLimit: number;
                recordRate: number;
                tapRate: number;
                totalActivePointers: number;
                totalInactivePointers: number;
                worldX: number;
                worldY: number;
                x: number;
                y: number;
                customCandidateHandler: null;
                customCandidateHandlerContext: null;
                addMoveCallback(c: any, u: any): void;
                addPointer(): any;
                addTouchLockCallback(c: any, u: any, h: any): void;
                boot(c: any): void;
                clearEnterCallback(): void;
                countActivePointers(c: any): any;
                deleteMoveCallback(c: any, u: any): void;
                destroy(): void;
                executeTouchLockCallbacks(c: any, u: any): void;
                getLocalPosition(c: any, u: any, h: any): any;
                getPointer(c: any): any;
                getPointerFromId(c: any): any;
                getPointerFromIdentifier(c: any): any;
                hitTest(c: any, u: any): any;
                preUpdate(): void;
                removeTouchLockCallback(c: any, u: any): any;
                reset(c: any): void;
                resetSpeed(c: any, u: any): void;
                setEnterCallback(c: any): void;
                setInteractiveCandidateHandler(c: any, u: any): void;
                startPointer(c: any): any;
                stopPointer(c: any, u: any): any;
                update(): void;
                updateChildren(c: any): void;
                updateInteractiveItems(): void;
                updatePointer(c: any): any;
                hitCanvas: HTMLCanvasElement;
                hitContext: CanvasRenderingContext2D;
                _oldPosition: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                activePointer: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    button: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    identifier: null;
                    pointerId: null;
                    targetObject: null;
                    justPressed(c: any): any;
                    justReleased(c: any): any;
                    leave(c: any): void;
                    move(c: any, u: any): any;
                    processButtonsDown(c: any, u: any): void;
                    processButtonsUp(c: any, u: any): void;
                    processButtonsUpDown(c: any, u: any): void;
                    processInteractiveObjects(c: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(c: any): any;
                    stop(c: any, u: any): any;
                    swapTarget(c: any, u: any): void;
                    update(): void;
                    updateButtons(c: any): void;
                    updateWorldPosition(): void;
                    target: HTMLCanvasElement;
                    _history: never[];
                    backButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["activePointer"];
                        time: {
                            _deltaMS: number;
                            _timeMS: number;
                            deltaMS: number;
                            timeMS: number;
                            add(c: any): any;
                            boot(): void;
                            create(c: any): any;
                            gamePaused(): any;
                            gameResumed(): any;
                            removeAll(): any;
                            update(): void;
                            updateTime(): void;
                            _events: any /* too deep */;
                            _game: Player["_playerContainer"]["_game"];
                            _timers: any /* too deep */;
                            events: any /* too deep */;
                        };
                    };
                    circle: {
                        _diameter: number;
                        _radius: number;
                        circumference: number;
                        diameter: number;
                        radius: number;
                        x: number;
                        y: number;
                        circumferencePoint(c: any, u: any, h: any): any;
                        getBounds(): any;
                        setTo(c: any, u: any, h: any): any;
                    };
                    eraserButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["activePointer"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    forwardButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["activePointer"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    game: Player["_playerContainer"]["_game"];
                    interactiveCandidates: any /* too deep */[];
                    leftButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: undefined;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        event: MouseEvent;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["activePointer"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    middleButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["activePointer"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    position: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    positionDown: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    positionUp: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    rightButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: undefined;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        event: MouseEvent;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["activePointer"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    worldPosition: {
                        x: number;
                        y: number;
                    };
                };
                circle: {
                    _diameter: number;
                    _radius: number;
                    circumference: number;
                    diameter: number;
                    radius: number;
                    x: number;
                    y: number;
                    circumferencePoint(c: any, u: any, h: any): any;
                    getBounds(): any;
                    setTo(c: any, u: any, h: any): any;
                };
                game: Player["_playerContainer"]["_game"];
                interactiveItems: {
                    _cursor: number;
                    total: number;
                    add(c: any): any;
                    callAll(c: any): void;
                    exists(c: any): any;
                    getByKey(c: any, u: any): any;
                    getIndex(c: any): any;
                    remove(c: any): any;
                    removeAll(c: any): void;
                    reset(): void;
                    setAll(c: any, u: any): void;
                    _list: any /* too deep */[];
                    first: {
                        _dragDistancePass: boolean;
                        _dragPhase: boolean;
                        _dragTimePass: boolean;
                        _pendingDrag: boolean;
                        _setHandCursor: boolean;
                        _wasEnabled: boolean;
                        allowHorizontalDrag: boolean;
                        allowVerticalDrag: boolean;
                        attachToCamera: boolean;
                        bringToTop: boolean;
                        checked: boolean;
                        dragFromCenter: boolean;
                        draggable: boolean;
                        dragStopBlocksInputUp: boolean;
                        enabled: boolean;
                        isDragged: boolean;
                        snapOnDrag: boolean;
                        snapOnRelease: boolean;
                        useHandCursor: boolean;
                        blockType: number;
                        dragDistanceThreshold: number;
                        dragTimeThreshold: number;
                        priorityID: number;
                        snapOffsetX: number;
                        snapOffsetY: number;
                        snapX: number;
                        snapY: number;
                        boundsRect: null;
                        boundsSprite: null;
                        _pointerOutHandler(c: any, u: any): void;
                        _pointerOverHandler(c: any, u: any): void;
                        _releasedHandler(c: any): void;
                        _touchedHandler(c: any): any;
                        addedToGroup(): void;
                        checkBoundsRect(): void;
                        checkBoundsSprite(): void;
                        checkPointerDown(c: any): any;
                        checkPointerOver(c: any): any;
                        destroy(): void;
                        disableDrag(): void;
                        disableSnap(): void;
                        downDuration(c: any): any;
                        dragTimeElapsed(c: any): void;
                        enableDrag(c: any, u: any, h: any, f: any, l: any): void;
                        enableSnap(c: any, u: any, h: any, a: any, f: any, l: any): void;
                        globalToLocal(c: any): any;
                        justOut(c: any, u: any): any;
                        justOver(c: any, u: any): any;
                        justPressed(c: any, u: any): any;
                        justReleased(c: any, u: any): any;
                        overDuration(c: any): any;
                        pointerDown(c: any): any;
                        pointerDragged(c: any): any;
                        pointerOut(c: any): any;
                        pointerOver(c: any): any;
                        pointerTimeDown(c: any): any;
                        pointerTimeOut(c: any): any;
                        pointerTimeOver(c: any): any;
                        pointerTimeUp(c: any): any;
                        pointerUp(c: any): any;
                        pointerX(c: any): any;
                        pointerY(c: any): any;
                        removedFromGroup(): void;
                        reset(): void;
                        setDragLock(c: any, u: any): void;
                        start(c: any, u: any): any;
                        startDrag(c: any): void;
                        stop(): void;
                        stopDrag(c: any): void;
                        update(c: any): any;
                        updateDrag(c: any, u: any): any;
                        validForInput(c: any): any;
                        _dragPoint: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        _pointerData: any /* too deep */[];
                        downPoint: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        dragOffset: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        dragStartPoint: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        game: Player["_playerContainer"]["_game"];
                        snapOffset: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        snapPoint: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        sprite: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            _roundPixels: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            inputEnabled: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isLoaded: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            pendingDestroy: boolean;
                            renderable: boolean;
                            roundPixels: boolean;
                            smoothed: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _cachedTint: number;
                            _eventsCount: number;
                            _height: number;
                            _lastSortedIndex: number;
                            _textureID: number;
                            _textureTrimmedID: number;
                            _tint: number;
                            _tintRGB: number;
                            _transformID: number;
                            _transformTrimmedID: number;
                            _width: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            blendMode: number;
                            bottom: number;
                            cacheAsBitmapMultisample: number;
                            centerX: number;
                            centerY: number;
                            height: number;
                            left: number;
                            renderId: number;
                            right: number;
                            rotation: number;
                            tabIndex: number;
                            tint: number;
                            top: number;
                            width: number;
                            worldAlpha: number;
                            worldRotation: number;
                            x: number;
                            y: number;
                            z: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            pluginName: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            frameName: null;
                            hitArea: null;
                            key: null;
                            loadingTween: null;
                            mask: null;
                            name: null;
                            scaleMax: null;
                            scaleMin: null;
                            transformCallbackContext: null;
                            vertexTrimmedData: null;
                            forcedHeight: undefined;
                            forcedWidth: undefined;
                            frame: undefined;
                            onTextureLoaded: undefined;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _onAnchorUpdate(): void;
                            _onTextureUpdate(): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            bringChildToTop(c: any): void;
                            calculateBounds(): void;
                            calculateTrimmedVertices(): any;
                            calculateVertices(): void;
                            checkCallback(): void;
                            checkSpriteDimension(): void;
                            containerUpdateTransform(): void;
                            containsPoint(t: any): any;
                            destroy(): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            getOffsetX(): any;
                            getOffsetY(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            loadNewTexture(c: any, u: any, h: any, a: any): void;
                            loadTexture(c: any, u: any): void;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            rotateMiddleBased(c: any): void;
                            sendChildToBack(c: any): void;
                            setActive(c: any): void;
                            setChildIndex(t: any, e: any): void;
                            setFrame(c: any): void;
                            setParent(t: any): any;
                            setTexture(c: any, u: any): void;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateFrame(u: any): void;
                            updateTexture(c: any): void;
                            updateTransform(): void;
                            indices: Uint16Array;
                            uvs: Float32Array;
                            vertexData: Float32Array;
                            _anchor: any /* too deep */;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _texture: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            anchor: any /* too deep */;
                            animations: any /* too deep */;
                            bounds: any /* too deep */;
                            cameraOffset: any /* too deep */;
                            children: any /* too deep */;
                            events: any /* too deep */;
                            game: Player["_playerContainer"]["_game"];
                            input: Player["_playerContainer"]["_game"]["_input"]["interactiveItems"]["first"];
                            localTransform: any /* too deep */;
                            parent: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            previousPosition: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            tempDisplayObjectParent: any /* too deep */;
                            texture: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            transformCallback: any /* too deep */;
                            world: any /* too deep */;
                            worldPosition: any /* too deep */;
                            worldScale: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    list: Player["_playerContainer"]["_game"]["_input"]["interactiveItems"]["_list"];
                    next: {
                        _dragDistancePass: boolean;
                        _dragPhase: boolean;
                        _dragTimePass: boolean;
                        _pendingDrag: boolean;
                        _setHandCursor: boolean;
                        _wasEnabled: boolean;
                        allowHorizontalDrag: boolean;
                        allowVerticalDrag: boolean;
                        attachToCamera: boolean;
                        bringToTop: boolean;
                        checked: boolean;
                        dragFromCenter: boolean;
                        draggable: boolean;
                        dragStopBlocksInputUp: boolean;
                        enabled: boolean;
                        isDragged: boolean;
                        snapOnDrag: boolean;
                        snapOnRelease: boolean;
                        useHandCursor: boolean;
                        dragDistanceThreshold: number;
                        dragTimeThreshold: number;
                        priorityID: number;
                        snapOffsetX: number;
                        snapOffsetY: number;
                        snapX: number;
                        snapY: number;
                        boundsRect: null;
                        boundsSprite: null;
                        _pointerOutHandler(c: any, u: any): void;
                        _pointerOverHandler(c: any, u: any): void;
                        _releasedHandler(c: any): void;
                        _touchedHandler(c: any): any;
                        addedToGroup(): void;
                        checkBoundsRect(): void;
                        checkBoundsSprite(): void;
                        checkPointerDown(c: any): any;
                        checkPointerOver(c: any): any;
                        destroy(): void;
                        disableDrag(): void;
                        disableSnap(): void;
                        downDuration(c: any): any;
                        dragTimeElapsed(c: any): void;
                        enableDrag(c: any, u: any, h: any, f: any, l: any): void;
                        enableSnap(c: any, u: any, h: any, a: any, f: any, l: any): void;
                        globalToLocal(c: any): any;
                        justOut(c: any, u: any): any;
                        justOver(c: any, u: any): any;
                        justPressed(c: any, u: any): any;
                        justReleased(c: any, u: any): any;
                        overDuration(c: any): any;
                        pointerDown(c: any): any;
                        pointerDragged(c: any): any;
                        pointerOut(c: any): any;
                        pointerOver(c: any): any;
                        pointerTimeDown(c: any): any;
                        pointerTimeOut(c: any): any;
                        pointerTimeOver(c: any): any;
                        pointerTimeUp(c: any): any;
                        pointerUp(c: any): any;
                        pointerX(c: any): any;
                        pointerY(c: any): any;
                        removedFromGroup(): void;
                        reset(): void;
                        setDragLock(c: any, u: any): void;
                        start(c: any, u: any): any;
                        startDrag(c: any): void;
                        stop(): void;
                        stopDrag(c: any): void;
                        update(c: any): any;
                        updateDrag(c: any, u: any): any;
                        validForInput(c: any): any;
                        _dragPoint: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        _pointerData: any /* too deep */[];
                        downPoint: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        dragOffset: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        dragStartPoint: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        game: Player["_playerContainer"]["_game"];
                        snapOffset: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        snapPoint: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        sprite: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            _roundPixels: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            inputEnabled: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isLoaded: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            pendingDestroy: boolean;
                            renderable: boolean;
                            roundPixels: boolean;
                            smoothed: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _cachedTint: number;
                            _eventsCount: number;
                            _height: number;
                            _lastSortedIndex: number;
                            _textureID: number;
                            _textureTrimmedID: number;
                            _tint: number;
                            _tintRGB: number;
                            _transformID: number;
                            _transformTrimmedID: number;
                            _width: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            blendMode: number;
                            bottom: number;
                            cacheAsBitmapMultisample: number;
                            centerX: number;
                            centerY: number;
                            height: number;
                            left: number;
                            renderId: number;
                            right: number;
                            rotation: number;
                            tabIndex: number;
                            tint: number;
                            top: number;
                            width: number;
                            worldAlpha: number;
                            worldRotation: number;
                            x: number;
                            y: number;
                            z: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            frameName: string;
                            key: string;
                            pluginName: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            loadingTween: null;
                            mask: null;
                            name: null;
                            scaleMax: null;
                            scaleMin: null;
                            transformCallbackContext: null;
                            vertexTrimmedData: null;
                            forcedHeight: undefined;
                            forcedWidth: undefined;
                            frame: undefined;
                            onTextureLoaded: undefined;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _onAnchorUpdate(): void;
                            _onTextureUpdate(): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            bringChildToTop(c: any): void;
                            calculateBounds(): void;
                            calculateTrimmedVertices(): any;
                            calculateVertices(): void;
                            checkCallback(): void;
                            checkSpriteDimension(): void;
                            containerUpdateTransform(): void;
                            containsPoint(t: any): any;
                            destroy(): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            getOffsetX(): any;
                            getOffsetY(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            loadNewTexture(c: any, u: any, h: any, a: any): void;
                            loadTexture(c: any, u: any): void;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            rotateMiddleBased(c: any): void;
                            sendChildToBack(c: any): void;
                            setActive(c: any): void;
                            setChildIndex(t: any, e: any): void;
                            setFrame(c: any): void;
                            setParent(t: any): any;
                            setTexture(c: any, u: any): void;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateFrame(u: any): void;
                            updateTexture(c: any): void;
                            updateTransform(): void;
                            indices: Uint16Array;
                            uvs: Float32Array;
                            vertexData: Float32Array;
                            _anchor: any /* too deep */;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _gsap: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _texture: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            anchor: any /* too deep */;
                            animations: any /* too deep */;
                            bounds: any /* too deep */;
                            cameraOffset: any /* too deep */;
                            children: any /* too deep */;
                            events: any /* too deep */;
                            game: Player["_playerContainer"]["_game"];
                            input: Player["_playerContainer"]["_game"]["_input"]["interactiveItems"]["next"];
                            localTransform: any /* too deep */;
                            parent: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            previousPosition: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            tempDisplayObjectParent: any /* too deep */;
                            texture: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            transformCallback: any /* too deep */;
                            world: any /* too deep */;
                            worldPosition: any /* too deep */;
                            worldScale: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                };
                keyboard: {
                    active: boolean;
                    enabled: boolean;
                    _i: number;
                    _k: number;
                    lastChar: null;
                    pressEvent: null;
                    _onKeyDown(u: any): void;
                    _onKeyPress(u: any): void;
                    _onKeyUp(u: any): void;
                    addCallbacks(c: any, u: any, h: any, a: any): void;
                    addKey(c: any): any;
                    addKeyCapture(c: any): void;
                    addKeys(c: any): any;
                    clearCaptures(): void;
                    createCursorKeys(): any;
                    destroy(): void;
                    downDuration(c: any, u: any): any;
                    isDown(c: any): any;
                    justPressed(c: any): any;
                    justReleased(c: any): any;
                    onDownCallback(arg0: any): void;
                    onPressCallback(arg0: any): void;
                    onUpCallback(arg0: any): void;
                    processKeyDown(c: any): void;
                    processKeyPress(c: any): void;
                    processKeyUp(c: any): void;
                    removeCallbacks(): void;
                    removeKey(c: any): void;
                    removeKeyCapture(c: any): void;
                    reset(c: any): void;
                    start(): any;
                    stop(): void;
                    update(): void;
                    upDuration(c: any, u: any): any;
                    event: KeyboardEvent;
                    _capture: boolean[];
                    _keys: any /* too deep */[];
                    callbackContext: Player["_playerContainer"]["_game"]["_input"]["keyboard"];
                    game: Player["_playerContainer"]["_game"];
                    lastKey: {
                        _enabled: boolean;
                        _justDown: boolean;
                        _justUp: boolean;
                        altKey: boolean;
                        ctrlKey: boolean;
                        enabled: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        justDown: boolean;
                        justUp: boolean;
                        shiftKey: boolean;
                        duration: number;
                        durationUp: number;
                        keyCode: number;
                        repeats: number;
                        timeDown: number;
                        timeUp: number;
                        onHoldContext: null;
                        cleanUp(): void;
                        downDuration(c: any): any;
                        justPressed(): any;
                        justReleased(): any;
                        processKeyDown(c: any): void;
                        processKeyUp(c: any): void;
                        reset(c: any): void;
                        update(): void;
                        upDuration(c: any): any;
                        event: KeyboardEvent;
                        game: Player["_playerContainer"]["_game"];
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                    };
                };
                mouse: {
                    active: boolean;
                    capture: boolean;
                    enabled: boolean;
                    stopOnGameOut: boolean;
                    wheelDelta: number;
                    _onMouseDown(u: any): void;
                    _onMouseMove(u: any): void;
                    _onMouseOut(u: any): void;
                    _onMouseOutGlobal(u: any): void;
                    _onMouseOver(u: any): void;
                    _onMouseUp(u: any): void;
                    _onMouseUpGlobal(u: any): void;
                    addMouseWheelCallback(c: any): any;
                    onMouseDown(c: any): void;
                    onMouseMove(c: any): void;
                    onMouseOut(c: any): void;
                    onMouseOutGlobal(c: any): void;
                    onMouseOver(c: any): void;
                    onMouseUp(c: any): void;
                    onMouseUpGlobal(c: any): void;
                    removeMouseWheelCallback(c: any): void;
                    start(): any;
                    stop(): void;
                    event: MouseEvent;
                    callbackContext: Player["_playerContainer"]["_game"];
                    game: Player["_playerContainer"]["_game"];
                    input: Player["_playerContainer"]["_game"]["_input"];
                };
                mousePointer: Player["_playerContainer"]["_game"]["_input"]["activePointer"];
                mouseWheel: {
                    active: boolean;
                    preventDefault: boolean;
                    delta: number;
                    wheelEventName: string;
                    boundOnWheelHandler(arg0: any): void;
                    onWheelHandler(c: any): void;
                    start(): any;
                    stop(): void;
                    element: HTMLCanvasElement;
                    callbackContext: Player["_playerContainer"]["_game"];
                    callbacks: ((arg0: any) => void)[];
                    game: Player["_playerContainer"]["_game"];
                };
                mspointer: {
                    active: boolean;
                    pointerDownCallback: null;
                    pointerMoveCallback: null;
                    pointerUpCallback: null;
                    onPointerDown(u: any): void;
                    onPointerMove(u: any): void;
                    onPointerOut(u: any): void;
                    onPointerOver(u: any): void;
                    onPointerUp(u: any): void;
                    onPointerUpGlobal(u: any): void;
                    start(): any;
                    stop(): void;
                    callbackContext: Player["_playerContainer"]["_game"];
                    game: Player["_playerContainer"]["_game"];
                    input: Player["_playerContainer"]["_game"]["_input"];
                };
                onDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onHold: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onPointerMove: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onTap: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onTouchEndEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onTouchStartEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                pointer1: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    identifier: null;
                    pointerId: null;
                    targetObject: null;
                    justPressed(c: any): any;
                    justReleased(c: any): any;
                    leave(c: any): void;
                    move(c: any, u: any): any;
                    processButtonsDown(c: any, u: any): void;
                    processButtonsUp(c: any, u: any): void;
                    processButtonsUpDown(c: any, u: any): void;
                    processInteractiveObjects(c: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(c: any): any;
                    stop(c: any, u: any): any;
                    swapTarget(c: any, u: any): void;
                    update(): void;
                    updateButtons(c: any): void;
                    updateWorldPosition(): void;
                    _history: never[];
                    backButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer1"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    circle: {
                        _diameter: number;
                        _radius: number;
                        circumference: number;
                        diameter: number;
                        radius: number;
                        x: number;
                        y: number;
                        circumferencePoint(c: any, u: any, h: any): any;
                        getBounds(): any;
                        setTo(c: any, u: any, h: any): any;
                    };
                    eraserButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer1"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    forwardButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer1"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    game: Player["_playerContainer"]["_game"];
                    interactiveCandidates: never[];
                    leftButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer1"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    middleButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer1"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    position: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    positionDown: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    positionUp: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    rightButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer1"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    worldPosition: {
                        x: number;
                        y: number;
                    };
                };
                pointer2: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    identifier: null;
                    pointerId: null;
                    targetObject: null;
                    justPressed(c: any): any;
                    justReleased(c: any): any;
                    leave(c: any): void;
                    move(c: any, u: any): any;
                    processButtonsDown(c: any, u: any): void;
                    processButtonsUp(c: any, u: any): void;
                    processButtonsUpDown(c: any, u: any): void;
                    processInteractiveObjects(c: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(c: any): any;
                    stop(c: any, u: any): any;
                    swapTarget(c: any, u: any): void;
                    update(): void;
                    updateButtons(c: any): void;
                    updateWorldPosition(): void;
                    _history: never[];
                    backButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer2"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    circle: {
                        _diameter: number;
                        _radius: number;
                        circumference: number;
                        diameter: number;
                        radius: number;
                        x: number;
                        y: number;
                        circumferencePoint(c: any, u: any, h: any): any;
                        getBounds(): any;
                        setTo(c: any, u: any, h: any): any;
                    };
                    eraserButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer2"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    forwardButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer2"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    game: Player["_playerContainer"]["_game"];
                    interactiveCandidates: never[];
                    leftButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer2"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    middleButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer2"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    position: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    positionDown: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    positionUp: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    rightButton: {
                        altKey: boolean;
                        ctrlKey: boolean;
                        isDown: boolean;
                        isUp: boolean;
                        shiftKey: boolean;
                        buttonCode: number;
                        duration: number;
                        timeDown: number;
                        timeUp: number;
                        value: number;
                        event: null;
                        destroy(): void;
                        justPressed(c: any): any;
                        justReleased(c: any): any;
                        reset(): void;
                        start(c: any, u: any): void;
                        startStop(c: any, u: any, h: any): void;
                        stop(c: any, u: any): void;
                        onDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_input"]["pointer2"];
                        time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
                    };
                    worldPosition: {
                        x: number;
                        y: number;
                    };
                };
                pointerLock: {
                    active: boolean;
                    locked: boolean;
                    pointerlockchange: undefined;
                    pointerLockElement: undefined;
                    pointerlockerror: undefined;
                    boundOnChangeHandler(arg0: any): void;
                    boundOnErrorHandler(arg0: any): void;
                    cleanUp(): void;
                    exit(): void;
                    onChangeHandler(c: any): void;
                    onErrorHandler(c: any): void;
                    request(): void;
                    start(): any;
                    stop(): void;
                    element: HTMLCanvasElement;
                    game: Player["_playerContainer"]["_game"];
                    onChange: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onError: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                };
                pointers: (Player["_playerContainer"]["_game"]["_input"]["pointer1"] | Player["_playerContainer"]["_game"]["_input"]["pointer2"])[];
                position: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                scale: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                speed: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                touch: {
                    active: boolean;
                    enabled: boolean;
                    consumeDocumentTouches(): void;
                    onTouchCancel(c: any): void;
                    onTouchEnd(c: any): void;
                    onTouchEnter(c: any): void;
                    onTouchLeave(c: any): void;
                    onTouchMove(c: any): void;
                    onTouchStart(c: any): void;
                    start(): any;
                    stop(): void;
                    callbackContext: Player["_playerContainer"]["_game"];
                    game: Player["_playerContainer"]["_game"];
                };
            };
            _load: {
                _isLoading: boolean;
                _wasFail: boolean;
                isLoading: boolean;
                _crossOrigin: string;
                baseURL: string;
                crossOrigin: string;
                addFile(c: any, u: any, h: any, a: any, f: any): void;
                addFileToInternalLoader(c: any): void;
                atlasJSONHash(c: any, u: any, h: any): void;
                audio(c: any, u: any, h: any, a: any): void;
                destroy(): void;
                fileCompleteCallback(c: any, u: any): void;
                fileStartCallback(c: any): void;
                getMaxParallelDownloads(): any;
                getNumLoadedFiles(): any;
                image(c: any, u: any, h: any, a: any): void;
                isInLoadingQueue(c: any): any;
                isInQueue(c: any): any;
                json(c: any, u: any, h: any, a: any): void;
                processImage(c: any, u: any, h: any): void;
                processJSON(c: any, u: any, h: any): void;
                processScript(c: any, u: any): void;
                processSound(c: any, u: any, h: any): void;
                processSpine(c: any, u: any, h: any): void;
                processSpritesheet(c: any, u: any, h: any): void;
                processTextureAtlas(c: any, u: any, h: any): void;
                removeFromLoadingQueue(c: any): any;
                reset(c: any): void;
                script(c: any, u: any, h: any, a: any, f: any): void;
                setupFileCallbacks(c: any): void;
                spine(c: any, u: any, h: any, a: any): void;
                spritesheet(c: any, u: any, h: any, a: any, f: any, l: any): void;
                start(): void;
                startLoad(): void;
                totalQueuedFiles(): any;
                _immediateQueue: never[];
                _loader: {
                    _protected: boolean;
                    loading: boolean;
                    concurrency: number;
                    progress: number;
                    baseUrl: string;
                    defaultQueryString: string;
                    _add(e: any, r: any, i: any, n: any): any;
                    _boundLoadResource(t: any, e: any): any;
                    _loadResource(t: any, e: any): void;
                    _onComplete(): void;
                    _onLoad(t: any): void;
                    _onStart(): void;
                    _prepareUrl(t: any): any;
                    add(t: any, e: any, r: any, i: any): any;
                    destroy(): void;
                    load(t: any): any;
                    pre(t: any): any;
                    reset(): any;
                    use(t: any): any;
                    _afterMiddleware: (((e: any, r: any) => any) | ((e: any, r: any) => void) | ((r: any, i: any) => void) | ((r: any, i: any) => any) | ((t: any, e: any) => void) | ((r: any, n: any) => any))[];
                    _beforeMiddleware: ((t: any, e: any) => void)[];
                    _queue: {
                        paused: boolean;
                        started: boolean;
                        buffer: number;
                        concurrency: number;
                        workers: number;
                        _insert(t: any, e: any, i: any): any;
                        _next(t: any): any;
                        _worker(t: any, e: any): any;
                        drain(): void;
                        empty(): void;
                        error(): void;
                        idle(): any;
                        kill(): void;
                        length(): any;
                        pause(): void;
                        process(): void;
                        push(t: any, e: any): void;
                        resume(): void;
                        running(): any;
                        saturated(): void;
                        unsaturated(): void;
                        unshift(t: any, e: any): void;
                        _tasks: never[];
                    };
                    _resourcesParsing: never[];
                    onComplete: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    onError: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    onLoad: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    onProgress: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    onStart: {
                        _head: undefined;
                        _tail: undefined;
                        add(t: any, e: any): any;
                        detach(t: any): any;
                        detachAll(): any;
                        dispatch(): any;
                        handlers(t: any): any;
                        has(t: any): any;
                        once(t: any, e: any): any;
                    };
                    resources: {};
                };
                _loadingQueue: never[];
                _onFileComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                _onFileStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                _onLoadComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                _queue: never[];
                loader: Player["_playerContainer"]["_game"]["_load"]["_loader"];
                onFileComplete: Player["_playerContainer"]["_game"]["_load"]["_onFileComplete"];
                onFileStart: Player["_playerContainer"]["_game"]["_load"]["_onFileStart"];
                onLoadComplete: Player["_playerContainer"]["_game"]["_load"]["_onLoadComplete"];
                onReset: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
            };
            _navMeshSystem: {
                _currentStreamedMap: null;
                _navMeshConstructorWorker: null;
                addNonWalkableArea(c: any): any;
                addWalkableArea(c: any): void;
                bindStreamedMap(c: any): void;
                buildNavMeshFromGlobalPolys(): any;
                constructBlockMesh(c: any): any;
                destroy(): void;
                findPath(c: any, u: any): any;
                generateBlockID(c: any): any;
                getNavMeshConstructor(): any;
                getPolyBoolPoly(c: any): any;
                modifyNavMesh(c: any, u: any, h: any): any;
                onStreamedMapBlocksChanged(c: any, u: any): any;
                releaseStreamedMap(): any;
                reloadStreamedBlock(c: any): any;
                unloadStreamedBlock(c: any): any;
                _blockPolygonIDs: Map<never, never>;
                _streamedBlockMeshes: Map<never, never>;
                _globalNonWalkableAreas: never[];
                _globalPolygonIDs: never[];
                _globalWalkableAreas: never[];
                _navMesh: {
                    _fromPolySearchRadius: number;
                    _meshShrinkAmount: number;
                    _nextId: number;
                    addPolygon(c: any): any;
                    calculateAllNeighbours(): void;
                    calculatePairNeighbours(c: any, u: any): any;
                    calculatePolyNeighbours(c: any): void;
                    destroy(): any;
                    findPath(c: any, u: any): any;
                    getPolygons(): any;
                    getSegmentOverlap(c: any, u: any): any;
                    projectPointToEdge(c: any, u: any): any;
                    projectPointToPolygon(c: any, u: any): any;
                    removePolygon(c: any): any;
                    _graph: {
                        cleanDirty(): void;
                        destroy(): void;
                        init(): void;
                        markDirty(c: any): void;
                        navHeuristic(u: any, h: any): any;
                        neighbors(c: any): any;
                        dirtyNodes: never[];
                        nodes: never[];
                    };
                    _navPolygons: Player["_playerContainer"]["_game"]["_navMeshSystem"]["_navMesh"]["_graph"]["nodes"];
                };
                navMesh: Player["_playerContainer"]["_game"]["_navMeshSystem"]["_navMesh"];
            };
            _onPause: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _listener(): void; destroy(): void; execute(c: any): any; isBound(): any; listener(): void; toString(): any; _args: any /* too deep */; _context: any /* too deep */; context: any /* too deep */; }[];
            };
            _onResume: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _listener(): void; destroy(): void; execute(c: any): any; isBound(): any; listener(): void; toString(): any; _args: any /* too deep */; _context: any /* too deep */; context: any /* too deep */; }[];
            };
            _rnd: {
                c: number;
                s0: number;
                s1: number;
                s2: number;
                angle(): any;
                frac(): any;
                hash(c: any): any;
                integer(): any;
                integerInRange(c: any, u: any): any;
                normal(): any;
                pick(c: any): any;
                real(): any;
                realInRange(c: any, u: any): any;
                rnd(): any;
                shuffle(c: any): any;
                sign(): any;
                sow(c: any): void;
                state(c: any): any;
                uuid(): any;
                weightedPick(c: any): any;
            };
            _rootContainer: {
                _parentContainer: null;
                parent: null;
                bind(c: any): any;
                get(c: any): any;
                hasBinding(c: any, u: any): any;
                rebind(c: any): any;
                resolve(c: any): any;
                unbind(c: any): void;
                unbindAll(): void;
                _inversifyContainer: {
                    guid: string;
                    _middleware: null;
                    parent: null;
                    _get(t: any, n: any, e: any, i: any, o: any, a: any): any;
                    _planAndResolve(): any;
                    applyCustomMetadataReader(t: any): void;
                    applyMiddleware(): any;
                    bind(t: any): any;
                    createChild(): any;
                    get(t: any): any;
                    getAll(t: any): any;
                    getAllNamed(t: any, n: any): any;
                    getAllTagged(t: any, n: any, e: any): any;
                    getNamed(t: any, n: any): any;
                    getTagged(t: any, n: any, e: any): any;
                    isBound(t: any): any;
                    isBoundNamed(t: any, n: any): any;
                    isBoundTagged(t: any, n: any, e: any): any;
                    load(): any;
                    rebind(t: any): any;
                    resolve(n: any): any;
                    restore(): void;
                    snapshot(): void;
                    unbind(t: any): void;
                    unbindAll(): void;
                    unload(): any;
                    _bindingDictionary: {
                        add(t: any, n: any): void;
                        clone(): any;
                        get(t: any): any;
                        getMap(): any;
                        hasKey(t: any): any;
                        remove(t: any): void;
                        removeByCondition(t: any): any;
                        traverse(t: any): void;
                        _map: Map<never, never>;
                    };
                    _metadataReader: {
                        getConstructorMetadata(t: any): any;
                        getPropertiesMetadata(t: any): any;
                    };
                    _snapshots: never[];
                    options: {
                        autoBindInjectable: boolean;
                        defaultScope: string;
                    };
                };
                sourceContainer: Player["_playerContainer"]["_game"]["_rootContainer"]["_inversifyContainer"];
            };
            _scale: {
                _booted: boolean;
                _forceLandscape: boolean;
                _forcePortrait: boolean;
                _incorrectOrientation: boolean;
                isFullScreen: boolean;
                isLandscape: boolean;
                isPortrait: boolean;
                pageAlignHorizontally: boolean;
                pageAlignVertically: boolean;
                parentIsWindow: boolean;
                _lastUpdate: number;
                _updateThrottle: number;
                _updateThrottleReset: number;
                aspectRatio: number;
                currentScaleMode: number;
                fullScreenScaleMode: number;
                height: number;
                scaleMode: number;
                sourceAspectRatio: number;
                trackParentInterval: number;
                width: number;
                screenOrientation: string;
                _onResizeContext: null;
                _pendingScaleMode: null;
                _fullScreenChange(u: any): void;
                _fullScreenError(u: any): void;
                _gameResumed(): void;
                _orientationChange(u: any): void;
                _windowResize(u: any): void;
                align(c: any, u: any): void;
                alignCanvas(c: any, u: any): void;
                boot(): void;
                cleanupCreatedTarget(): void;
                createFullScreenTarget(): any;
                destroy(): void;
                forceOrientation(c: any, u: any): void;
                fullScreenChange(c: any): void;
                fullScreenError(c: any): void;
                getParentBounds(c: any, u: any): any;
                orientationChange(c: any): void;
                parseConfig(c: any): void;
                pauseUpdate(): void;
                prepScreenMode(u: any): void;
                preUpdate(): void;
                queueUpdate(c: any): void;
                recalculateCanvasOffset(): void;
                reflowCanvas(): void;
                reflowGame(): void;
                refresh(): void;
                resetCanvas(c: any, u: any): void;
                setExactFit(): void;
                setGameSize(u: any, h: any): void;
                setMaximum(): void;
                setMinMax(c: any, u: any, h: any, a: any): void;
                setResizeCallback(c: any, u: any): void;
                setShowAll(c: any): void;
                setupScale(c: any, u: any): void;
                signalSizeChange(): void;
                startFullScreen(): any;
                stopFullScreen(): any;
                updateDimensions(u: any, h: any, a: any): void;
                updateLayout(): void;
                updateOrientationState(): any;
                updateScalingAndBounds(): void;
                windowResize(c: any): void;
                boundingParent: HTMLDivElement;
                event: Event;
                parentNode: HTMLCanvasElement;
                _dom: {
                    scrollX: number;
                    scrollY: number;
                    getOffset(c: any, u: any): any;
                    getScreenOrientation(): any;
                    onDeviceReady(): void;
                    layoutBounds: {
                        height: number;
                        width: number;
                        x: number;
                        y: number;
                    };
                    visualBounds: {
                        height: number;
                        width: number;
                        x: number;
                        y: number;
                        _dom: Player["_playerContainer"]["_game"]["_scale"]["_dom"];
                    };
                };
                _game: Player["_playerContainer"]["_game"];
                _gameSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(c: any, h: any, a: any, f: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): any;
                    setPosition(c: any, u: any): void;
                    setTo(c: any, u: any, h: any, a: any): any;
                    anchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                };
                _lastReportedCanvasSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(c: any, h: any, a: any, f: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): any;
                    setPosition(c: any, u: any): void;
                    setTo(c: any, u: any, h: any, a: any): any;
                    anchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                };
                _lastReportedGameSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(c: any, h: any, a: any, f: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): any;
                    setPosition(c: any, u: any): void;
                    setTo(c: any, u: any, h: any, a: any): any;
                    anchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                };
                _parentBounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(c: any, h: any, a: any, f: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): any;
                    setPosition(c: any, u: any): void;
                    setTo(c: any, u: any, h: any, a: any): any;
                    anchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                };
                _scaleFactorInverted: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                _tempBounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(c: any, h: any, a: any, f: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): any;
                    setPosition(c: any, u: any): void;
                    setTo(c: any, u: any, h: any, a: any): any;
                    anchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                };
                bounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(c: any, h: any, a: any, f: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): any;
                    setPosition(c: any, u: any): void;
                    setTo(c: any, u: any, h: any, a: any): any;
                    anchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bottomRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topLeft: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    topRight: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                };
                canvasOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                enterIncorrectOrientation: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                leaveIncorrectOrientation: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                margin: {
                    bottom: number;
                    left: number;
                    right: number;
                    top: number;
                    x: number;
                    y: number;
                };
                onFullScreenChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onFullScreenError: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onFullScreenInit: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOrientationChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onSizeChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parentScaleFactor: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                scaleFactor: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                windowConstraints: {
                    bottom: string;
                    right: string;
                };
            };
            _sound: {
                _codeMuted: boolean;
                _muted: boolean;
                _watching: boolean;
                connectToMaster: boolean;
                mute: boolean;
                muteOnPause: boolean;
                noAudio: boolean;
                touchLocked: boolean;
                baseLatency: number;
                channels: number;
                volume: number;
                _unlockSource: null;
                _watchCallback: null;
                _watchContext: null;
                _onResumeWebAudioOnClick(): void;
                _resumeWebAudioOnClick(): void;
                add(c: any, u: any, h: any, a: any): any;
                boot(): void;
                destroy(): void;
                pauseAll(): void;
                play(c: any, u: any, h: any): any;
                remove(c: any): any;
                removeAll(): void;
                removeByKey(c: any): any;
                resumeAll(): void;
                resumeWebAudio(): any;
                setDecodedCallback(c: any, u: any, h: any): void;
                setMute(): void;
                setTouchUnlock(): void;
                stopAll(): void;
                unlock(): any;
                unsetMute(): void;
                update(): void;
                context: AudioContext;
                emptyBuffer: AudioBuffer;
                _sounds: never[];
                _watchList: {
                    _cursor: number;
                    total: number;
                    first: null;
                    next: null;
                    add(c: any): any;
                    callAll(c: any): void;
                    exists(c: any): any;
                    getByKey(c: any, u: any): any;
                    getIndex(c: any): any;
                    remove(c: any): any;
                    removeAll(c: any): void;
                    reset(): void;
                    setAll(c: any, u: any): void;
                    _list: never[];
                    list: Player["_playerContainer"]["_game"]["_sound"]["_watchList"]["_list"];
                };
                game: Player["_playerContainer"]["_game"];
                onMute: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onSoundDecode: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onTouchUnlock: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onUnMute: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onVolumeChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                sounds: Player["_playerContainer"]["_game"]["_sound"]["_sounds"];
            };
            _stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            _state: {
                _clearWorld: boolean;
                current: string;
                _pendingState: null;
                add(c: any, u: any, h: any): any;
                boot(): void;
                clearCurrentState(): void;
                destroy(): void;
                get(c: any): any;
                getCurrentState(): any;
                loadComplete(): void;
                pause(): void;
                preUpdate(): any;
                remove(c: any): void;
                resume(): void;
                setCurrentState(c: any): void;
                start(c: any, u: any): void;
                update(): void;
                _states: Map<never, never>;
                states: Map<never, never>;
                _current: {
                    _loadCompleteSent: boolean;
                    complete: boolean;
                    fadeInSet: boolean;
                    hasBroadcastedInfo: boolean;
                    hideHex: boolean;
                    isMapScreen: boolean;
                    showMenu: boolean;
                    walkEnabled: boolean;
                    frameUntilAddNextPlayer: number;
                    hudMenuStyle: number;
                    startX: number;
                    startY: number;
                    tileSize: number;
                    _key: string;
                    key: string;
                    saveTag: string;
                    screenName: string;
                    zoneName: string;
                    _friendListLoadTimeoutID: null;
                    bg: null;
                    msg: null;
                    previousMapData: null;
                    previousZone: null;
                    rearOverlay: null;
                    screenData: null;
                    addAreaEvent(c: any, u: any, h: any, a: any, f: any): any;
                    addBlock(c: any, u: any, h: any): any;
                    addBounty(c: any, u: any, h: any, a: any, f: any, b: any, d: any): any;
                    addChest(c: any, u: any, h: any, a: any, f: any, l: any): any;
                    addClickableArea(c: any, u: any, h: any, a: any, f: any): void;
                    addClickableEvent(c: any, u: any, h: any, a: any, f: any, l: any, b: any, d: any): any;
                    addClickableMoveEvent(c: any, u: any, h: any, a: any, f: any, l: any, b: any, d: any, v: any, O: any): any;
                    addCollect(c: any, u: any, h: any, a: any): any;
                    addConstructedNPC(c: any, u: any, h: any, a: any, l: any, b: any): any;
                    addConstructedQuestNPC(c: any, u: any, h: any, a: any, f: any): any;
                    addDoor(c: any, u: any): void;
                    addFireflyEvent(c: any, u: any, h: any, a: any, f: any, l: any, b: any): any;
                    addFollow(c: any, u: any): any;
                    addGnome(c: any, u: any, h: any, a: any, f: any, l: any, b: any): any;
                    addMimic(c: any, u: any, h: any, a: any, f: any, l: any): any;
                    addMonster(c: any, u: any, h: any, a: any, f: any, b: any, d: any, v: any): any;
                    addNPC(c: any, u: any, h: any, a: any, f: any, l: any, b: any): any;
                    addPathingIcon(c: any, u: any): void;
                    addPippet(c: any, u: any): any;
                    addPlayer(c: any): void;
                    addQuestNPC(c: any, u: any, h: any, a: any, f: any, l: any): any;
                    addUltimate(c: any, u: any, h: any): any;
                    addWizard(c: any, u: any, h: any, a: any): any;
                    arePopupsEnabled(): any;
                    bitmapCacheGameRender(c: any): void;
                    callFunctionOrSignal(c: any, u: any): void;
                    canAddUsersToScreen(): any;
                    clearAndResetRenderCache(): void;
                    create(): void;
                    createBackground(): void;
                    disableOverlay(c: any): void;
                    enableOverlay(c: any): void;
                    endFX(): void;
                    fadeIn(): void;
                    fadeOut(c: any, u: any): void;
                    fadeOutCachedGameRender(): void;
                    findTargetEvent(c: any): any;
                    generateNPCTrail(c: any): void;
                    generateTamingUI(c: any, u: any): void;
                    generateTrackingUI(): any;
                    generateUltimateTrail(c: any, u: any): void;
                    getInjectedValue(c: any): any;
                    getParentalConsentBanner(): any;
                    handlePlayerChatMessage(c: any): void;
                    handleSessionStatusChange(c: any, u: any): any;
                    hideChat(c: any): void;
                    hideOtherPlayer(c: any): any;
                    hideParentalConsentBanner(): void;
                    init(): void;
                    initListeners(): void;
                    initMap(c: any, u: any, h: any, a: any): void;
                    initScene(c: any, u: any): void;
                    listener(c: any, u: any): any;
                    movePlayer(c: any): void;
                    onAddChild(c: any, u: any, h: any): void;
                    onDoorClick(c: any, u: any): void;
                    onEnableBackground(c: any): void;
                    onEnableContent(c: any): void;
                    onGetLayer(c: any): any;
                    onMessage(c: any): void;
                    onPlayerFullInfo(c: any): void;
                    onPlayerJoined(c: any): void;
                    onPlayerLeft(c: any): void;
                    onPlayerList(c: any): any;
                    openFeed(c: any): void;
                    openHUD(): void;
                    paused(): void;
                    playerEffect(c: any): void;
                    preload(): void;
                    preprocess(): any;
                    process(c: any): void;
                    processAddCollect(c: any): void;
                    processPopups(c: any): any;
                    processUltimatesIndicators(): void;
                    removeFollow(c: any): void;
                    removePlayer(c: any): void;
                    resumed(): void;
                    screenSetup(): void;
                    screenUpdate(): void;
                    setFakePlayer(c: any): void;
                    setUpModalTransition(): void;
                    showCollisions(c: any): void;
                    showMessage(c: any, u: any): void;
                    showParentalConsentBanner(c: any): void;
                    shutdown(): any;
                    start(u: any, h: any): any;
                    startFX(): void;
                    stopListeners(): void;
                    transformPlayer(c: any): void;
                    triggerElementClick(c: any): void;
                    update(): void;
                    updatePlayer(c: any): void;
                    pendingCoordinates: Map<never, never>;
                    _background: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: {
                            _destroyed: boolean;
                            _isActive: boolean;
                            _isActiveInHierarchy: boolean;
                            active: boolean;
                            activeInHierarchy: boolean;
                            isDestroyed: boolean;
                            _name: string;
                            layer: string;
                            name: string;
                            _parent: null;
                            _transform: null;
                            parent: null;
                            transform: null;
                            activeInHierarchyChanged(): void;
                            addChild(c: any): void;
                            addChildAt(c: any, u: any): void;
                            addComponent(c: any, u: any): any;
                            bringToFront(): void;
                            destroy(): void;
                            destroyDeferred(): void;
                            dispatchComponentAddedInHierarchy(c: any, u: any): void;
                            findChildByName(c: any): any;
                            findComponent(c: any): any;
                            findComponentInChildren(c: any, u: any): any;
                            findComponentInParent(c: any, u: any): any;
                            findComponents(c: any): any;
                            findComponentsInChildren(c: any, u: any): any;
                            firstUpdate(): void;
                            getRenderOrder(): any;
                            hasComponent(c: any): any;
                            isActiveInHierarchy(): any;
                            isInBack(): any;
                            isInFront(): any;
                            removeComponent(c: any): void;
                            removeFromParent(): any;
                            sendToBack(): void;
                            setLayer(c: any, u: any): void;
                            setParent(c: any, u: any): any;
                            setRenderOrder(c: any): void;
                            update(): void;
                            updateFunction(): void;
                            _children: any /* too deep */;
                            _components: any /* too deep */;
                            _legacyTransform: any /* too deep */;
                            children: any /* too deep */;
                            components: any /* too deep */;
                            legacyTransform: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            onActiveInHierarchyChanged: any /* too deep */;
                            onChildAdded: any /* too deep */;
                            onChildRemoved: any /* too deep */;
                            onComponentAdded: any /* too deep */;
                            onComponentAddedToHierarchy: any /* too deep */;
                            onComponentRemoved: any /* too deep */;
                            onDestroy: any /* too deep */;
                            onHierarchyChanged: any /* too deep */;
                            onLayerChanged: any /* too deep */;
                        };
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _bgSprite: Player["_playerContainer"]["_game"]["_input"]["interactiveItems"]["first"]["sprite"];
                    _consentUiLayer: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_consentUiLayer"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_consentUiLayer"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_consentUiLayer"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_consentUiLayer"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_consentUiLayer"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _content: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_content"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_content"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_content"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_content"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_content"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _dialogue: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_dialogue"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_dialogue"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_dialogue"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_dialogue"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_dialogue"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _foreground: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_foreground"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_foreground"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_foreground"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_foreground"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_foreground"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _gameRenderCache: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_gameRenderCache"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_gameRenderCache"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_gameRenderCache"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_gameRenderCache"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_gameRenderCache"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _menuBarCreationPromise: {
                        _cancelled: boolean;
                        cancelled: boolean;
                        cancel(): void;
                        catch(c: any): any;
                        then(c: any, u: any): any;
                        _promise: Promise<any>;
                        promise: Promise<any>;
                    };
                    _menus: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_menus"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_menus"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_menus"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_menus"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_menus"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _modalFilters: any /* too deep */[];
                    _modalRenderTexture: {
                        noFrame: boolean;
                        valid: boolean;
                        _eventsCount: number;
                        _rotate: number;
                        _updateID: number;
                        height: number;
                        multisample: number;
                        resolution: number;
                        rotate: number;
                        width: number;
                        filterFrame: null;
                        filterPoolKey: null;
                        uvMatrix: null;
                        trim: undefined;
                        addListener(t: any, e: any, r: any): any;
                        castToBaseTexture(): any;
                        clone(): any;
                        destroy(t: any): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        eventNames(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        onBaseTextureUpdated(t: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        resize(t: any, e: any, r: any): void;
                        setResolution(t: any): void;
                        update(): void;
                        updateUvs(): void;
                        _events: {};
                        _frame: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _uvs: {
                            x0: number;
                            x1: number;
                            x2: number;
                            x3: number;
                            y0: number;
                            y1: number;
                            y2: number;
                            y3: number;
                            set(t: any, e: any, r: any): void;
                            uvsFloat32: Float32Array;
                        };
                        baseTexture: {
                            destroyed: boolean;
                            isPowerOfTwo: boolean;
                            valid: boolean;
                            _batchEnabled: number;
                            _batchLocation: number;
                            _eventsCount: number;
                            _mipmap: number;
                            _scaleMode: number;
                            _wrapMode: number;
                            alphaMode: number;
                            anisotropicLevel: number;
                            dirtyId: number;
                            dirtyStyleId: number;
                            format: number;
                            height: number;
                            mipmap: number;
                            realHeight: number;
                            realWidth: number;
                            resolution: number;
                            scaleMode: number;
                            target: number;
                            touched: number;
                            type: number;
                            uid: number;
                            width: number;
                            wrapMode: number;
                            cacheId: null;
                            parentTextureArray: null;
                            resource: null;
                            _refreshPOT(): void;
                            addListener(t: any, e: any, r: any): any;
                            castToBaseTexture(): any;
                            destroy(): void;
                            dispose(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            eventNames(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onError(t: any): void;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            resize(t: any, e: any): void;
                            setRealSize(t: any, e: any, r: any): any;
                            setResolution(t: any): any;
                            setResource(t: any): any;
                            setSize(t: any, e: any, r: any): any;
                            setStyle(t: any, e: any): any;
                            update(): void;
                            _events: any /* too deep */;
                            _glTextures: any /* too deep */;
                            clearColor: any /* too deep */;
                            filterStack: any /* too deep */;
                            framebuffer: any /* too deep */;
                            maskStack: any /* too deep */;
                            textureCacheIds: any /* too deep */;
                        };
                        defaultAnchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        frame: Player["_playerContainer"]["_game"]["_state"]["_current"]["_modalRenderTexture"]["_frame"];
                        framebuffer: {
                            depth: boolean;
                            stencil: boolean;
                            dirtyFormat: number;
                            dirtyId: number;
                            dirtySize: number;
                            height: number;
                            multisample: number;
                            width: number;
                            depthTexture: null;
                            addColorTexture(e: any, r: any): any;
                            addDepthTexture(e: any): any;
                            destroyDepthTexture(): void;
                            dispose(): void;
                            enableDepth(): any;
                            enableStencil(): any;
                            resize(t: any, e: any): void;
                            colorTexture: Player["_playerContainer"]["_game"]["_state"]["_current"]["_modalRenderTexture"]["baseTexture"];
                            colorTextures: any /* too deep */;
                            disposeRunner: any /* too deep */;
                            glFramebuffers: any /* too deep */;
                        };
                        orig: Player["_playerContainer"]["_game"]["_state"]["_current"]["_modalRenderTexture"]["_frame"];
                        textureCacheIds: never[];
                    };
                    _opaque: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_opaque"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_opaque"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_opaque"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_opaque"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_opaque"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _overlay: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_overlay"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_overlay"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_overlay"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_overlay"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_overlay"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _parentalConsentLoadPromise: {
                        _cancelled: boolean;
                        cancelled: boolean;
                        cancel(): void;
                        catch(c: any): any;
                        then(c: any, u: any): any;
                        _promise: Promise<any>;
                        promise: Promise<any>;
                    };
                    _root: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    _uiLayer: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _transform: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: never[];
                        _components: any /* too deep */[];
                        _legacyTransform: {
                            _isCreated: boolean;
                            Active: boolean;
                            isActive: boolean;
                            IsActiveInHierarchy: boolean;
                            isCreated: boolean;
                            roundRelativeValues: boolean;
                            RoundRelativeValues: boolean;
                            anchorX: number;
                            anchorY: number;
                            height: number;
                            relativeHeight: number;
                            relativeWidth: number;
                            relativeX: number;
                            relativeY: number;
                            roundedHeight: number;
                            roundedWidth: number;
                            roundedX: number;
                            roundedY: number;
                            scaleX: number;
                            scaleY: number;
                            width: number;
                            x: number;
                            y: number;
                            cachedRelativeHeight: null;
                            cachedRelativeWidth: null;
                            cachedRelativeX: null;
                            cachedRelativeY: null;
                            dimensionPlaceholder: null;
                            create(): void;
                            customDeserialize(u: any): void;
                            destroy(): void;
                            firstUpdate(): void;
                            getInjectedValue(c: any): any;
                            onDisable(): void;
                            onEnable(): void;
                            postCreate(): void;
                            postDeserialize(): void;
                            preDeserialize(c: any): void;
                            reapplyChildRelativeValues(): void;
                            update(): void;
                            updateFunction(): void;
                            updateGroupVisibility(): void;
                            updateParentGroup(): void;
                            updatePivotXFromAnchorX(): void;
                            updatePivotYFromAnchorY(): void;
                            _group: any /* too deep */;
                            anchor: any /* too deep */;
                            gameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_uiLayer"];
                            GameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_uiLayer"];
                            group: any /* too deep */;
                            onActiveChanged: any /* too deep */;
                            OnActiveChanged: any /* too deep */;
                            onDestroy: any /* too deep */;
                            OnDestroy: any /* too deep */;
                        };
                        _parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["_uiLayer"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["_uiLayer"]["_components"];
                        legacyTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["_uiLayer"]["_legacyTransform"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                    };
                    _ultimatesElements: never[];
                    _world: {
                        currentMap: string;
                        _(c: any, u: any, h: any, a: any, f: any): void;
                        enter(): void;
                        getCurrentCurrency(): any;
                        getCurrentMap(): any;
                        getCurrentMapTag(): any;
                        getCurrentZone(): any;
                        getState(c: any): any;
                        getTownState(c: any): any;
                        getWorldDate(): any;
                        getZone(c: any): any;
                        getZoneHub(c: any): any;
                        goToZoneHub(c: any): void;
                        inDeprecatedZone(): any;
                        inRestrictedSocialZone(u: any): any;
                        inZoneHub(): any;
                        isMathTowerEnabledForPlayer(c: any, u: any): any;
                        isValidLocation(c: any): any;
                        isZoneSinglePlayer(u: any): any;
                        playScene(c: any): void;
                        process(): void;
                        setCurrentMap(c: any): void;
                        setState(c: any, u: any): void;
                        setTownState(c: any, u: any): void;
                        _metricsManager: {
                            _supportsWasm: boolean;
                            crashedLastLogin: boolean;
                            _averageDownloadSpeed: number;
                            _networkRequestCount: number;
                            _totalAssetDownloadSize: number;
                            _totalAssetDownloadTime: number;
                            _totalAssetsDownloaded: number;
                            lastGameSessionStartTime: number;
                            timeInLoadingMS: number;
                            crashedLastTime: string;
                            timeToPlayMS: null;
                            assetDownloaded(c: any, u: any): void;
                            checkForCrash(): void;
                            createLoadingMetricEvent(c: any, h: any, l: any, d: any): any;
                            getCustomMetrics(): any;
                            getLastGameSessionStartTime(): any;
                            increaseNetworkRequestCount(): void;
                            objectCreated(c: any): void;
                            objectDestroyed(c: any): void;
                            sendLoadFunnelEvent(c: any, h: any, f: any, l: any, b: any): void;
                            sendOnboardingFunnelEvent(c: any): void;
                            setInBattle(c: any): void;
                            setLastGameSessionStartTime(c: any): void;
                            setLastMapLoadStarted(c: any): void;
                            deviceInfoProvider: any /* too deep */;
                            game: Player["_playerContainer"]["_game"];
                            gameCompleteDataFactory: any /* too deep */;
                            loadingMetricProperties: any /* too deep */;
                            objectCountProperties: any /* too deep */;
                        };
                        game: Player["_playerContainer"]["_game"];
                        pippetEncounterDaily: {
                            completeValue: number;
                            defaultValue: number;
                            questId: number;
                            stateName: string;
                            complete(): void;
                            getSpawn(): any;
                            hasDateIdChanged(): any;
                            init(): void;
                            isComplete(): any;
                            isInitialized(): any;
                            game: Player["_playerContainer"]["_game"];
                            player: any /* too deep */;
                        };
                        pippetEncounterSpawn: {
                            dialogue: number;
                            location: string;
                        };
                        zones: {
                            academy: any /* too deep */;
                            archives: any /* too deep */;
                            astraltower: any /* too deep */;
                            bonfire_spire: any /* too deep */;
                            crystal_caverns: any /* too deep */;
                            darktower: any /* too deep */;
                            dyno: any /* too deep */;
                            earthtower: any /* too deep */;
                            elemental_guardian: any /* too deep */;
                            firetower: any /* too deep */;
                            forest: any /* too deep */;
                            house: any /* too deep */;
                            icetower: any /* too deep */;
                            lamplight: any /* too deep */;
                            shipwreck_shore: any /* too deep */;
                            shiverchill: any /* too deep */;
                            skywatch: any /* too deep */;
                            stormtower: any /* too deep */;
                            tower_town: any /* too deep */;
                            toyzone: any /* too deep */;
                            watertower: any /* too deep */;
                        };
                    };
                    above: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        _isModalWithTransparency: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isModalWithTransparency: boolean;
                        isSprite: boolean;
                        pendingDestroy: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        bottom: number;
                        cacheAsBitmapMultisample: number;
                        centerX: number;
                        centerY: number;
                        height: number;
                        left: number;
                        length: number;
                        offsetX: number;
                        offsetY: number;
                        renderId: number;
                        right: number;
                        rotation: number;
                        tabIndex: number;
                        top: number;
                        width: number;
                        worldAlpha: number;
                        worldRotation: number;
                        x: number;
                        y: number;
                        z: number;
                        zIndex: number;
                        _sortProperty: string;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        add(c: any, u: any): any;
                        addAt(c: any, u: any): any;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        bringChildToTop(c: any): void;
                        calculateBounds(): void;
                        callAll(c: any, u: any): void;
                        callbackFromArray(c: any, u: any): any;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getAt(c: any): any;
                        getBounds(t: any, e: any): any;
                        getByName(c: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getIndex(c: any): any;
                        getInjectedValue(c: any): any;
                        getLocalBounds(e: any, r: any): any;
                        hasTooltip(): any;
                        highlight(c: any, u: any, h: any, a: any): void;
                        isHighlighted(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        moveDown(c: any): any;
                        moveUp(c: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        remove(c: any, u: any): any;
                        removeAll(c: any): void;
                        removeAllListeners(t: any): any;
                        removeBetween(c: any, u: any, h: any, a: any): void;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        sendChildToBack(c: any): void;
                        setChildIndex(t: any, e: any): void;
                        setElementAsModal(c: any): void;
                        setParent(t: any): any;
                        setRenderState(c: any, u: any): void;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        showTooltip(c: any, u: any): void;
                        sortChildren(): void;
                        swap(c: any, u: any): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        updateZ(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _game: Player["_playerContainer"]["_game"];
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        anchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        bounds: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        children: any /* too deep */[];
                        events: {
                            destroy(): void;
                            onAddedToGroup: any /* too deep */;
                            onAnimationComplete: any /* too deep */;
                            onAnimationLoop: any /* too deep */;
                            onAnimationStart: any /* too deep */;
                            onDestroy: any /* too deep */;
                            onDragStart: any /* too deep */;
                            onDragStop: any /* too deep */;
                            onDragUpdate: any /* too deep */;
                            onEnterBounds: any /* too deep */;
                            onInputDown: any /* too deep */;
                            onInputOut: any /* too deep */;
                            onInputOver: any /* too deep */;
                            onInputUp: any /* too deep */;
                            onOutOfBounds: any /* too deep */;
                            onRemovedFromGroup: any /* too deep */;
                            onRemovedFromWorld: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"];
                        };
                        game: Player["_playerContainer"]["_game"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            height: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            width: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            name: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _enabledFilters: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            containsPoint: undefined;
                            renderCanvas: undefined;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            calculateBounds(): void;
                            containerUpdateTransform(): void;
                            destroy(u: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(e: any, r: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            setChildIndex(t: any, e: any): void;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _cacheData: any /* too deep */;
                            _events: any /* too deep */;
                            _localBounds: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            children: any /* too deep */;
                            gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_foreground"];
                            localTransform: any /* too deep */;
                            onDestroy: any /* too deep */;
                            parent: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        world: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldGamePosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldPosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldScale: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["scale"];
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    aboveGameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_foreground"];
                    add: Player["_playerContainer"]["_game"]["_add"];
                    area: any /* too deep */[];
                    assets: string[];
                    background: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        containsPoint: undefined;
                        renderCanvas: undefined;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _cacheData: {
                            originalFilterArea: null;
                            originalMask: null;
                            sprite: null;
                            textureCacheId: null;
                            originalContainsPoint: undefined;
                            originalRenderCanvas: undefined;
                            originalCalculateBounds(): void;
                            originalDestroy(u: any): void;
                            originalGetLocalBounds(e: any, r: any): any;
                            originalRender(t: any): void;
                            originalUpdateTransform(): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: (any /* too deep */ | Player["_playerContainer"]["_game"]["_input"]["interactiveItems"]["first"]["sprite"])[];
                        gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            height: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            width: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            name: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            calculateBounds(): void;
                            containerUpdateTransform(): void;
                            destroy(u: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(e: any, r: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            setChildIndex(t: any, e: any): void;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _localBounds: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            children: any /* too deep */;
                            gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"]["_parent"];
                            localTransform: any /* too deep */;
                            onDestroy: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    backgroundGameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"];
                    below: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        _isModalWithTransparency: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isModalWithTransparency: boolean;
                        isSprite: boolean;
                        pendingDestroy: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        bottom: number;
                        cacheAsBitmapMultisample: number;
                        centerX: number;
                        centerY: number;
                        height: number;
                        left: number;
                        length: number;
                        offsetX: number;
                        offsetY: number;
                        renderId: number;
                        right: number;
                        rotation: number;
                        tabIndex: number;
                        top: number;
                        width: number;
                        worldAlpha: number;
                        worldRotation: number;
                        x: number;
                        y: number;
                        z: number;
                        zIndex: number;
                        _sortProperty: string;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        add(c: any, u: any): any;
                        addAt(c: any, u: any): any;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        bringChildToTop(c: any): void;
                        calculateBounds(): void;
                        callAll(c: any, u: any): void;
                        callbackFromArray(c: any, u: any): any;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getAt(c: any): any;
                        getBounds(t: any, e: any): any;
                        getByName(c: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getIndex(c: any): any;
                        getInjectedValue(c: any): any;
                        getLocalBounds(e: any, r: any): any;
                        hasTooltip(): any;
                        highlight(c: any, u: any, h: any, a: any): void;
                        isHighlighted(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        moveDown(c: any): any;
                        moveUp(c: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        remove(c: any, u: any): any;
                        removeAll(c: any): void;
                        removeAllListeners(t: any): any;
                        removeBetween(c: any, u: any, h: any, a: any): void;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        sendChildToBack(c: any): void;
                        setChildIndex(t: any, e: any): void;
                        setElementAsModal(c: any): void;
                        setParent(t: any): any;
                        setRenderState(c: any, u: any): void;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        showTooltip(c: any, u: any): void;
                        sortChildren(): void;
                        swap(c: any, u: any): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        updateZ(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _game: Player["_playerContainer"]["_game"];
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        anchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        bounds: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        children: any /* too deep */[];
                        events: {
                            destroy(): void;
                            onAddedToGroup: any /* too deep */;
                            onAnimationComplete: any /* too deep */;
                            onAnimationLoop: any /* too deep */;
                            onAnimationStart: any /* too deep */;
                            onDestroy: any /* too deep */;
                            onDragStart: any /* too deep */;
                            onDragStop: any /* too deep */;
                            onDragUpdate: any /* too deep */;
                            onEnterBounds: any /* too deep */;
                            onInputDown: any /* too deep */;
                            onInputOut: any /* too deep */;
                            onInputOver: any /* too deep */;
                            onInputUp: any /* too deep */;
                            onOutOfBounds: any /* too deep */;
                            onRemovedFromGroup: any /* too deep */;
                            onRemovedFromWorld: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"];
                        };
                        game: Player["_playerContainer"]["_game"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        world: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldGamePosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldPosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldScale: Player["_playerContainer"]["_game"]["_state"]["_current"]["below"]["scale"];
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    belowGameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_background"];
                    clickAreas: never[];
                    content: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        containsPoint: undefined;
                        renderCanvas: undefined;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _cacheData: {
                            originalFilterArea: null;
                            originalMask: null;
                            sprite: null;
                            textureCacheId: null;
                            originalContainsPoint: undefined;
                            originalRenderCanvas: undefined;
                            originalCalculateBounds(): void;
                            originalDestroy(u: any): void;
                            originalGetLocalBounds(e: any, r: any): any;
                            originalRender(t: any): void;
                            originalUpdateTransform(): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: (any /* too deep */ | Player["_playerContainer"])[];
                        gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_content"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["parent"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    contentGameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_content"];
                    data: {
                        isQuestHub: boolean;
                        isScene: boolean;
                        x: number;
                        y: number;
                        battleBG: string;
                        file: string;
                        name: string;
                        nameKey: string;
                        onFaint: string;
                        tag: string;
                        zoneName: string;
                        tempCollisionData: null;
                        onLoad: undefined;
                        addAreaEvent(c: any, u: any, h: any, a: any, l: any, d: any, v: any, O: any, j: any, p: any): any;
                        addBounty(c: any, h: any, a: any, l: any, b: any, d: any, v: any, O: any): any;
                        addChest(c: any, u: any, h: any, a: any, l: any, b: any, d: any, v: any): any;
                        addCollisionZone(c: any, u: any, h: any, a: any, f: any): void;
                        addConstructedNPC(c: any, u: any, h: any, a: any, l: any, b: any, d: any, v: any): any;
                        addGuideHand(c: any, u: any, h: any, a: any, l: any, d: any, O: any, j: any, p: any): any;
                        addMonster(c: any, h: any, a: any, l: any, d: any, p: any, m: any, y: any, _: any, w: any): any;
                        addObjectToScreen(c: any, u: any): void;
                        addPippet(c: any, u: any, h: any, a: any, l: any): void;
                        addSpriteToLayer(c: any, u: any, h: any): void;
                        addWizard(c: any, u: any, h: any, a: any, l: any, b: any, d: any): any;
                        canRegularMonsterSpawn(): any;
                        cleanup(): void;
                        cleanupMap(): void;
                        enableLayerID(c: any, u: any): any;
                        getInjectedValue(c: any): any;
                        getLocation(): any;
                        getName(): any;
                        getTag(): any;
                        getTile(c: any, u: any, h: any, a: any, l: any, b: any, d: any, v: any): any;
                        getTileProperties(c: any, u: any, h: any): any;
                        getTileset(c: any, u: any): any;
                        init(u: any, h: any, a: any, f: any): any;
                        initImage(c: any, u: any): void;
                        initLayer(c: any, u: any, h: any, a: any, l: any): any;
                        initObjectLayer(c: any, u: any, h: any, a: any, l: any): any;
                        initPrefab(c: any): void;
                        initSpineObject(c: any): void;
                        initTiledLayer(c: any, u: any, h: any, a: any, l: any): any;
                        legacyAddObjectToScreen(c: any, u: any): any;
                        loadPrefab(c: any): any;
                        onLoadInit(): void;
                        onMonsterSpawns(c: any, u: any): void;
                        onScoogClicked(): void;
                        playPortalEffectEnter(c: any, u: any, h: any, a: any): void;
                        playPortalEffectExit(c: any, u: any, h: any, a: any, f: any): void;
                        process(c: any, u: any, h: any): void;
                        processAnimations(c: any, u: any): void;
                        processDynamicLayers(c: any, u: any): any;
                        processTileAnimations(c: any, u: any, h: any, a: any): any;
                        processTileAnimUpdate(c: any, u: any): void;
                        sendDialogueSegmentEvents(c: any, u: any): void;
                        setup(u: any, h: any): void;
                        showAllBounties(c: any, u: any): void;
                        start(c: any, u: any, h: any): void;
                        toDynoDig(): void;
                        toggleDynamicLayer(c: any, u: any, h: any, a: any): void;
                        toMuseum(c: any): void;
                        update(c: any): void;
                        validPathTo(c: any, u: any, h: any, a: any): void;
                        above: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            _isModalWithTransparency: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isModalWithTransparency: boolean;
                            isSprite: boolean;
                            pendingDestroy: boolean;
                            renderable: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            cacheAsBitmapMultisample: number;
                            length: number;
                            renderId: number;
                            tabIndex: number;
                            worldAlpha: number;
                            z: number;
                            zIndex: number;
                            _sortProperty: string;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            name: string;
                            _accessibleDiv: null;
                            _bounds: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _game: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            arrow: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            game: null;
                            hitArea: null;
                            mask: null;
                            metricsManager: null;
                            onDestroy: null;
                            parent: null;
                            tooltip: null;
                            transform: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            add(c: any, u: any): any;
                            addAt(c: any, u: any): any;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            bringChildToTop(c: any): void;
                            calculateBounds(): void;
                            callAll(c: any, u: any): void;
                            callbackFromArray(c: any, u: any): any;
                            containerUpdateTransform(): void;
                            destroy(u: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getAt(c: any): any;
                            getBounds(t: any, e: any): any;
                            getByName(c: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getIndex(c: any): any;
                            getInjectedValue(c: any): any;
                            getLocalBounds(e: any, r: any): any;
                            hasTooltip(): any;
                            highlight(c: any, u: any, h: any, a: any): void;
                            isHighlighted(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            moveDown(c: any): any;
                            moveUp(c: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            remove(c: any, u: any): any;
                            removeAll(c: any): void;
                            removeAllListeners(t: any): any;
                            removeBetween(c: any, u: any, h: any, a: any): void;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            sendChildToBack(c: any): void;
                            setChildIndex(t: any, e: any): void;
                            setElementAsModal(c: any): void;
                            setParent(t: any): any;
                            setRenderState(c: any, u: any): void;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            showTooltip(c: any, u: any): void;
                            sortChildren(): void;
                            swap(c: any, u: any): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateTransform(): void;
                            updateZ(): void;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            anchor: any /* too deep */;
                            children: any /* too deep */;
                            events: any /* too deep */;
                            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                        };
                        animatedSprites: never[];
                        assets: string[];
                        below: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            _isModalWithTransparency: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isModalWithTransparency: boolean;
                            isSprite: boolean;
                            pendingDestroy: boolean;
                            renderable: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            cacheAsBitmapMultisample: number;
                            length: number;
                            renderId: number;
                            tabIndex: number;
                            worldAlpha: number;
                            z: number;
                            zIndex: number;
                            _sortProperty: string;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            name: string;
                            _accessibleDiv: null;
                            _bounds: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _game: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            arrow: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            game: null;
                            hitArea: null;
                            mask: null;
                            metricsManager: null;
                            onDestroy: null;
                            parent: null;
                            tooltip: null;
                            transform: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            add(c: any, u: any): any;
                            addAt(c: any, u: any): any;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            bringChildToTop(c: any): void;
                            calculateBounds(): void;
                            callAll(c: any, u: any): void;
                            callbackFromArray(c: any, u: any): any;
                            containerUpdateTransform(): void;
                            destroy(u: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getAt(c: any): any;
                            getBounds(t: any, e: any): any;
                            getByName(c: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getIndex(c: any): any;
                            getInjectedValue(c: any): any;
                            getLocalBounds(e: any, r: any): any;
                            hasTooltip(): any;
                            highlight(c: any, u: any, h: any, a: any): void;
                            isHighlighted(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            moveDown(c: any): any;
                            moveUp(c: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            remove(c: any, u: any): any;
                            removeAll(c: any): void;
                            removeAllListeners(t: any): any;
                            removeBetween(c: any, u: any, h: any, a: any): void;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            sendChildToBack(c: any): void;
                            setChildIndex(t: any, e: any): void;
                            setElementAsModal(c: any): void;
                            setParent(t: any): any;
                            setRenderState(c: any, u: any): void;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            showTooltip(c: any, u: any): void;
                            sortChildren(): void;
                            swap(c: any, u: any): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateTransform(): void;
                            updateZ(): void;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            anchor: any /* too deep */;
                            children: any /* too deep */;
                            events: any /* too deep */;
                            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                        };
                        container: Player["_playerContainer"]["_game"]["_rootContainer"];
                        contentLayerContainers: {};
                        disabledLayerIDs: never[];
                        disabledLayers: string[];
                        dynamicLayerContainers: {};
                        dynamicSprites: never[];
                        game: Player["_playerContainer"]["_game"];
                        locations: never[];
                        mapMonsters: never[];
                        questParams: {};
                        screen: Player["_playerContainer"]["_game"]["_state"]["_current"];
                        technicalMetricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                        zone: {
                            autoOpenQuestGoals: boolean;
                            debugBounties: boolean;
                            disableQuestGoals: boolean;
                            _timeWhenZoneLoaded: number;
                            bgmID: number;
                            timeWhenZoneLoaded: number;
                            battleBG: string;
                            ID: string;
                            name: string;
                            onFaint: string;
                            questHub: string;
                            _questGoalsObject: null;
                            Guardian: undefined;
                            cacheZoneAssets(u: any): void;
                            cleanup(): void;
                            completeQuest(c: any): any;
                            completeSequence(c: any, u: any): void;
                            createLoadingData(): void;
                            createQuestGoals(): void;
                            defeatMonster(c: any, u: any, h: any, a: any): void;
                            getBattle(c: any, u: any, h: any, a: any, l: any): any;
                            getBattleMods(): any;
                            getCurrentQuest(): any;
                            getCurrentQuestID(): any;
                            getDailyMaps(): any;
                            getDailyQuestDescription(c: any): any;
                            getMap(c: any): any;
                            getQuest(c: any): any;
                            getQuestState(): any;
                            getRemainingQuestAreas(c: any): any;
                            getRemainingQuestObjectives(): any;
                            getScene(c: any): any;
                            getState(c: any): any;
                            handleLeaving(u: any, h: any): void;
                            hasDaily(c: any): any;
                            hasDailyQuestExpired(): any;
                            hideFollow(c: any): void;
                            init(c: any, u: any, h: any): void;
                            initScene(c: any, u: any): void;
                            inRespawnExperiment(): any;
                            isDailyQuestComplete(): any;
                            isOnQuest(c: any): any;
                            isOnSequence(c: any, u: any): any;
                            isQuestComplete(c: any): any;
                            isQuestGoalsActive(): any;
                            isQuestProcessed(c: any): any;
                            isQuestStarted(c: any): any;
                            isSequenceComplete(c: any, u: any): any;
                            placeDaily(c: any, u: any, h: any): void;
                            playScene(c: any): void;
                            process(c: any, u: any, h: any): void;
                            processQuest(c: any): void;
                            setQuestGoalsModuleVisibility(c: any): any;
                            setState(c: any, u: any): any;
                            setup(c: any, u: any, h: any): any;
                            showQuestGoals(): void;
                            start(c: any, u: any, h: any): void;
                            startNewDailyQuest(c: any, u: any): void;
                            startQuest(c: any): any;
                            teleport(u: any, h: any, l: any, d: any, O: any): void;
                            teleportLoad(): void;
                            teleportPrefabScene(c: any, u: any, h: any, l: any): void;
                            testQuest(c: any, u: any, h: any): void;
                            update(c: any, u: any, h: any): void;
                            updateDailyQuest(c: any): void;
                            updateQuestGoalsWidget(): void;
                            _teleportData: any /* too deep */;
                            game: Player["_playerContainer"]["_game"];
                            loadingData: any /* too deep */;
                            maps: any /* too deep */;
                            monsters: any /* too deep */;
                            quests: any /* too deep */;
                            scenes: any /* too deep */;
                            states: any /* too deep */;
                            store: any /* too deep */;
                        };
                    };
                    dialogue: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: any /* too deep */[];
                        gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_dialogue"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["parent"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["dialogue"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["dialogue"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["dialogue"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["dialogue"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["dialogue"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["dialogue"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["dialogue"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    events: any /* too deep */[];
                    floor: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        _isModalWithTransparency: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isModalWithTransparency: boolean;
                        isSprite: boolean;
                        pendingDestroy: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        bottom: number;
                        cacheAsBitmapMultisample: number;
                        centerX: number;
                        centerY: number;
                        height: number;
                        left: number;
                        length: number;
                        offsetX: number;
                        offsetY: number;
                        renderId: number;
                        right: number;
                        rotation: number;
                        tabIndex: number;
                        top: number;
                        width: number;
                        worldAlpha: number;
                        worldRotation: number;
                        x: number;
                        y: number;
                        z: number;
                        zIndex: number;
                        _sortProperty: string;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        add(c: any, u: any): any;
                        addAt(c: any, u: any): any;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        bringChildToTop(c: any): void;
                        calculateBounds(): void;
                        callAll(c: any, u: any): void;
                        callbackFromArray(c: any, u: any): any;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getAt(c: any): any;
                        getBounds(t: any, e: any): any;
                        getByName(c: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getIndex(c: any): any;
                        getInjectedValue(c: any): any;
                        getLocalBounds(e: any, r: any): any;
                        hasTooltip(): any;
                        highlight(c: any, u: any, h: any, a: any): void;
                        isHighlighted(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        moveDown(c: any): any;
                        moveUp(c: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        remove(c: any, u: any): any;
                        removeAll(c: any): void;
                        removeAllListeners(t: any): any;
                        removeBetween(c: any, u: any, h: any, a: any): void;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        sendChildToBack(c: any): void;
                        setChildIndex(t: any, e: any): void;
                        setElementAsModal(c: any): void;
                        setParent(t: any): any;
                        setRenderState(c: any, u: any): void;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        showTooltip(c: any, u: any): void;
                        sortChildren(): void;
                        swap(c: any, u: any): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        updateZ(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _game: Player["_playerContainer"]["_game"];
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        anchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        bounds: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        children: never[];
                        events: {
                            destroy(): void;
                            onAddedToGroup: any /* too deep */;
                            onAnimationComplete: any /* too deep */;
                            onAnimationLoop: any /* too deep */;
                            onAnimationStart: any /* too deep */;
                            onDestroy: any /* too deep */;
                            onDragStart: any /* too deep */;
                            onDragStop: any /* too deep */;
                            onDragUpdate: any /* too deep */;
                            onEnterBounds: any /* too deep */;
                            onInputDown: any /* too deep */;
                            onInputOut: any /* too deep */;
                            onInputOver: any /* too deep */;
                            onInputUp: any /* too deep */;
                            onOutOfBounds: any /* too deep */;
                            onRemovedFromGroup: any /* too deep */;
                            onRemovedFromWorld: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"];
                        };
                        game: Player["_playerContainer"]["_game"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        world: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldGamePosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldPosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldScale: Player["_playerContainer"]["_game"]["_state"]["_current"]["floor"]["scale"];
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    foreground: Player["_playerContainer"]["_game"]["_state"]["_current"]["above"]["parent"];
                    foregroundGameObject: Player["_playerContainer"]["_game"]["_state"]["_current"]["_foreground"];
                    game: Player["_playerContainer"]["_game"];
                    gameRenderCache: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _boundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _enabledFilters: any /* too deep */[];
                        _events: {};
                        _gsap: {
                            id: number;
                            harness: undefined;
                            get(c: any, u: any): any;
                            set(c: any, u: any): any;
                            target: Player["_playerContainer"]["_game"]["_state"]["_current"]["gameRenderCache"];
                        };
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: never[];
                        gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_gameRenderCache"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["parent"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["gameRenderCache"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["gameRenderCache"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["gameRenderCache"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["gameRenderCache"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["gameRenderCache"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["gameRenderCache"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["gameRenderCache"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    input: Player["_playerContainer"]["_game"]["_input"];
                    menuBar: {
                        _destroyed: boolean;
                        _isActive: boolean;
                        _isActiveInHierarchy: boolean;
                        active: boolean;
                        activeInHierarchy: boolean;
                        isDestroyed: boolean;
                        _name: string;
                        layer: string;
                        name: string;
                        _legacyTransform: null;
                        _parent: null;
                        _transform: null;
                        legacyTransform: null;
                        parent: null;
                        transform: null;
                        activeInHierarchyChanged(): void;
                        addChild(c: any): void;
                        addChildAt(c: any, u: any): void;
                        addComponent(c: any, u: any): any;
                        bringToFront(): void;
                        destroy(): void;
                        destroyDeferred(): void;
                        dispatchComponentAddedInHierarchy(c: any, u: any): void;
                        findChildByName(c: any): any;
                        findComponent(c: any): any;
                        findComponentInChildren(c: any, u: any): any;
                        findComponentInParent(c: any, u: any): any;
                        findComponents(c: any): any;
                        findComponentsInChildren(c: any, u: any): any;
                        firstUpdate(): void;
                        getRenderOrder(): any;
                        hasComponent(c: any): any;
                        isActiveInHierarchy(): any;
                        isInBack(): any;
                        isInFront(): any;
                        removeComponent(c: any): void;
                        removeFromParent(): any;
                        sendToBack(): void;
                        setLayer(c: any, u: any): void;
                        setParent(c: any, u: any): any;
                        setRenderOrder(c: any): void;
                        update(): void;
                        updateFunction(): void;
                        _children: any /* too deep */[];
                        _components: any /* too deep */[];
                        children: Player["_playerContainer"]["_game"]["_state"]["_current"]["menuBar"]["_children"];
                        components: Player["_playerContainer"]["_game"]["_state"]["_current"]["menuBar"]["_components"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onActiveInHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onChildRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAdded: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentAddedToHierarchy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onComponentRemoved: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onHierarchyChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onLayerChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                    };
                    menus: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: any /* too deep */[];
                        gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_menus"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["parent"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["menus"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["menus"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["menus"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["menus"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["menus"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["menus"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["menus"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                    opaque: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _gsap: {
                            id: number;
                            harness: undefined;
                            get(c: any, u: any): any;
                            set(c: any, u: any): any;
                            target: Player["_playerContainer"]["_game"]["_state"]["_current"]["opaque"];
                        };
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: any /* too deep */[];
                        gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_opaque"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["parent"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["opaque"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["opaque"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["opaque"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["opaque"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["opaque"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["opaque"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["opaque"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    overlay: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: any /* too deep */[];
                        gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_overlay"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["parent"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["overlay"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["overlay"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["overlay"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["overlay"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["overlay"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["overlay"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["overlay"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    path: {
                        lowPriorityPathfinderInUse: boolean;
                        size: number;
                        addCallback(c: any, u: any, h: any): void;
                        findNodeBetween(c: any, u: any): any;
                        findPath(c: any, u: any, h: any, a: any, b: any, d: any): void;
                        getCallback(c: any, u: any, h: any): any;
                        getNodeValue(c: any, u: any): any;
                        init(c: any, u: any): void;
                        isNodeOpen(c: any, u: any): any;
                        isPathBlocked(c: any, u: any, h: any, a: any): any;
                        processPath(c: any, u: any, h: any, a: any, l: any, b: any, d: any): void;
                        reset(): void;
                        tileToXY(c: any, u: any): any;
                        xyToTile(c: any, u: any): any;
                        area: Player["_playerContainer"]["_game"]["_state"]["_current"]["area"];
                        callbacks: never[];
                    };
                    pendingPlayers: never[];
                    playerList: {};
                    playersInfo: {};
                    prodigyGame: Player["_playerContainer"]["_game"];
                    questProgress: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        _isModalWithTransparency: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isModalWithTransparency: boolean;
                        isSprite: boolean;
                        pendingDestroy: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        bottom: number;
                        cacheAsBitmapMultisample: number;
                        centerX: number;
                        centerY: number;
                        height: number;
                        left: number;
                        length: number;
                        offsetX: number;
                        offsetY: number;
                        renderId: number;
                        right: number;
                        rotation: number;
                        tabIndex: number;
                        top: number;
                        width: number;
                        worldAlpha: number;
                        worldRotation: number;
                        x: number;
                        y: number;
                        z: number;
                        zIndex: number;
                        _sortProperty: string;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        text: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        add(c: any, u: any): any;
                        addAt(c: any, u: any): any;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        bringChildToTop(c: any): void;
                        calculateBounds(): void;
                        callAll(c: any, u: any): void;
                        callbackFromArray(c: any, u: any): any;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getAt(c: any): any;
                        getBounds(t: any, e: any): any;
                        getByName(c: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getIndex(c: any): any;
                        getInjectedValue(c: any): any;
                        getLocalBounds(e: any, r: any): any;
                        hasTooltip(): any;
                        highlight(c: any, u: any, h: any, a: any): void;
                        isHighlighted(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        moveDown(c: any): any;
                        moveUp(c: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        process(c: any, u: any): any;
                        remove(c: any, u: any): any;
                        removeAll(c: any): void;
                        removeAllListeners(t: any): any;
                        removeBetween(c: any, u: any, h: any, a: any): void;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        sendChildToBack(c: any): void;
                        setChildIndex(t: any, e: any): void;
                        setElementAsModal(c: any): void;
                        setParent(t: any): any;
                        setRenderState(c: any, u: any): void;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        showTooltip(c: any, u: any): void;
                        sortChildren(): void;
                        swap(c: any, u: any): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        updateZ(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _game: Player["_playerContainer"]["_game"];
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        anchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        arrow: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            _roundPixels: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            inputEnabled: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isLoaded: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            pendingDestroy: boolean;
                            renderable: boolean;
                            roundPixels: boolean;
                            smoothed: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _cachedTint: number;
                            _eventsCount: number;
                            _height: number;
                            _lastSortedIndex: number;
                            _textureID: number;
                            _textureTrimmedID: number;
                            _tint: number;
                            _tintRGB: number;
                            _transformID: number;
                            _transformTrimmedID: number;
                            _width: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            blendMode: number;
                            bottom: number;
                            cacheAsBitmapMultisample: number;
                            centerX: number;
                            centerY: number;
                            height: number;
                            left: number;
                            renderId: number;
                            right: number;
                            rotation: number;
                            tabIndex: number;
                            tint: number;
                            top: number;
                            width: number;
                            worldAlpha: number;
                            worldRotation: number;
                            x: number;
                            y: number;
                            z: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            frameName: string;
                            key: string;
                            pluginName: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            loadingTween: null;
                            mask: null;
                            name: null;
                            scaleMax: null;
                            scaleMin: null;
                            transformCallbackContext: null;
                            uvs: null;
                            vertexTrimmedData: null;
                            forcedHeight: undefined;
                            forcedWidth: undefined;
                            frame: undefined;
                            onTextureLoaded: undefined;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _onAnchorUpdate(): void;
                            _onTextureUpdate(): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            bringChildToTop(c: any): void;
                            calculateBounds(): void;
                            calculateTrimmedVertices(): any;
                            calculateVertices(): void;
                            checkCallback(): void;
                            checkSpriteDimension(): void;
                            containerUpdateTransform(): void;
                            containsPoint(t: any): any;
                            destroy(): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            getOffsetX(): any;
                            getOffsetY(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            loadNewTexture(c: any, u: any, h: any, a: any): void;
                            loadTexture(c: any, u: any): void;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            rotateMiddleBased(c: any): void;
                            sendChildToBack(c: any): void;
                            setActive(c: any): void;
                            setChildIndex(t: any, e: any): void;
                            setFrame(c: any): void;
                            setParent(t: any): any;
                            setTexture(c: any, u: any): void;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateFrame(u: any): void;
                            updateTexture(c: any): void;
                            updateTransform(): void;
                            indices: Uint16Array;
                            vertexData: Float32Array;
                            _anchor: any /* too deep */;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _texture: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            anchor: any /* too deep */;
                            animations: any /* too deep */;
                            bounds: any /* too deep */;
                            cameraOffset: any /* too deep */;
                            children: any /* too deep */;
                            events: any /* too deep */;
                            game: Player["_playerContainer"]["_game"];
                            localTransform: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"];
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            previousPosition: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            tempDisplayObjectParent: any /* too deep */;
                            texture: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            transformCallback: any /* too deep */;
                            world: any /* too deep */;
                            worldPosition: any /* too deep */;
                            worldScale: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        banner: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            _isModalWithTransparency: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isModalWithTransparency: boolean;
                            isSprite: boolean;
                            pendingDestroy: boolean;
                            renderable: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            bottom: number;
                            cacheAsBitmapMultisample: number;
                            centerX: number;
                            centerY: number;
                            height: number;
                            left: number;
                            length: number;
                            offsetX: number;
                            offsetY: number;
                            renderId: number;
                            right: number;
                            rotation: number;
                            tabIndex: number;
                            top: number;
                            totalHeight: number;
                            totalWidth: number;
                            width: number;
                            worldAlpha: number;
                            worldRotation: number;
                            x: number;
                            y: number;
                            z: number;
                            zIndex: number;
                            _sortProperty: string;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            name: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            onDown: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            add(c: any, u: any): any;
                            addAt(c: any, u: any): any;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            bringChildToTop(c: any): void;
                            calculateBounds(): void;
                            callAll(c: any, u: any): void;
                            callbackFromArray(c: any, u: any): any;
                            changePanel(c: any): void;
                            containerUpdateTransform(): void;
                            destroy(u: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getAt(c: any): any;
                            getBounds(t: any, e: any): any;
                            getByName(c: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getIndex(c: any): any;
                            getInjectedValue(c: any): any;
                            getLocalBounds(e: any, r: any): any;
                            hasTooltip(): any;
                            highlight(c: any, u: any, h: any, a: any): void;
                            isHighlighted(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            moveDown(c: any): any;
                            moveUp(c: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            remove(c: any, u: any): any;
                            removeAll(c: any): void;
                            removeAllListeners(t: any): any;
                            removeBetween(c: any, u: any, h: any, a: any): void;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            sendChildToBack(c: any): void;
                            setChildIndex(t: any, e: any): void;
                            setClickable(c: any, u: any, h: any, a: any): void;
                            setElementAsModal(c: any): void;
                            setParent(t: any): any;
                            setRenderState(c: any, u: any): void;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            showTooltip(c: any, u: any): void;
                            sortChildren(): void;
                            swap(c: any, u: any): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateTransform(): void;
                            updateZ(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _game: Player["_playerContainer"]["_game"];
                            _localBounds: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            anchor: any /* too deep */;
                            bounds: any /* too deep */;
                            children: any /* too deep */;
                            events: any /* too deep */;
                            game: Player["_playerContainer"]["_game"];
                            images: any /* too deep */;
                            localTransform: any /* too deep */;
                            metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                            onDestroy: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"];
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            world: any /* too deep */;
                            worldGamePosition: any /* too deep */;
                            worldPosition: any /* too deep */;
                            worldScale: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        bounds: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        children: (Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["banner"] | any /* too deep */ | Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["arrow"])[];
                        events: {
                            destroy(): void;
                            onAddedToGroup: any /* too deep */;
                            onAnimationComplete: any /* too deep */;
                            onAnimationLoop: any /* too deep */;
                            onAnimationStart: any /* too deep */;
                            onDestroy: any /* too deep */;
                            onDragStart: any /* too deep */;
                            onDragStop: any /* too deep */;
                            onDragUpdate: any /* too deep */;
                            onEnterBounds: any /* too deep */;
                            onInputDown: any /* too deep */;
                            onInputOut: any /* too deep */;
                            onInputOver: any /* too deep */;
                            onInputUp: any /* too deep */;
                            onOutOfBounds: any /* too deep */;
                            onRemovedFromGroup: any /* too deep */;
                            onRemovedFromWorld: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"];
                        };
                        game: Player["_playerContainer"]["_game"];
                        icon: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            _roundPixels: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            inputEnabled: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isLoaded: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            pendingDestroy: boolean;
                            renderable: boolean;
                            roundPixels: boolean;
                            smoothed: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _cachedTint: number;
                            _eventsCount: number;
                            _height: number;
                            _lastSortedIndex: number;
                            _textureID: number;
                            _textureTrimmedID: number;
                            _tint: number;
                            _tintRGB: number;
                            _transformID: number;
                            _transformTrimmedID: number;
                            _width: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            blendMode: number;
                            bottom: number;
                            cacheAsBitmapMultisample: number;
                            centerX: number;
                            centerY: number;
                            height: number;
                            left: number;
                            renderId: number;
                            right: number;
                            rotation: number;
                            tabIndex: number;
                            tint: number;
                            top: number;
                            width: number;
                            worldAlpha: number;
                            worldRotation: number;
                            x: number;
                            y: number;
                            z: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            frameName: string;
                            key: string;
                            pluginName: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _loadingAsset: null;
                            _localBounds: null;
                            _mask: null;
                            _updateFrame: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            loadingTween: null;
                            mask: null;
                            name: null;
                            scaleMax: null;
                            scaleMin: null;
                            transformCallbackContext: null;
                            vertexTrimmedData: null;
                            forcedHeight: undefined;
                            forcedWidth: undefined;
                            frame: undefined;
                            onTextureLoaded: undefined;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _onAnchorUpdate(): void;
                            _onTextureUpdate(): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            bringChildToTop(c: any): void;
                            calculateBounds(): void;
                            calculateTrimmedVertices(): any;
                            calculateVertices(): void;
                            checkCallback(): void;
                            checkSpriteDimension(): void;
                            containerUpdateTransform(): void;
                            containsPoint(t: any): any;
                            destroy(): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            getOffsetX(): any;
                            getOffsetY(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            loadNewTexture(c: any, u: any, h: any, a: any): void;
                            loadTexture(c: any, u: any): void;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            rotateMiddleBased(c: any): void;
                            sendChildToBack(c: any): void;
                            setActive(c: any): void;
                            setChildIndex(t: any, e: any): void;
                            setFrame(c: any): void;
                            setParent(t: any): any;
                            setTexture(c: any, u: any): void;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateFrame(u: any): void;
                            updateTexture(c: any): void;
                            updateTransform(): void;
                            indices: Uint16Array;
                            uvs: Float32Array;
                            vertexData: Float32Array;
                            _anchor: any /* too deep */;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _texture: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            anchor: any /* too deep */;
                            animations: any /* too deep */;
                            bounds: any /* too deep */;
                            cameraOffset: any /* too deep */;
                            children: any /* too deep */;
                            events: any /* too deep */;
                            game: Player["_playerContainer"]["_game"];
                            localTransform: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"];
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            previousPosition: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            tempDisplayObjectParent: any /* too deep */;
                            texture: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            transformCallback: any /* too deep */;
                            world: any /* too deep */;
                            worldPosition: any /* too deep */;
                            worldScale: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["menus"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                        state: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            _roundPixels: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            inputEnabled: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isLoaded: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            pendingDestroy: boolean;
                            renderable: boolean;
                            roundPixels: boolean;
                            smoothed: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _cachedTint: number;
                            _eventsCount: number;
                            _height: number;
                            _lastSortedIndex: number;
                            _textureID: number;
                            _textureTrimmedID: number;
                            _tint: number;
                            _tintRGB: number;
                            _transformID: number;
                            _transformTrimmedID: number;
                            _width: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            blendMode: number;
                            bottom: number;
                            cacheAsBitmapMultisample: number;
                            centerX: number;
                            centerY: number;
                            height: number;
                            left: number;
                            renderId: number;
                            right: number;
                            rotation: number;
                            tabIndex: number;
                            tint: number;
                            top: number;
                            width: number;
                            worldAlpha: number;
                            worldRotation: number;
                            x: number;
                            y: number;
                            z: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            frameName: string;
                            key: string;
                            pluginName: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            loadingTween: null;
                            mask: null;
                            name: null;
                            scaleMax: null;
                            scaleMin: null;
                            transformCallbackContext: null;
                            vertexTrimmedData: null;
                            forcedHeight: undefined;
                            forcedWidth: undefined;
                            frame: undefined;
                            onTextureLoaded: undefined;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _onAnchorUpdate(): void;
                            _onTextureUpdate(): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            bringChildToTop(c: any): void;
                            calculateBounds(): void;
                            calculateTrimmedVertices(): any;
                            calculateVertices(): void;
                            checkCallback(): void;
                            checkSpriteDimension(): void;
                            containerUpdateTransform(): void;
                            containsPoint(t: any): any;
                            destroy(): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            getOffsetX(): any;
                            getOffsetY(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            loadNewTexture(c: any, u: any, h: any, a: any): void;
                            loadTexture(c: any, u: any): void;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            rotateMiddleBased(c: any): void;
                            sendChildToBack(c: any): void;
                            setActive(c: any): void;
                            setChildIndex(t: any, e: any): void;
                            setFrame(c: any): void;
                            setParent(t: any): any;
                            setTexture(c: any, u: any): void;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateFrame(u: any): void;
                            updateTexture(c: any): void;
                            updateTransform(): void;
                            indices: Uint16Array;
                            uvs: Float32Array;
                            vertexData: Float32Array;
                            _anchor: any /* too deep */;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _texture: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            anchor: any /* too deep */;
                            animations: any /* too deep */;
                            bounds: any /* too deep */;
                            cameraOffset: any /* too deep */;
                            children: any /* too deep */;
                            events: any /* too deep */;
                            game: Player["_playerContainer"]["_game"];
                            localTransform: any /* too deep */;
                            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"];
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            previousPosition: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                            tempDisplayObjectParent: any /* too deep */;
                            texture: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            transformCallback: any /* too deep */;
                            world: any /* too deep */;
                            worldPosition: any /* too deep */;
                            worldScale: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        user: Player["_playerContainer"];
                        world: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldGamePosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldPosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldScale: Player["_playerContainer"]["_game"]["_state"]["_current"]["questProgress"]["scale"];
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                    uiLayer: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: any /* too deep */[];
                        gameObjectRef: Player["_playerContainer"]["_game"]["_state"]["_current"]["_uiLayer"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["background"]["parent"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_game"]["_state"]["_current"]["uiLayer"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_game"]["_state"]["_current"]["uiLayer"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_game"]["_state"]["_current"]["uiLayer"]["localTransform"];
                            pivot: Player["_playerContainer"]["_game"]["_state"]["_current"]["uiLayer"]["pivot"];
                            position: Player["_playerContainer"]["_game"]["_state"]["_current"]["uiLayer"]["position"];
                            scale: Player["_playerContainer"]["_game"]["_state"]["_current"]["uiLayer"]["scale"];
                            skew: Player["_playerContainer"]["_game"]["_state"]["_current"]["uiLayer"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    user: Player["_playerContainer"];
                    zone: Player["_playerContainer"]["_game"]["_state"]["_current"]["data"]["zone"];
                };
                _initArgs: never[];
                _onStateChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                game: Player["_playerContainer"]["_game"];
                onStateChange: Player["_playerContainer"]["_game"]["_state"]["_onStateChange"];
            };
            _time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
            _tweens: {
                add(c: any, u: any, h: any): any;
                create(c: any, u: any, h: any): any;
                destroy(): void;
                findOwnerForTween(c: any): any;
                getAll(): any;
                pauseAll(): void;
                remove(c: any): void;
                removeAll(): void;
                removeAllFromOwner(c: any): void;
                removeFrom(c: any, u: any): void;
                removeTweenFromOwner(c: any): any;
                resumeAll(): void;
                update(): any;
                _owners: Map<never, never>;
                _tweens: ({ _tweenInitialized: boolean; isDestroyed: boolean; isPaused: boolean; isRunning: boolean; killed: boolean; pendingDelete: boolean; reverse: boolean; timeScale: number; totalDuration: number; chainedTween: null; chain(): any; checkInitialized(c: any): void; delay(c: any): any; destroy(): void; duration(c: any): any; fixDeprecatedRelativeValues(c: any): any; from(c: any, u: any, h: any, f: any, l: any, d: any, O: any): any; getDelay(): any; getDuration(): any; getRepeat(): any; getYoyo(): any; loop(c: any): any; onCompleteCallback(): void; onUpdateCallback(c: any, u: any): any; pause(): any; remove(): void; repeat(c: any): any; repeatDelay(c: any): any; resume(): any; start(): any; stop(c: any): any; to(c: any, u: any, h: any, f: any, l: any, d: any, O: any): any; yoyo(c: any): any; _rootTween: any /* too deep */; _target: any /* too deep */; _timeline: any /* too deep */; game: Player["_playerContainer"]["_game"]; manager: Player["_playerContainer"]["_game"]["_tweens"]; onChildComplete: any /* too deep */; onDestroy: any /* too deep */; onLoop: any /* too deep */; onRepeat: any /* too deep */; onStart: any /* too deep */; onTweenComplete: any /* too deep */; onUpdate: any /* too deep */; owner: any /* too deep */; properties: any /* too deep */; target: any /* too deep */; } | { _tweenInitialized: boolean; isDestroyed: boolean; isPaused: boolean; isRunning: boolean; killed: boolean; pendingDelete: boolean; reverse: boolean; timeScale: number; totalDuration: number; chainedTween: null; chain(): any; checkInitialized(c: any): void; delay(c: any): any; destroy(): void; duration(c: any): any; fixDeprecatedRelativeValues(c: any): any; from(c: any, u: any, h: any, f: any, l: any, d: any, O: any): any; getDelay(): any; getDuration(): any; getRepeat(): any; getYoyo(): any; loop(c: any): any; onCompleteCallback(): void; onUpdateCallback(c: any, u: any): any; pause(): any; remove(): void; repeat(c: any): any; repeatDelay(c: any): any; resume(): any; start(): any; stop(c: any): any; to(c: any, u: any, h: any, f: any, l: any, d: any, O: any): any; yoyo(c: any): any; _rootTween: any /* too deep */; _target: Player["_playerContainer"]["_game"]["_input"]["interactiveItems"]["next"]["sprite"]; _timeline: any /* too deep */; game: Player["_playerContainer"]["_game"]; manager: Player["_playerContainer"]["_game"]["_tweens"]; onChildComplete: any /* too deep */; onDestroy: any /* too deep */; onLoop: any /* too deep */; onRepeat: any /* too deep */; onStart: any /* too deep */; onTweenComplete: any /* too deep */; onUpdate: any /* too deep */; owner: Player["_playerContainer"]["_game"]["_state"]["_current"]["data"]; properties: any /* too deep */; target: Player["_playerContainer"]["_game"]["_input"]["interactiveItems"]["next"]["sprite"]; })[];
                game: Player["_playerContainer"]["_game"];
            };
            add: Player["_playerContainer"]["_game"]["_add"];
            app: Player["_playerContainer"]["_game"]["_app"];
            broadcaster: {
                broadcastIdCount: number;
                addAppListener(c: any, u: any, h: any, a: any, f: any): void;
                broadcast(c: any, u: any, h: any): any;
                clear(): void;
                hashContext(c: any): any;
                removeAppListener(c: any, u: any, h: any): void;
                callbacks: {
                    bId0: {
                        "Prodigy.Events.FlyingStars.DONE": (() => void)[];
                        "Prodigy.Events.HUD.CLOSE_PETS_MENU": (() => void)[];
                        "Prodigy.Events.Map.ENABLE_DYNAMIC_LAYER": ((arg0: any) => void)[];
                        "Prodigy.Events.PlayerContainer.MORPH_MARBLE_CANCELLED": (() => void)[];
                        "Prodigy.Events.PlayerContainer.MORPH_MARBLE_TIMER_UPDATED": (() => void)[];
                        "Prodigy.Events.PlayerContainer.MORPH_MARBLE_USED": ((() => void) | ((arg0: any) => void))[];
                        "Prodigy.Events.PlayerLocomotion.GET_TARGET": ((arg0: any) => void)[];
                        "Prodigy.Events.PlayerLocomotion.MOVE_PLAYER": ((arg0: any) => void)[];
                        "Prodigy.Events.PlayerLocomotion.STOP_PLAYER": (() => void)[];
                        "Prodigy.Events.Screen.ADD_CHILD": ((arg0: any) => void)[];
                        "Prodigy.Events.Screen.ENABLE_BACKGROUND": ((arg0: any) => void)[];
                        "Prodigy.Events.Screen.ENABLE_CONTENT": ((arg0: any) => void)[];
                        "Prodigy.Events.Screen.GET_LAYER": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.ANONYMOUS_GAME_COMPLETE_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.ANONYMOUS_GAME_DISCOVERY": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.EXTERNAL_ANALYTICS": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_AVATAR_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_BATTLE_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_COMPLETE_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_DISCOVERY_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_QUESTION_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_SESSION_END_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_SESSION_START_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_SINK_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_SOCIAL_V3": ((arg0: any) => void)[];
                        "Prodigy.Events.Telemetry.GAME_SOURCE_V3": ((arg0: any) => void)[];
                    };
                    bId2: {
                        "Prodigy.Events.Creature.LEVEL_UP": ((arg0: any) => void)[];
                        "Prodigy.Events.Creature.STARS_ADDED": (() => void)[];
                    };
                    bId23: {};
                    bId25: {
                        "Prodigy.Events.Creature.LEVEL_UP": ((arg0: any) => void)[];
                        "Prodigy.Events.Creature.STARS_ADDED": (() => void)[];
                    };
                    bId8: {};
                    Card: {
                        "Prodigy.Events.FriendsList.CANCEL_REQUEST": ((arg0: any) => void)[];
                        "Prodigy.Events.FriendsList.REMOVE_FRIEND": ((arg0: any) => void)[];
                        "Prodigy.Events.FriendsList.SEND_REQUEST": ((arg0: any) => void)[];
                    };
                    ConjureCubes: {
                        "Prodigy.Events.GiftBoxes.UPDATE_CONJURE_CUBE_COUNT": (() => void)[];
                    };
                    FriendsList: {
                        "Prodigy.Events.FriendsList.CLEAR_FRIEND_REQUESTS_CACHE": (() => void)[];
                        "Prodigy.Events.FriendsList.GET_FRIENDS_LIST": (() => void)[];
                        "Prodigy.Events.FriendsList.GET_TOTAL_FRIEND_REQUESTS": ((arg0: any) => void)[];
                        "Prodigy.Events.FriendsList.REMOVE_FRIEND": ((arg0: any) => void)[];
                    };
                    FriendsListOfActualFriends: {};
                    HUD: {
                        "Prodigy.Events.FriendsList.GET_TOTAL_FRIEND_REQUESTS": (() => void)[];
                        "Prodigy.Events.FriendsList.REQUEST_ACCEPTED": (() => void)[];
                        "Prodigy.Events.FriendsList.REQUEST_CANCELLED": (() => void)[];
                        "Prodigy.Events.FriendsList.REQUEST_RECEIVED": (() => void)[];
                        "Prodigy.Events.FriendsList.REQUEST_REJECTED": (() => void)[];
                        "Prodigy.Events.HUD.CLOSE_CHAT": (() => void)[];
                        "Prodigy.Events.HUD.HIDE_RIGHT_HUD": (() => void)[];
                        "Prodigy.Events.HUD.OPEN_CHAT": (() => void)[];
                        "Prodigy.Events.HUD.REFRESH_SOCIAL_FEED_NOTIFICATION": (() => void)[];
                        "Prodigy.Events.HUD.SET_CLICKED_WORLD_MAP": (() => void)[];
                        "Prodigy.Events.HUD.SHOW_RIGHT_HUD": (() => void)[];
                    };
                    mount: {
                        "Prodigy.Events.UI.MOUNT_TOGGLE_PRESSED": (() => void)[];
                    };
                    NetworkHandlers: {};
                    ProdigyMailerButton: {
                        "Prodigy.Events.Mailer.UPDATE_MAIL_COUNTERS": ((c: any) => void)[];
                    };
                    ProdigyMailView: {
                        "Prodigy.Events.Mailer.MARK_AS_READ": ((arg0: any) => void)[];
                    };
                    Titan: {
                        "Prodigy.Events.Titan.GOT_TITANS": (() => void)[];
                    };
                    UI: {
                        "Prodigy.Events.House.CLICKED_HOUSE_ICON": (() => void)[];
                    };
                };
                game: Player["_playerContainer"]["_game"];
                listeners: {
                    bId0: {
                        "Prodigy.Events.FlyingStars.DONE": (Player["_playerContainer"] | any /* too deep */)[];
                        "Prodigy.Events.HUD.CLOSE_PETS_MENU": any /* too deep */[];
                        "Prodigy.Events.Map.ENABLE_DYNAMIC_LAYER": Player["_playerContainer"]["_game"]["_state"]["_current"]["data"][];
                        "Prodigy.Events.PlayerContainer.MORPH_MARBLE_CANCELLED": (Player["_playerContainer"] | any /* too deep */)[];
                        "Prodigy.Events.PlayerContainer.MORPH_MARBLE_TIMER_UPDATED": any /* too deep */[];
                        "Prodigy.Events.PlayerContainer.MORPH_MARBLE_USED": any /* too deep */[];
                        "Prodigy.Events.PlayerLocomotion.GET_TARGET": any /* too deep */[];
                        "Prodigy.Events.PlayerLocomotion.MOVE_PLAYER": any /* too deep */[];
                        "Prodigy.Events.PlayerLocomotion.STOP_PLAYER": (Player["_playerContainer"] | any /* too deep */)[];
                        "Prodigy.Events.Screen.ADD_CHILD": Player["_playerContainer"]["_game"]["_state"]["_current"][];
                        "Prodigy.Events.Screen.ENABLE_BACKGROUND": Player["_playerContainer"]["_game"]["_state"]["_current"][];
                        "Prodigy.Events.Screen.ENABLE_CONTENT": Player["_playerContainer"]["_game"]["_state"]["_current"][];
                        "Prodigy.Events.Screen.GET_LAYER": Player["_playerContainer"]["_game"]["_state"]["_current"][];
                        "Prodigy.Events.Telemetry.ANONYMOUS_GAME_COMPLETE_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.ANONYMOUS_GAME_DISCOVERY": any /* too deep */[];
                        "Prodigy.Events.Telemetry.EXTERNAL_ANALYTICS": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_AVATAR_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_BATTLE_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_COMPLETE_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_DISCOVERY_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_QUESTION_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_SESSION_END_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_SESSION_START_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_SINK_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_SOCIAL_V3": any /* too deep */[];
                        "Prodigy.Events.Telemetry.GAME_SOURCE_V3": any /* too deep */[];
                    };
                    bId2: {
                        "Prodigy.Events.Creature.LEVEL_UP": Player["_playerContainer"][];
                        "Prodigy.Events.Creature.STARS_ADDED": Player["_playerContainer"][];
                    };
                    bId23: {};
                    bId25: {
                        "Prodigy.Events.Creature.LEVEL_UP": any /* too deep */[];
                        "Prodigy.Events.Creature.STARS_ADDED": any /* too deep */[];
                    };
                    bId8: {};
                    Card: {
                        "Prodigy.Events.FriendsList.CANCEL_REQUEST": any /* too deep */[];
                        "Prodigy.Events.FriendsList.REMOVE_FRIEND": any /* too deep */[];
                        "Prodigy.Events.FriendsList.SEND_REQUEST": any /* too deep */[];
                    };
                    ConjureCubes: {
                        "Prodigy.Events.GiftBoxes.UPDATE_CONJURE_CUBE_COUNT": any /* too deep */[];
                    };
                    FriendsList: {
                        "Prodigy.Events.FriendsList.CLEAR_FRIEND_REQUESTS_CACHE": any /* too deep */[];
                        "Prodigy.Events.FriendsList.GET_FRIENDS_LIST": any /* too deep */[];
                        "Prodigy.Events.FriendsList.GET_TOTAL_FRIEND_REQUESTS": any /* too deep */[];
                        "Prodigy.Events.FriendsList.REMOVE_FRIEND": any /* too deep */[];
                    };
                    FriendsListOfActualFriends: {};
                    HUD: {
                        "Prodigy.Events.FriendsList.GET_TOTAL_FRIEND_REQUESTS": any /* too deep */[];
                        "Prodigy.Events.FriendsList.REQUEST_ACCEPTED": any /* too deep */[];
                        "Prodigy.Events.FriendsList.REQUEST_CANCELLED": any /* too deep */[];
                        "Prodigy.Events.FriendsList.REQUEST_RECEIVED": any /* too deep */[];
                        "Prodigy.Events.FriendsList.REQUEST_REJECTED": any /* too deep */[];
                        "Prodigy.Events.HUD.CLOSE_CHAT": (Player["_playerContainer"]["_game"]["_state"]["_current"] | any /* too deep */)[];
                        "Prodigy.Events.HUD.HIDE_RIGHT_HUD": any /* too deep */[];
                        "Prodigy.Events.HUD.OPEN_CHAT": (Player["_playerContainer"]["_game"]["_state"]["_current"] | any /* too deep */)[];
                        "Prodigy.Events.HUD.REFRESH_SOCIAL_FEED_NOTIFICATION": any /* too deep */[];
                        "Prodigy.Events.HUD.SET_CLICKED_WORLD_MAP": any /* too deep */[];
                        "Prodigy.Events.HUD.SHOW_RIGHT_HUD": any /* too deep */[];
                    };
                    mount: {
                        "Prodigy.Events.UI.MOUNT_TOGGLE_PRESSED": Player["_playerContainer"][];
                    };
                    NetworkHandlers: {};
                    ProdigyMailerButton: {
                        "Prodigy.Events.Mailer.UPDATE_MAIL_COUNTERS": any /* too deep */[];
                    };
                    ProdigyMailView: {
                        "Prodigy.Events.Mailer.MARK_AS_READ": any /* too deep */[];
                    };
                    Titan: {
                        "Prodigy.Events.Titan.GOT_TITANS": any /* too deep */[];
                    };
                    UI: {
                        "Prodigy.Events.House.CLICKED_HOUSE_ICON": any /* too deep */[];
                    };
                };
            };
            cache: Player["_playerContainer"]["_game"]["_cache"];
            cameraCollisions: Player["_playerContainer"]["_game"]["_cameraCollisions"];
            config: Player["_playerContainer"]["_game"]["_config"];
            destroyQueue: Player["_playerContainer"]["_game"]["_destroyQueue"];
            device: Player["_playerContainer"]["_game"]["_device"];
            fps: {
                _isPendingResumeRecordFPS: boolean;
                _record: boolean;
                record: boolean;
                _framerate: number;
                _frames: number;
                _prevTime: number;
                _rollingCount: number;
                _rollingSum: number;
                endFrame(): void;
                getAverageFramerate(): any;
                getFramerate(): any;
                timeNow(): any;
            };
            frameWorkManager: {
                _frameWorkDone: boolean;
                _frameStartTime: number;
                frameBudget: number;
                frameBudgetRemaining: number;
                frameTimeElapsed: number;
                _now(): void;
                awaitFreeTime(c: any, u: any): void;
                cancelWork(): any;
                flushWorkQueue(): void;
                markFrameEnd(): void;
                markFrameStart(): void;
                _workPromises: never[];
            };
            input: Player["_playerContainer"]["_game"]["_input"];
            inputDispatcher: {
                dispatchKeyboardEvent(c: any, u: any): void;
                dispatchKeyPressEvent(c: any, u: any, h: any): void;
                dispatchMouseEvent(c: any, u: any): void;
                game: Player["_playerContainer"]["_game"];
            };
            load: Player["_playerContainer"]["_game"]["_load"];
            navMeshSystem: Player["_playerContainer"]["_game"]["_navMeshSystem"];
            onPause: Player["_playerContainer"]["_game"]["_onPause"];
            onResume: Player["_playerContainer"]["_game"]["_onResume"];
            renderer: Player["_playerContainer"]["_game"]["_app"]["renderer"];
            rnd: Player["_playerContainer"]["_game"]["_rnd"];
            rootContainer: Player["_playerContainer"]["_game"]["_rootContainer"];
            scale: Player["_playerContainer"]["_game"]["_scale"];
            seededRandom: {
                frac(c: any): any;
                pick(c: any, u: any): any;
                shuffleArray(c: any, u: any): any;
                randomDataGenerator: {
                    c: number;
                    s0: number;
                    s1: number;
                    s2: number;
                    angle(): any;
                    frac(): any;
                    hash(c: any): any;
                    integer(): any;
                    integerInRange(c: any, u: any): any;
                    normal(): any;
                    pick(c: any): any;
                    real(): any;
                    realInRange(c: any, u: any): any;
                    rnd(): any;
                    shuffle(c: any): any;
                    sign(): any;
                    sow(c: any): void;
                    state(c: any): any;
                    uuid(): any;
                    weightedPick(c: any): any;
                };
            };
            sound: Player["_playerContainer"]["_game"]["_sound"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            state: Player["_playerContainer"]["_game"]["_state"];
            time: Player["_playerContainer"]["_game"]["_input"]["activePointer"]["backButton"]["time"];
            tweens: Player["_playerContainer"]["_game"]["_tweens"];
            world: Player["_playerContainer"]["_game"]["_add"]["stage"];
        };
        _localBounds: {
            maxX: number;
            maxY: number;
            minX: number;
            minY: number;
            updateID: number;
            rect: null;
            addBounds(t: any): void;
            addBoundsArea(t: any, e: any): void;
            addBoundsMask(t: any, e: any): void;
            addBoundsMatrix(t: any, e: any): void;
            addFrame(t: any, e: any, r: any, i: any, n: any): void;
            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
            addPoint(t: any): void;
            addPointMatrix(t: any, e: any): void;
            addQuad(t: any): void;
            addVertexData(t: any, e: any, r: any): void;
            addVertices(t: any, e: any, r: any, i: any): void;
            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
            clear(): void;
            getRectangle(t: any): any;
            isEmpty(): any;
            pad(t: any, e: any): void;
        };
        _localBoundsRect: {
            bottom: number;
            height: number;
            left: number;
            right: number;
            top: number;
            type: number;
            width: number;
            x: number;
            y: number;
            ceil(t: any, e: any): any;
            clone(): any;
            contains(t: any, e: any): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            enlarge(t: any): any;
            fit(t: any): any;
            pad(t: any, e: any): any;
        };
        _onLoad: {
            _shouldPropagate: boolean;
            active: boolean;
            add(c: any, u: any, h: any): any;
            addBinding(c: any, u: any, h: any, a: any, l: any): any;
            addOnce(c: any, u: any, h: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(c: any, u: any): any;
            indexOfListener(c: any, u: any): any;
            remove(c: any, u: any): void;
            removeAll(c: any): void;
            removeAtIndex(c: any): void;
            toString(): any;
            validateListener(c: any, u: any): void;
            _bindings: never[];
        };
        _tempDisplayObjectParent: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isMask: boolean;
            isSprite: boolean;
            renderable: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _eventsCount: number;
            _lastSortedIndex: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            cacheAsBitmapMultisample: number;
            renderId: number;
            rotation: number;
            tabIndex: number;
            worldAlpha: number;
            x: number;
            y: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _localBoundsRect: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            name: null;
            parent: null;
            sortDirty: null;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _recursivePostUpdateTransform(): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addListener(t: any, e: any, r: any): any;
            destroy(t: any): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            removeAllListeners(t: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            setParent(t: any): any;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            updateTransform(): void;
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _trackedPointers: {};
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["_tempDisplayObjectParent"]["localTransform"];
                    pivot: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
            scale: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
            tempDisplayObjectParent: Player["_playerContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
            trackedPointers: Player["_playerContainer"]["_tempDisplayObjectParent"]["_trackedPointers"];
            transform: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"]["scope"];
            worldTransform: Player["_playerContainer"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
        };
        _trackedPointers: {};
        $: {
            addPhrases(c: any, u: any): void;
            getPhrase(c: any): any;
            getPhraseIndex(c: any): any;
            getPhrases(): any;
            _localizer: {
                getText(c: any): any;
                hasText(c: any): any;
                setDataSource(c: any): void;
                dataSource: {
                    getValue(c: any): any;
                    loadDataFromURL(c: any, u: any): any;
                    _httpClient: {
                        _baseURI: string;
                        clearDefaultResponseHandler(c: any): void;
                        getBaseURI(): any;
                        getDefaultHeaders(): any;
                        getRequestInitData(c: any): any;
                        retryRequest(c: any, u: any, h: any, a: any): any;
                        sendFetchRequest(c: any, u: any, h: any, a: any): any;
                        sendRequest(c: any): any;
                        setBaseURI(c: any): void;
                        setDefaultHeader(c: any, u: any, h: any): void;
                        setDefaultResponseHandler(c: any, u: any, h: any): void;
                        _defaultHeaders: Map<never, never>;
                        _defaultResponseHandler: Map<never, never>;
                    };
                    _languageData: {
                        "1_YEAR_EPIC_AD_BODY": string;
                        "1_YEAR_EPIC_AD_END_DATE": string;
                        "1_YEAR_EPIC_AD_TITLE": string;
                        "1_YEAR_EPIC_AD_TOOLTIP_BODY": string;
                        "1_YEAR_EPIC_AD_TOOLTIP_TITLE": string;
                        ABANDON_BOUNTY_SERVER_ERROR: string;
                        ABANDON_BOUNTY_SERVER_ERROR_TITLE: string;
                        ABOUT: string;
                        ACADEMY: string;
                        ACADEMY_TOWER_COMMON_ROOM: string;
                        ACADEMY_TOWER_COMPLETE: string;
                        ACADEMY_TOWER_FLOOR_COMPLETE: string;
                        ACADEMY_TOWER_LOBBY_EXIT: string;
                        ACADEMY_TOWER_LOCKED: string;
                        ACADEMY_TOWER_LOCKED_HAS_GEM: string;
                        ACADEMY_TOWER_LOCKED_NO_LEVEL: string;
                        ACADEMY_TOWER_NOT_RELEASED: string;
                        ACADEMY_TOWER_PROGRESSION: string;
                        ACCOUNT_CREATE_PASSWORD: string;
                        ACCOUNT_CREATE_PRIVACY_POLICY: string;
                        ACCOUNT_CREATE_USERNAME: string;
                        ACCOUNT_LOCATION_AUSTRALIA: string;
                        ACCOUNT_LOCATION_COLORADO: string;
                        ACCOUNT_LOCATION_ENGLAND: string;
                        ACCOUNT_LOCATION_FLORIDA: string;
                        ACCOUNT_LOCATION_INDIA: string;
                        ACCOUNT_LOCATION_NEW_YORK: string;
                        ACCOUNT_LOCATION_ONTARIO: string;
                        ACCOUNT_LOCATION_OTHER: string;
                        ACCOUNT_LOCATION_TENNESSEE: string;
                        ACCOUNT_LOCATION_TEXAS: string;
                        ACCOUNT_LOCATION_TITLE_CANADA: string;
                        ACCOUNT_LOCATION_TITLE_OTHER: string;
                        ACCOUNT_LOCATION_TITLE_USA: string;
                        ACCOUNT_LOCATION_VIRGINIA: string;
                        ACHIEVEMENT_ACADEMY_PAGES: string;
                        ACHIEVEMENT_ACADEMY_PAGES_DESC: string;
                        ACHIEVEMENT_ANTIQUARIAN_DESC: string;
                        ACHIEVEMENT_ANTIQUARIAN_NAME: string;
                        ACHIEVEMENT_ARCHIVES_ENEMIES: string;
                        ACHIEVEMENT_ARCHIVES_ENEMIES_DESC: string;
                        ACHIEVEMENT_ARCHIVES_RUNS: string;
                        ACHIEVEMENT_ARCHIVES_RUNS_DESC: string;
                        ACHIEVEMENT_ARCTIC_FOX_BUDDY: string;
                        ACHIEVEMENT_ARCTIC_FOX_BUDDY_DESC: string;
                        ACHIEVEMENT_BONFIRE_CHESTS_DESC: string;
                        ACHIEVEMENT_BONFIRE_CHESTS_NAME: string;
                        ACHIEVEMENT_BONFIRE_DEFEAT_WIZARDS_DESC: string;
                        ACHIEVEMENT_BONFIRE_DEFEAT_WIZARDS_NAME: string;
                        ACHIEVEMENT_BONFIRE_QUESTS_DESC: string;
                        ACHIEVEMENT_BONFIRE_QUESTS_NAME: string;
                        ACHIEVEMENT_BONFIRE_SET_DESC: string;
                        ACHIEVEMENT_BONFIRE_SET_NAME: string;
                        ACHIEVEMENT_CATCH_PET_DESC: string;
                        ACHIEVEMENT_CATCH_PET_NAME: string;
                        ACHIEVEMENT_CHALLENGER_DESC: string;
                        ACHIEVEMENT_CHALLENGER_NAME: string;
                        ACHIEVEMENT_CHAMP_DESC: string;
                        ACHIEVEMENT_CHAMP_NAME: string;
                        ACHIEVEMENT_COIN_COLLECT_DESC: string;
                        ACHIEVEMENT_COIN_COLLECT_NAME: string;
                        ACHIEVEMENT_COLISEUM_DEFEAT_DESC: string;
                        ACHIEVEMENT_COLISEUM_DEFEAT_NAME: string;
                        ACHIEVEMENT_COLLECT_PAGES: string;
                        ACHIEVEMENT_COLLECT_PAGES_DESC: string;
                        ACHIEVEMENT_COMPLETED: string;
                        ACHIEVEMENT_DECORATOR_DESC: string;
                        ACHIEVEMENT_DECORATOR_NAME: string;
                        ACHIEVEMENT_FINISH_ICETOWER_FLOORS: string;
                        ACHIEVEMENT_FINISH_ICETOWER_FLOORS_DESC: string;
                        ACHIEVEMENT_FINISH_TOWER_FLOORS: string;
                        ACHIEVEMENT_FINISH_TOWER_FLOORS_DESC: string;
                        ACHIEVEMENT_FINISHED: string;
                        ACHIEVEMENT_FOREST_CHESTS_DESC: string;
                        ACHIEVEMENT_FOREST_CHESTS_NAME: string;
                        ACHIEVEMENT_FOREST_DEFEAT_WIZARDS_DESC: string;
                        ACHIEVEMENT_FOREST_DEFEAT_WIZARDS_NAME: string;
                        ACHIEVEMENT_FOREST_NEEK: string;
                        ACHIEVEMENT_FOREST_NEEK_DESC: string;
                        ACHIEVEMENT_FOREST_QUESTS_DESC: string;
                        ACHIEVEMENT_FOREST_QUESTS_NAME: string;
                        ACHIEVEMENT_FOREST_SET_DESC: string;
                        ACHIEVEMENT_FOREST_SET_NAME: string;
                        ACHIEVEMENT_GOLDEN_PAGES: string;
                        ACHIEVEMENT_GOLDEN_PAGES_DESC: string;
                        ACHIEVEMENT_GROUP_BATTLE: string;
                        ACHIEVEMENT_GROUP_BONFIRE: string;
                        ACHIEVEMENT_GROUP_EARTHTOWER: string;
                        ACHIEVEMENT_GROUP_EDUCATION: string;
                        ACHIEVEMENT_GROUP_EXPLORATION: string;
                        ACHIEVEMENT_GROUP_FIREFLY: string;
                        ACHIEVEMENT_GROUP_GENERAL: string;
                        ACHIEVEMENT_GROUP_ICETOWER: string;
                        ACHIEVEMENT_GROUP_LAMPLIGHT: string;
                        ACHIEVEMENT_GROUP_PVP: string;
                        ACHIEVEMENT_GROUP_SHIPWRECK: string;
                        ACHIEVEMENT_GROUP_SHIVERCHILL: string;
                        ACHIEVEMENT_GROUP_SKYWATCH: string;
                        ACHIEVEMENT_ICE_NEEK: string;
                        ACHIEVEMENT_ICE_NEEK_DESC: string;
                        ACHIEVEMENT_MASTER_SKILLS_DESC: string;
                        ACHIEVEMENT_MASTER_SKILLS_NAME: string;
                        ACHIEVEMENT_MONSTER_HUNTER_DESC: string;
                        ACHIEVEMENT_MONSTER_HUNTER_NAME: string;
                        ACHIEVEMENT_NEWBIE_DESC: string;
                        ACHIEVEMENT_NEWBIE_NAME: string;
                        ACHIEVEMENT_PACKRAT_DESC: string;
                        ACHIEVEMENT_PACKRAT_NAME: string;
                        ACHIEVEMENT_PRODIGY_DESC: string;
                        ACHIEVEMENT_PRODIGY_NAME: string;
                        ACHIEVEMENT_QUESTIONNAIRE_DESC: string;
                        ACHIEVEMENT_QUESTIONNAIRE_NAME: string;
                        ACHIEVEMENT_RUNWAY_MODEL_DESC: string;
                        ACHIEVEMENT_RUNWAY_MODEL_NAME: string;
                        ACHIEVEMENT_SAVE_ADA: string;
                        ACHIEVEMENT_SAVE_ADA_DESC: string;
                        ACHIEVEMENT_SAVE_FLORIAN: string;
                        ACHIEVEMENT_SAVE_FLORIAN_DESC: string;
                        ACHIEVEMENT_SEASON_1_ARCHIVES_REWARDS: string;
                        ACHIEVEMENT_SEASON_1_ARCHIVES_REWARDS_DESC: string;
                        ACHIEVEMENT_SEQUENCING_DESC: string;
                        ACHIEVEMENT_SEQUENCING_NAME: string;
                        ACHIEVEMENT_SHIPWRECK_CHESTS_DESC: string;
                        ACHIEVEMENT_SHIPWRECK_CHESTS_NAME: string;
                        ACHIEVEMENT_SHIPWRECK_CLEAR_INK_DESC: string;
                        ACHIEVEMENT_SHIPWRECK_CLEAR_INK_NAME: string;
                        ACHIEVEMENT_SHIPWRECK_DEFEAT_WIZARDS_DESC: string;
                        ACHIEVEMENT_SHIPWRECK_DEFEAT_WIZARDS_NAME: string;
                        ACHIEVEMENT_SHIPWRECK_QUESTS_DESC: string;
                        ACHIEVEMENT_SHIPWRECK_QUESTS_NAME: string;
                        ACHIEVEMENT_SHIPWRECK_SET_DESC: string;
                        ACHIEVEMENT_SHIPWRECK_SET_NAME: string;
                        ACHIEVEMENT_SHIVERCHILL_CHESTS_DESC: string;
                        ACHIEVEMENT_SHIVERCHILL_CHESTS_NAME: string;
                        ACHIEVEMENT_SHIVERCHILL_DEFEAT_WIZARDS_DESC: string;
                        ACHIEVEMENT_SHIVERCHILL_DEFEAT_WIZARDS_NAME: string;
                        ACHIEVEMENT_SHIVERCHILL_QUESTS_DESC: string;
                        ACHIEVEMENT_SHIVERCHILL_QUESTS_NAME: string;
                        ACHIEVEMENT_SHIVERCHILL_SET_DESC: string;
                        ACHIEVEMENT_SHIVERCHILL_SET_NAME: string;
                        ACHIEVEMENT_SHOPAHOLIC_DESC: string;
                        ACHIEVEMENT_SHOPAHOLIC_NAME: string;
                        ACHIEVEMENT_SKYWATCH_CHESTS_DESC: string;
                        ACHIEVEMENT_SKYWATCH_CHESTS_NAME: string;
                        ACHIEVEMENT_SKYWATCH_DEFEAT_WIZARDS_DESC: string;
                        ACHIEVEMENT_SKYWATCH_DEFEAT_WIZARDS_NAME: string;
                        ACHIEVEMENT_SKYWATCH_QUESTS_DESC: string;
                        ACHIEVEMENT_SKYWATCH_QUESTS_NAME: string;
                        ACHIEVEMENT_SKYWATCH_SET_DESC: string;
                        ACHIEVEMENT_SKYWATCH_SET_NAME: string;
                        ACHIEVEMENT_SNAKE_BUDDY: string;
                        ACHIEVEMENT_SNAKE_BUDDY_DESC: string;
                        ACHIEVEMENT_SPELLMASTER_DESC: string;
                        ACHIEVEMENT_SPELLMASTER_NAME: string;
                        ACHIEVEMENT_TOURIST_DESC: string;
                        ACHIEVEMENT_TOURIST_NAME: string;
                        ACHIEVEMENT_TOWER_FLOORS_DESC: string;
                        ACHIEVEMENT_TOWER_FLOORS_NAME: string;
                        ACHIEVEMENT_TURN_UP_HEAT_DESC: string;
                        ACHIEVEMENT_TURN_UP_HEAT_NAME: string;
                        ACHIEVEMENT_UNLOCKED_TITLE: string;
                        AD_CRYSTAL_CAVERNS_LAUNCH_BODY: string;
                        AD_CRYSTAL_CAVERNS_LAUNCH_TITLE: string;
                        AD_CRYSTAL_CAVERNS_TEASER2_BODY: string;
                        AD_CRYSTAL_CAVERNS_TEASER2_TITLE: string;
                        AD_PET_LORE_PREVIEW_BODY: string;
                        AD_PET_LORE_PREVIEW_BODY_2: string;
                        AD_PET_LORE_PREVIEW_TITLE: string;
                        AD_PET_LORE_PREVIEW_TITLE_2: string;
                        AD_PETBOOK_BODY: string;
                        AD_PETBOOK_TITLE: string;
                        AD_SUMMER_QUEST_BODY: string;
                        AD_SUMMER_QUEST_TITLE: string;
                        ADD_FRIEND_PROMPT_USERNAME: string;
                        ADVENTURE_CONFIRMATION: string;
                        ADVENTURE_LEVEL: string;
                        ADVENTURE_REMAINING_REWARDS: string;
                        ADVENTURE_REMAINING_REWARDS_SINGLE: string;
                        ALL_ELEMENTAL_ZONES: string;
                        ALL_NON_ELEMENTAL_ZONES: string;
                        ALL_QUESTS_COMPLETE: string;
                        ALREADY_ON_TEAM_TOOLTIP: string;
                        ALREADY_USED_FREE_EVOLUTION_TEXT: string;
                        ARCHIVES_ENTRANCE_WELCOME: string;
                        ARCHIVES_EXIT_PAGES: string;
                        ARCHIVES_EXIT_TITLE: string;
                        ARCHIVES_EXIT_WARNING: string;
                        ARCHIVES_EXIT_WARNING_COLLECTED: string;
                        ARCHIVES_PRIZES_MESSAGE: string;
                        ARCHIVES_PRIZES_TITLE: string;
                        ARCHIVES_TITLE: string;
                        ARCHIVES_WHEEL_COMEBACK: string;
                        ARENA_CHALLENGE_WIZARDS: string;
                        ARENA_CHECK_INTERNET_MESSAGE: string;
                        ARENA_CONFIRM_TRAINING: string;
                        ARENA_DOWN_MESSAGE: string;
                        ARENA_EARN_BRONZE: string;
                        ARENA_FIND_CHALLENGER: string;
                        ARENA_LEADERBOARD_TOP_PLAYERS: string;
                        ARENA_LEADERBOARD_WORLD_TOP_PLAYER: string;
                        ARENA_LEAGUE_BRONZE: string;
                        ARENA_LEAGUE_GOLD: string;
                        ARENA_LEAGUE_SILVER: string;
                        ARENA_MUST_BE_IN_CLASS: string;
                        ARENA_MY_SCORE: string;
                        ARENA_OFFLINE_MESSAGE: string;
                        ARENA_RANK_UP_FASTER: string;
                        ARENA_SEASON_COMPLETE: string;
                        ARENA_SEASON_COMPLETE_BODY: string;
                        ARENA_STORE_DIAMOND_BUTTON_BOT: string;
                        ARENA_STORE_DIAMOND_BUTTON_TOP: string;
                        ARENA_STORE_GOLD_BUTTON_BOT: string;
                        ARENA_STORE_GOLD_BUTTON_TOP: string;
                        ARENA_STORE_PLATINUM_BUTTON_BOT: string;
                        ARENA_STORE_PLATINUM_BUTTON_TOP: string;
                        ARENA_STORE_SILVER_BUTTON_BOT: string;
                        ARENA_STORE_SILVER_BUTTON_TOP: string;
                        ARENA_TITLE: string;
                        ATTACK_SELECT_ACTIONS: string;
                        ATTACK_SELECT_ATTACK: string;
                        ATTACK_SELECT_CAPTURE: string;
                        ATTACK_SELECT_ELEMENTS: string;
                        ATTACK_SELECT_EPIC_SPELLS: string;
                        ATTACK_SELECT_ESCAPE: string;
                        ATTACK_SELECT_LEVEL: string;
                        ATTACK_SELECT_MY_TEAM: string;
                        ATTACK_SELECT_SPELLS: string;
                        AWARDS_TITLE: string;
                        BACK_TO_EPICS: string;
                        BACKPACK_BUTTON_BOOTS: string;
                        BACKPACK_BUTTON_BUDDIES: string;
                        BACKPACK_BUTTON_CURRENCY: string;
                        BACKPACK_BUTTON_HATS: string;
                        BACKPACK_BUTTON_ITEMS: string;
                        BACKPACK_BUTTON_MOUNT: string;
                        BACKPACK_BUTTON_OUTFITS: string;
                        BACKPACK_BUTTON_RELICS: string;
                        BACKPACK_BUTTON_WANDS: string;
                        BATTLE_API_MAINTENANCE_MESSAGE: string;
                        BATTLE_BUTTON_CAPITAL: string;
                        BATTLE_INTRO: string;
                        BATTLE_REQUEST_ACCEPT: string;
                        BATTLE_REQUEST_NAME: string;
                        BATTLE_REVAMP_TEXT_CAST_SPELL: string;
                        BATTLE_REVAMP_TEXT_ESCAPE_BATTLE: string;
                        BATTLE_REVAMP_TEXT_POWER_UP: string;
                        BATTLE_REVAMP_TEXT_RESCUE_PET: string;
                        BATTLE_STATUS_ALL_OUT_ATTACK: string;
                        BATTLE_STATUS_LEVEL: string;
                        BECOME_A_MEMBER: string;
                        BECOME_A_MEMBER_AGAIN: string;
                        BECOME_A_MEMBER_NOW: string;
                        BECOME_A_MEMBER_TODAY: string;
                        BONFIRE_GUARDIAN: string;
                        BOOST_DESCRIPTION_DIG_FASTER: string;
                        BOOST_DESCRIPTION_MORE_FOSSILS: string;
                        BOOST_DESCRIPTION_MORE_GEARS: string;
                        BOOST_DESCRIPTION_MULTIPLIER: string;
                        BOOST_DESCRIPTION_SLOW_TIME: string;
                        BOOST_DESCRIPTION_WALK_FASTER: string;
                        BOOST_MENU_BUTTON_NONE: string;
                        BOOST_MENU_TITLE: string;
                        BOSS_NAME_GLACIAS: string;
                        BOSS_NAME_SHADOW_GLACIAS: string;
                        BOSS_NAME_YETI: string;
                        BOUNTIES_INCREASE_RANK: string;
                        BOUNTY_BOARD_ANCIENT_REWARD: string;
                        BOUNTY_BOARD_BOUNTY_TITLE: string;
                        BOUNTY_BOARD_BUTTON_BOT: string;
                        BOUNTY_BOARD_BUTTON_TOP: string;
                        BOUNTY_BOARD_COMPLETED: string;
                        BOUNTY_BOARD_COMPLETED_TURN_IN: string;
                        BOUNTY_BOARD_GO_TO_LAMPLIGHT: string;
                        BOUNTY_BOARD_MEMBER_BUTTON_BOT: string;
                        BOUNTY_BOARD_MEMBER_BUTTON_TOP: string;
                        BOUNTY_BOARD_POSSIBLE_REWARDS: string;
                        BOUNTY_BOARD_PREPARE_TEAM: string;
                        BOUNTY_BOARD_TITLE: string;
                        BOUNTY_BOARD_UNLOCK_MESSAGE: string;
                        BOUNTY_DEFEAT_MONSTER_TEXT_0_A: string;
                        BOUNTY_DEFEAT_MONSTER_TEXT_0_AN: string;
                        BOUNTY_DEFEAT_MONSTER_TEXT_1: string;
                        BOUNTY_DEFEAT_MONSTER_TEXT_2: string;
                        BOUNTY_DEFEAT_MONSTER_TEXT_3: string;
                        BOUNTY_DEFEAT_MONSTER_TEXT_4: string;
                        BOUNTY_FOUND: string;
                        BOUNTY_POINTS_100: string;
                        BOUNTY_POINTS_20: string;
                        BOUNTY_POINTS_5: string;
                        BOUNTY_POINTS_50: string;
                        BOUNTY_RUN_ABANDON_WARNING: string;
                        BOUNTY_RUN_ABANDON_WARNING_TITLE: string;
                        BOUNTY_RUN_BOSS_BUFF: string;
                        BOUNTY_RUN_BUFF_CRIT_DAMAGE: string;
                        BOUNTY_RUN_BUFF_CRITICAL: string;
                        BOUNTY_RUN_BUFF_DAMAGE: string;
                        BOUNTY_RUN_BUFF_DAMAGE_REDUCTION: string;
                        BOUNTY_RUN_BUFF_ELEMENTAL: string;
                        BOUNTY_RUN_BUFF_HEALTH: string;
                        BOUNTY_RUN_CLOSE_MENU: string;
                        BOUNTY_RUN_RARE: string;
                        BOUNTY_RUN_SELECT_BOUNTY: string;
                        BOUNTY_RUN_START_RUN: string;
                        BOUNTY_RUN_TIME_REMAINING: string;
                        BUTTON_APPLY: string;
                        BUTTON_BACK: string;
                        BUTTON_BACK_CAPITAL: string;
                        BUTTON_BECOME_A_MEMBER: string;
                        BUTTON_CANCEL: string;
                        BUTTON_CANCEL_UPPERCASE: string;
                        BUTTON_CLICK_HERE: string;
                        BUTTON_CLOSE: string;
                        BUTTON_DELETE_TEAM: string;
                        BUTTON_DONE: string;
                        BUTTON_GO_BACK: string;
                        BUTTON_KEEP_TEAM: string;
                        BUTTON_LEAVE_TEAM: string;
                        BUTTON_LETS_GO: string;
                        BUTTON_NEXT: string;
                        BUTTON_NEXT_CAPITAL: string;
                        BUTTON_NO: string;
                        BUTTON_NO_CAPITAL: string;
                        BUTTON_NO_UPPERCASE: string;
                        BUTTON_NOT_RIGHT_NOW: string;
                        BUTTON_OK_EXCLAMATION: string;
                        BUTTON_OK_UPPERCASE: string;
                        BUTTON_OKAY: string;
                        BUTTON_OKAY_CAPITAL: string;
                        BUTTON_OKAY_EXCLAMATION: string;
                        BUTTON_OKAY_UPPERCASE: string;
                        BUTTON_QUIT_CAPITAL: string;
                        BUTTON_QUIT_QUESTION: string;
                        BUTTON_STAY_TEAM: string;
                        BUTTON_YES: string;
                        BUTTON_YES_CAPITAL: string;
                        BUTTON_YES_UPPERCASE: string;
                        BUY_TOY_ASK_PARENT: string;
                        BUY_TOY_BUY_NOW: string;
                        BUY_TOY_EPIC_ATTACK: string;
                        BUY_TOY_MESSAGE: string;
                        BUY_TOY_REQUIRE_COMPUTER_MESSAGE: string;
                        CANCEL: string;
                        CHARACTER_CREATE_EYE_COLOR: string;
                        CHARACTER_CREATE_HAIR_COLOR: string;
                        CHARACTER_CREATE_HAIR_STYLE: string;
                        CHARACTER_CREATE_SKIN_COLOR: string;
                        CHARACTER_SELECT_ADD_CHARACTER: string;
                        CHARACTER_SELECT_ENTER_CLASS: string;
                        CHARACTER_SELECT_ERROR_INVALID_CLASS_CODE: string;
                        CHARACTER_SELECT_ERROR_NO_CLASS_CODE: string;
                        CHARACTER_SELECT_LEARN: string;
                        CHARACTER_SELECT_NEW_CLASS_BODY: string;
                        CHARACTER_SELECT_NEW_CLASS_TITLE: string;
                        CHARACTER_SELECT_NEW_TEACHER: string;
                        CHARACTER_SELECT_NO_CLASS_CODE: string;
                        CHARACTER_SELECT_TOYS: string;
                        CHARACTER_SELECT_UPDATE: string;
                        CHAT_ABRACA_DAB_RA: string;
                        CHAT_ABRACADABRA: string;
                        CHAT_ALL_GOOD: string;
                        CHAT_ALL_RIGHT: string;
                        CHAT_ANIMALS: string;
                        CHAT_ARE_YOU_COMING: string;
                        CHAT_ARE_YOU_HAVING_FUN: string;
                        CHAT_ARE_YOU_LEAVING: string;
                        CHAT_ARE_YOU_STAYING: string;
                        CHAT_ASK_PARENTS: string;
                        CHAT_BAD: string;
                        CHAT_BARELY: string;
                        CHAT_BECAUSE: string;
                        CHAT_BORING: string;
                        CHAT_BOUGHT_IT: string;
                        CHAT_BUNNIES_ARE_BEST: string;
                        CHAT_BUSY: string;
                        CHAT_BUT: string;
                        CHAT_BYE: string;
                        CHAT_BYE_BYE: string;
                        CHAT_CANT_RIGHT_NOW: string;
                        CHAT_CHECK_IT_OUT: string;
                        CHAT_CHILL_CHAR_COOL: string;
                        CHAT_CHILL_CHAR_FAVOURITE: string;
                        CHAT_COME_OVER_HERE: string;
                        CHAT_CRUD: string;
                        CHAT_DEPENDS: string;
                        CHAT_DID_YOU_CATCH: string;
                        CHAT_DID_YOU_SEE_THAT: string;
                        CHAT_DO_YOU_HAVE: string;
                        CHAT_DO_YOU_HAVE_A_MIN: string;
                        CHAT_DO_YOU_LIKE_BUNNIES: string;
                        CHAT_DO_YOU_LIKE_FOXES: string;
                        CHAT_DON_ZORRO_FANTASTICO: string;
                        CHAT_DONT_BOTHER: string;
                        CHAT_DRAGONS: string;
                        CHAT_DRAGONS_COMING: string;
                        CHAT_DRAGONS_COOL: string;
                        CHAT_DRAGONS_HERE: string;
                        CHAT_DRAGONS_LIKE: string;
                        CHAT_DRAGONS_SEEN: string;
                        CHAT_DRAGONS_WANT: string;
                        CHAT_DUDE: string;
                        CHAT_ECLIPSE_COOL: string;
                        CHAT_ECLIPSE_FAVOURITE: string;
                        CHAT_ELEMENTARY: string;
                        CHAT_EVERYONE_LOOK: string;
                        CHAT_FEEL_LIKE_DANCING: string;
                        CHAT_FOLLOW_ME: string;
                        CHAT_FORGET_IT: string;
                        CHAT_FOUND_IT: string;
                        CHAT_FOUND_YOU: string;
                        CHAT_FOXES_ARE_BEST: string;
                        CHAT_FREAKY: string;
                        CHAT_FRIENDS: string;
                        CHAT_FUN: string;
                        CHAT_FUNDERFUL: string;
                        CHAT_GHOSTS: string;
                        CHAT_GO_AWAY: string;
                        CHAT_GO_BUNNY_BANDITS: string;
                        CHAT_GO_FOX_KNIGHTS: string;
                        CHAT_GOLLY: string;
                        CHAT_GOOD: string;
                        CHAT_GOOD_AFTERNOON: string;
                        CHAT_GOOD_MORNING: string;
                        CHAT_GOOD_NIGHT: string;
                        CHAT_GOOD_TO_KNOW: string;
                        CHAT_GOODBYE: string;
                        CHAT_GOT_TO_GO: string;
                        CHAT_GREAT: string;
                        CHAT_GREETINGS: string;
                        CHAT_GUESS: string;
                        CHAT_GUESS_AGAIN: string;
                        CHAT_HAPPY: string;
                        CHAT_HARRIET_HOOD_RULES: string;
                        CHAT_HELLO: string;
                        CHAT_HELLO_THERE: string;
                        CHAT_HELP_ME: string;
                        CHAT_HEY: string;
                        CHAT_HI: string;
                        CHAT_HIPPITY_HOP: string;
                        CHAT_HOP_HOP: string;
                        CHAT_HOW: string;
                        CHAT_HOW_ARE_YOU: string;
                        CHAT_I_CAUGHT_A: string;
                        CHAT_I_DONT_LIKE_IT_HERE: string;
                        CHAT_I_GOT_A: string;
                        CHAT_I_HAVE_TO_GO: string;
                        CHAT_I_HAVE_TO_LEAVE: string;
                        CHAT_I_LEVELED_UP: string;
                        CHAT_I_LIKE_BUNNIES: string;
                        CHAT_I_LIKE_FOXES: string;
                        CHAT_I_LIKE_IT_HERE: string;
                        CHAT_I_LIKE_THIS_PLACE: string;
                        CHAT_I_LIKE_YOU_PET: string;
                        CHAT_I_LIKE_YOUR_HAIR: string;
                        CHAT_I_LIKE_YOUR_HAT: string;
                        CHAT_I_LIKE_YOUR_OUTFIT: string;
                        CHAT_I_LIKE_YOUR_WAND: string;
                        CHAT_I_LOVE_PRODIGY: string;
                        CHAT_IM_RICH: string;
                        CHAT_ITS_SPOOKY_HERE: string;
                        CHAT_ITS_SUPER_RARE: string;
                        CHAT_ITS_TIME: string;
                        CHAT_JEALOUS: string;
                        CHAT_JOKING: string;
                        CHAT_JUST_KIDDING: string;
                        CHAT_JUST_YOU_WAIT: string;
                        CHAT_KEEP_GOING: string;
                        CHAT_KEEP_IT_UP: string;
                        CHAT_KEEP_WALKING: string;
                        CHAT_LEAVE_ME_ALONE: string;
                        CHAT_LET_ME_SEE: string;
                        CHAT_LETS_BATTLE: string;
                        CHAT_LETS_DANCE: string;
                        CHAT_LETS_GO: string;
                        CHAT_LOCKED: string;
                        CHAT_LOOK: string;
                        CHAT_LOOK_AT_THIS: string;
                        CHAT_LOVE_IT: string;
                        CHAT_LUMA_COOL: string;
                        CHAT_LUMA_FAVOURITE: string;
                        CHAT_MADE_IT: string;
                        CHAT_MADE_TONS_OF_GOLD: string;
                        CHAT_MAKE_ME: string;
                        CHAT_MANY_THANKS: string;
                        CHAT_MAYBE: string;
                        CHAT_MEMBER_AWESOME: string;
                        CHAT_MY_FAVOURITE_IS: string;
                        CHAT_MY_FAVOURITE_ITEM_IS: string;
                        CHAT_MY_FAVOURITE_PET_IS: string;
                        CHAT_NAH: string;
                        CHAT_NEAT: string;
                        CHAT_NEVER: string;
                        CHAT_NEVER_MIND: string;
                        CHAT_NO: string;
                        CHAT_NO_CAN_DO: string;
                        CHAT_NO_WAY: string;
                        CHAT_NOT_RIGHT_NOW: string;
                        CHAT_NOT_TODAY: string;
                        CHAT_NOW: string;
                        CHAT_NOW_QUESTION: string;
                        CHAT_OKAY: string;
                        CHAT_OMINOUS: string;
                        CHAT_ONE_OF_THESE_IS: string;
                        CHAT_OVER: string;
                        CHAT_OVER_HERE: string;
                        CHAT_PARENTS_BEST: string;
                        CHAT_PARTY_TIME: string;
                        CHAT_PERHAPS: string;
                        CHAT_PRACTICE: string;
                        CHAT_PRETTY_COOL: string;
                        CHAT_PUYOY: string;
                        CHAT_QUACK_QUACK: string;
                        CHAT_QUIET: string;
                        CHAT_QUITE: string;
                        CHAT_RIBBIT: string;
                        CHAT_RIGHT: string;
                        CHAT_RIGHT_BEHIND_YOU: string;
                        CHAT_RIGHT_OVER_HERE: string;
                        CHAT_RIGHT_THERE: string;
                        CHAT_SAFE_AND_SOUND: string;
                        CHAT_SEE: string;
                        CHAT_SEE_YA: string;
                        CHAT_SEE_YOU_LATER: string;
                        CHAT_SEEMS_LIKE_IT: string;
                        CHAT_SHHH: string;
                        CHAT_SHOW_FUNNY_FACE: string;
                        CHAT_SOMEDAY: string;
                        CHAT_SOMEONE_SAID_SO: string;
                        CHAT_SORRY: string;
                        CHAT_SOUNDS_LIKE: string;
                        CHAT_TEACHER_AWESOME: string;
                        CHAT_TELL_YOU_WHAT: string;
                        CHAT_TERRIBLE: string;
                        CHAT_THANK_YOU: string;
                        CHAT_THERE_YOU_ARE: string;
                        CHAT_THINK_ABOUT_IT: string;
                        CHAT_TIDUS_COOL: string;
                        CHAT_TIDUS_FAVOURITE: string;
                        CHAT_TIME_FOR_BED: string;
                        CHAT_TIME_FOR_DINNER: string;
                        CHAT_TIME_FOR_LUNCH: string;
                        CHAT_TIME_FOR_SUPPER: string;
                        CHAT_TIME_TO_GET_UP: string;
                        CHAT_TIME_TO_GO: string;
                        CHAT_VERY_GOOD: string;
                        CHAT_WHAT: string;
                        CHAT_WHAT_DOES_FOX_SAY: string;
                        CHAT_WHATS_UP: string;
                        CHAT_WHERE: string;
                        CHAT_WHO: string;
                        CHAT_WHO_ARE_YOU: string;
                        CHAT_WHY: string;
                        CHAT_YES: string;
                        CHAT_YOLO: string;
                        CHAT_YOU_COMING: string;
                        CHAT_YOU_LOOK_COOL: string;
                        CHAT_YOU_STILL_THERE: string;
                        CHAT_YOURE_WELCOME: string;
                        CHAT_ZZZ: string;
                        CHEST_LOCKED_MESSAGE: string;
                        CHEST_OPEN_MULTI: string;
                        CHEST_OPEN_SINGLE: string;
                        CHEST_REWARD_BECOME_A_MEMBER: string;
                        CHEST_REWARD_CLAIM_YOUR_PREVIOUSLY_UNLOCKED_REWARD: string;
                        CHEST_REWARD_CLAIM_YOUR_REWARD: string;
                        CHEST_REWARD_CONGRATULATIONS: string;
                        CHEST_REWARD_DIVISION_CHEST_UNLOCKED: string;
                        CHEST_REWARD_MEMBER_CHEST_UNLOCKED: string;
                        CHEST_REWARD_YOU_BECOME_MEMBER: string;
                        CHOOSE_A_PET: string;
                        CHOOSE_EPIC_DEFAULT_FLAVOUR_TEXT: string;
                        CHOOSE_EPIC_TITLE: string;
                        CHOOSE_PET_BUTTON: string;
                        CHOOSE_SPELL_TITLE: string;
                        CLAIM: string;
                        CLASS_CODE_CONTINUE: string;
                        CLASS_CODE_CORRECT: string;
                        CLASS_CODE_ERROR: string;
                        CLASS_CODE_LEARN_MORE_BODY: string;
                        CLASS_CODE_LEARN_MORE_HEADER: string;
                        CLASS_CODE_PLAYING_AT_HOME: string;
                        CLASS_CODE_PLAYING_AT_SCHOOL: string;
                        CLASS_CODE_PROMPT_TEACHER_CLICK_0: string;
                        CLASS_CODE_PROMPT_TEACHER_CLICK_1: string;
                        CLASS_CODE_SAVED: string;
                        CLASS_CODE_SELECT_CONTENT: string;
                        CLASS_CODE_SELECT_JOIN: string;
                        CLASS_CODE_SELECT_PLAY: string;
                        CLASS_CODE_SELECT_TITLE: string;
                        CLASS_CODE_TEACHER: string;
                        CLASS_CODE_TITLE: string;
                        "CLASS_CODE-CONTENT": string;
                        CLASS_MODE_GO_BATTLE: string;
                        CLASS_MODE_LAMPLIGHT_BODY: string;
                        CLASS_MODE_LAMPLIGHT_TITLE: string;
                        CLASS_MODE_SPIN_BUTTON: string;
                        CLASS_MODE_TW: string;
                        CLASS_MODE_WOW: string;
                        CLICK_TO_ADD: string;
                        CO_OP_CORRECT_ANSWERS: string;
                        CO_OP_CRYSTAL_HEALTH_NAME: string;
                        CO_OP_GUEST_SUBTITLE: string;
                        CO_OP_GUEST_TAG: string;
                        CO_OP_HOST_START_BUTTON: string;
                        CO_OP_HOST_SUBTITLE: string;
                        CO_OP_INPUT_BLOCKED_MODAL: string;
                        CO_OP_LEAVE_TEAM: string;
                        CO_OP_MORE_TITAN_SHARDS: string;
                        CO_OP_PARTY_CELL_FRIEND: string;
                        CO_OP_PARTY_CELL_FULL: string;
                        CO_OP_PARTY_CELL_JOIN_BUTTON: string;
                        CO_OP_PARTY_CREATE_BUTTON: string;
                        CO_OP_PARTY_CREATE_SUBTITLE: string;
                        CO_OP_PARTY_CREATE_TITLE: string;
                        CO_OP_PARTY_NO_TEAMS: string;
                        CO_OP_PARTY_SELECT_SUBTITLE: string;
                        CO_OP_PARTY_SELECT_TITLE: string;
                        CO_OP_REJOIN_TEAM: string;
                        CO_OP_RESULTS_BANNER: string;
                        CO_OP_REWARDS_EARNED: string;
                        CO_OP_TEAM: string;
                        CO_OP_TITAN_HEALTH_NAME: string;
                        CODE_INCORRECT_LENGTH_ERROR: string;
                        CODE_INVALID_ERROR: string;
                        CODE_any_ERROR: string;
                        COLISEUM_BUTTON_CHALLENGE: string;
                        COLISEUM_OPPONENT_ADVENTURER_DESCRIPTION: string;
                        COLISEUM_OPPONENT_ADVENTURER_NAME: string;
                        COLISEUM_OPPONENT_ADVENTURER_TITLE: string;
                        COLISEUM_OPPONENT_BEASTMASTER_DESCRIPTION: string;
                        COLISEUM_OPPONENT_BEASTMASTER_NAME: string;
                        COLISEUM_OPPONENT_BEASTMASTER_TITLE: string;
                        COLISEUM_OPPONENT_CAROLER_DESCRIPTION: string;
                        COLISEUM_OPPONENT_CAROLER_NAME: string;
                        COLISEUM_OPPONENT_CAROLER_TITLE: string;
                        COLISEUM_OPPONENT_COPYCAT_DESCRIPTION: string;
                        COLISEUM_OPPONENT_COPYCAT_NAME: string;
                        COLISEUM_OPPONENT_COPYCAT_TITLE: string;
                        COLISEUM_OPPONENT_CURIOUS_ONE_DESCRIPTION: string;
                        COLISEUM_OPPONENT_CURIOUS_ONE_NAME: string;
                        COLISEUM_OPPONENT_CURIOUS_ONE_TITLE: string;
                        COLISEUM_OPPONENT_EMERALD_KNIGHT_DESCRIPTION: string;
                        COLISEUM_OPPONENT_EMERALD_KNIGHT_NAME: string;
                        COLISEUM_OPPONENT_EMERALD_KNIGHT_TITLE: string;
                        COLISEUM_OPPONENT_ENIGMA_DESCRIPTION: string;
                        COLISEUM_OPPONENT_ENIGMA_NAME: string;
                        COLISEUM_OPPONENT_ENIGMA_TITLE: string;
                        COLISEUM_OPPONENT_FOREST_GUARDIAN_DESCRIPTION: string;
                        COLISEUM_OPPONENT_FOREST_GUARDIAN_NAME: string;
                        COLISEUM_OPPONENT_FOREST_GUARDIAN_TITLE: string;
                        COLISEUM_OPPONENT_FOREST_SPRITE_DESCRIPTION: string;
                        COLISEUM_OPPONENT_FOREST_SPRITE_NAME: string;
                        COLISEUM_OPPONENT_FOREST_SPRITE_TITLE: string;
                        COLISEUM_OPPONENT_ICE_QUEEN_DESCRIPTION: string;
                        COLISEUM_OPPONENT_ICE_QUEEN_NAME: string;
                        COLISEUM_OPPONENT_ICE_QUEEN_TITLE: string;
                        COLISEUM_OPPONENT_LOUDMOUTH_DESCRIPTION: string;
                        COLISEUM_OPPONENT_LOUDMOUTH_NAME: string;
                        COLISEUM_OPPONENT_LOUDMOUTH_TITLE: string;
                        COLISEUM_OPPONENT_METALHEAD_DESCRIPTION: string;
                        COLISEUM_OPPONENT_METALHEAD_NAME: string;
                        COLISEUM_OPPONENT_METALHEAD_TITLE: string;
                        COLISEUM_OPPONENT_NAMELESS_DESCRIPTION: string;
                        COLISEUM_OPPONENT_NAMELESS_NAME: string;
                        COLISEUM_OPPONENT_NAMELESS_TITLE: string;
                        COLISEUM_OPPONENT_NEW_GIRL_DESCRIPTION: string;
                        COLISEUM_OPPONENT_NEW_GIRL_NAME: string;
                        COLISEUM_OPPONENT_NEW_GIRL_TITLE: string;
                        COLISEUM_OPPONENT_PET_ENTHUSIAST_DESCRIPTION: string;
                        COLISEUM_OPPONENT_PET_ENTHUSIAST_NAME: string;
                        COLISEUM_OPPONENT_PET_ENTHUSIAST_TITLE: string;
                        COLISEUM_OPPONENT_PRODIGY_DESCRIPTION: string;
                        COLISEUM_OPPONENT_PRODIGY_NAME: string;
                        COLISEUM_OPPONENT_PRODIGY_TITLE: string;
                        COLISEUM_OPPONENT_SWEETHEART_DESCRIPTION: string;
                        COLISEUM_OPPONENT_SWEETHEART_NAME: string;
                        COLISEUM_OPPONENT_SWEETHEART_TITLE: string;
                        COLISEUM_OPPONENT_TIMED_TRAVELLER_DESCRIPTION: string;
                        COLISEUM_OPPONENT_TIMED_TRAVELLER_NAME: string;
                        COLISEUM_OPPONENT_TIMED_TRAVELLER_TITLE: string;
                        COLISEUM_OPPONENT_VETERAN_DESCRIPTION: string;
                        COLISEUM_OPPONENT_VETERAN_NAME: string;
                        COLISEUM_OPPONENT_VETERAN_TITLE: string;
                        COLISEUM_OPPONENT_WELL_ROUNDED_DESCRIPTION: string;
                        COLISEUM_OPPONENT_WELL_ROUNDED_NAME: string;
                        COLISEUM_OPPONENT_WELL_ROUNDED_TITLE: string;
                        COLISEUM_PROMPT_CHALLENGE: string;
                        COLISEUM_PROMPT_REQUIRE_DEFEAT_PLURAL: string;
                        COLISEUM_PROMPT_REQUIRE_DEFEAT_SINGLE: string;
                        COLISEUM_PROMPT_REQUIRE_LEVEL: string;
                        COLISEUM_PROMPT_REQUIRE_LEVEL_DEFEAT_PLURAL: string;
                        COLISEUM_PROMPT_REQUIRE_LEVEL_DEFEAT_SINGLE: string;
                        COLISEUM_REWARD: string;
                        COLLECT_THEM_ALL: string;
                        COMBAT_ATTACK_USED: string;
                        COMBAT_BOSS_BATTLE: string;
                        COMBAT_BOSS_TIME: string;
                        COMBAT_BOUNTY_BATTLE: string;
                        COMBAT_CANT_EAT_RIGHT_NOW: string;
                        COMBAT_CAST_BONUS_HIT: string;
                        COMBAT_CATCH_CONFIRM: string;
                        COMBAT_CATCH_GOLD_MESSAGE_BODY: string;
                        COMBAT_CATCH_NON_WIZARD: string;
                        COMBAT_CATCH_TOO_MANY_MESSAGE_BODY: string;
                        COMBAT_CATCH_TOO_MUCH_HEALTH: string;
                        COMBAT_CLOUD_FIGHT: string;
                        COMBAT_DEFEAT_AMBUSHERS: string;
                        COMBAT_DEFEAT_GUARDIAN: string;
                        COMBAT_DRAW: string;
                        COMBAT_FREE_CATCH_CONFIRM: string;
                        COMBAT_LOST: string;
                        COMBAT_MINION_BATTLE: string;
                        COMBAT_PIPPET_BATTLE: string;
                        COMBAT_RAN_AWAY: string;
                        COMBAT_RUN_FAILED: string;
                        COMBAT_SAVE_EUGENE: string;
                        COMBAT_SCARY_WORM: string;
                        COMBAT_SNOWBALL_FIGHT: string;
                        COMBAT_TITAN_BATTLE: string;
                        COMBAT_TITAN_HIT: string;
                        COMBAT_TRIPTROP_TRIO: string;
                        COMBAT_WEATHER_METER: string;
                        COMBAT_WIZARD_BATTLE: string;
                        COMBAT_WON: string;
                        COMBAT_YOU: string;
                        COMING_SOON_MESSAGE: string;
                        COMMON_CORE_STATE_STANDARDS: string;
                        COMPLETE: string;
                        COMPLETE_EXCLAMATION: string;
                        CONFIRM_REPORT: string;
                        CONGRATULATIONS_CAPITAL_EXCLAMATION: string;
                        COOP_GUEST_BANNER_BODY: string;
                        COUNTDOWN_DAY_LEFT: string;
                        COUNTDOWN_DAYS_LEFT: string;
                        COUNTDOWN_HOUR_LEFT: string;
                        COUNTDOWN_HOURS_LEFT: string;
                        COUNTDOWN_MINUTE_LEFT: string;
                        COUNTDOWN_MINUTES_LEFT: string;
                        COUNTDOWN_SECOND_LEFT: string;
                        COUNTDOWN_SECONDS_LEFT: string;
                        CREATURE_IS_EVOLVING: string;
                        CREATURE_STOPPED_EVOLVING: string;
                        CREATURE_TRYING_TO_EVOLVE: string;
                        CRYSTAL_CAVERN_ASPEN_1: string;
                        CRYSTAL_CAVERN_ASPEN_10: string;
                        CRYSTAL_CAVERN_ASPEN_11: string;
                        CRYSTAL_CAVERN_ASPEN_12: string;
                        CRYSTAL_CAVERN_ASPEN_13: string;
                        CRYSTAL_CAVERN_ASPEN_14: string;
                        CRYSTAL_CAVERN_ASPEN_15: string;
                        CRYSTAL_CAVERN_ASPEN_16: string;
                        CRYSTAL_CAVERN_ASPEN_17: string;
                        CRYSTAL_CAVERN_ASPEN_18: string;
                        CRYSTAL_CAVERN_ASPEN_19: string;
                        CRYSTAL_CAVERN_ASPEN_2: string;
                        CRYSTAL_CAVERN_ASPEN_20: string;
                        CRYSTAL_CAVERN_ASPEN_3: string;
                        CRYSTAL_CAVERN_ASPEN_4: string;
                        CRYSTAL_CAVERN_ASPEN_5: string;
                        CRYSTAL_CAVERN_ASPEN_6: string;
                        CRYSTAL_CAVERN_ASPEN_7: string;
                        CRYSTAL_CAVERN_ASPEN_8: string;
                        CRYSTAL_CAVERN_ASPEN_9: string;
                        CRYSTAL_CAVERN_MINER_1: string;
                        CRYSTAL_CAVERN_MINER_2: string;
                        CRYSTAL_CAVERN_MINER_3: string;
                        CRYSTAL_CAVERN_MINER_4: string;
                        CRYSTAL_CAVERN_MINER_5: string;
                        CRYSTAL_CAVERN_MINER_6: string;
                        CRYSTAL_CAVERN_NOOT_1: string;
                        CRYSTAL_CAVERN_NOOT_10: string;
                        CRYSTAL_CAVERN_NOOT_11: string;
                        CRYSTAL_CAVERN_NOOT_12: string;
                        CRYSTAL_CAVERN_NOOT_13: string;
                        CRYSTAL_CAVERN_NOOT_14: string;
                        CRYSTAL_CAVERN_NOOT_15: string;
                        CRYSTAL_CAVERN_NOOT_16: string;
                        CRYSTAL_CAVERN_NOOT_17: string;
                        CRYSTAL_CAVERN_NOOT_18: string;
                        CRYSTAL_CAVERN_NOOT_19: string;
                        CRYSTAL_CAVERN_NOOT_2: string;
                        CRYSTAL_CAVERN_NOOT_20: string;
                        CRYSTAL_CAVERN_NOOT_3: string;
                        CRYSTAL_CAVERN_NOOT_4: string;
                        CRYSTAL_CAVERN_NOOT_5: string;
                        CRYSTAL_CAVERN_NOOT_6: string;
                        CRYSTAL_CAVERN_NOOT_7: string;
                        CRYSTAL_CAVERN_NOOT_8: string;
                        CRYSTAL_CAVERN_NOOT_9: string;
                        CRYSTAL_CAVERN_WINSTON_1: string;
                        CRYSTAL_CAVERN_WINSTON_2: string;
                        CRYSTAL_CAVERN_WINSTON_3: string;
                        CRYSTAL_CAVERN_WINSTON_4: string;
                        CRYSTAL_CAVERN_WINSTON_5: string;
                        CRYSTAL_CAVERNS_AD_BODY: string;
                        CRYSTAL_CAVERNS_AD_TITLE: string;
                        CRYSTAL_CAVERNS_ADVENTURE: string;
                        CURRENCY_BOUNTY_POINTS: string;
                        CURRENCY_GOLD_COINS: string;
                        CUTSCENE_SKIP: string;
                        DAILY_LOGIN_BONUS_TITLE: string;
                        DAILY_LOGIN_COME_BACK: string;
                        DAILY_LOGIN_DAY: string;
                        DAILY_QUESTIONS_TITLE: string;
                        DANCE_DANCE_BEST_SCORE: string;
                        DANCE_DANCE_BUTTON_BACK: string;
                        DANCE_DANCE_BUTTON_GO: string;
                        DANCE_DANCE_CHOOSE_DIFFICULTY: string;
                        DANCE_DANCE_EARNED_GEARS: string;
                        DANCE_DANCE_FAILED: string;
                        DANCE_DANCE_GET_ROBOT_0: string;
                        DANCE_DANCE_GET_ROBOT_1: string;
                        DANCE_DANCE_GET_ROBOT_2: string;
                        DANCE_DANCE_GET_ROBOT_3: string;
                        DANCE_DANCE_HIGHER_LEVEL: string;
                        DANCE_DANCE_INSTRUCTIONS_0: string;
                        DANCE_DANCE_INSTRUCTIONS_1: string;
                        DANCE_DANCE_INSTRUCTIONS_2: string;
                        DANCE_DANCE_LEVEL_UP_MAX: string;
                        DANCE_DANCE_LEVEL_UP_UNDER_10: string;
                        DANCE_DANCE_LEVEL_UP_UNDER_5: string;
                        DANCE_DANCE_LOWER_DIFFICULTY: string;
                        DANCE_DANCE_MAX_LEVEL: string;
                        DANCE_DANCE_MESSAGE_LEVEL_BODY: string;
                        DANCE_DANCE_NEW_HIGH_SCORE: string;
                        DANCE_DANCE_READY: string;
                        DANCE_DANCE_READY_TO_START: string;
                        DANCE_DANCE_REWARD: string;
                        DANCE_DANCE_SPEED_UP: string;
                        DANCE_DANCE_START: string;
                        DANCE_DANCE_SUCCESS: string;
                        DANCE_DANCE_TRY_AGAIN: string;
                        DANCE_DANCE_TRY_NEW_DIFFICULTY: string;
                        DANCE_DANCE_UH_OH: string;
                        DEFEATED_TITLE_CAPITAL: string;
                        DELETE_TEAM_BODY: string;
                        DELETE_TEAM_TITLE: string;
                        DIALOG_CONTINUE: string;
                        DIALOG_LEAVE: string;
                        DIALOG_TITLE_TRIAL_LOCKED: string;
                        DIALOGUE_ADA_ICETOWER_1: string;
                        DIALOGUE_ADA_ICETOWER_10: string;
                        DIALOGUE_ADA_ICETOWER_11: string;
                        DIALOGUE_ADA_ICETOWER_12: string;
                        DIALOGUE_ADA_ICETOWER_13: string;
                        DIALOGUE_ADA_ICETOWER_14: string;
                        DIALOGUE_ADA_ICETOWER_15: string;
                        DIALOGUE_ADA_ICETOWER_16: string;
                        DIALOGUE_ADA_ICETOWER_17: string;
                        DIALOGUE_ADA_ICETOWER_18: string;
                        DIALOGUE_ADA_ICETOWER_19: string;
                        DIALOGUE_ADA_ICETOWER_2: string;
                        DIALOGUE_ADA_ICETOWER_20: string;
                        DIALOGUE_ADA_ICETOWER_21: string;
                        DIALOGUE_ADA_ICETOWER_22: string;
                        DIALOGUE_ADA_ICETOWER_23: string;
                        DIALOGUE_ADA_ICETOWER_24: string;
                        DIALOGUE_ADA_ICETOWER_25: string;
                        DIALOGUE_ADA_ICETOWER_26: string;
                        DIALOGUE_ADA_ICETOWER_27: string;
                        DIALOGUE_ADA_ICETOWER_28: string;
                        DIALOGUE_ADA_ICETOWER_3: string;
                        DIALOGUE_ADA_ICETOWER_4: string;
                        DIALOGUE_ADA_ICETOWER_5: string;
                        DIALOGUE_ADA_ICETOWER_6: string;
                        DIALOGUE_ADA_ICETOWER_7: string;
                        DIALOGUE_ADA_ICETOWER_8: string;
                        DIALOGUE_ADA_ICETOWER_9: string;
                        DIALOGUE_ATHENA_1: string;
                        DIALOGUE_ATHENA_10: string;
                        DIALOGUE_ATHENA_11: string;
                        DIALOGUE_ATHENA_12: string;
                        DIALOGUE_ATHENA_13: string;
                        DIALOGUE_ATHENA_14: string;
                        DIALOGUE_ATHENA_15: string;
                        DIALOGUE_ATHENA_16: string;
                        DIALOGUE_ATHENA_17: string;
                        DIALOGUE_ATHENA_2: string;
                        DIALOGUE_ATHENA_3: string;
                        DIALOGUE_ATHENA_4: string;
                        DIALOGUE_ATHENA_5: string;
                        DIALOGUE_ATHENA_6: string;
                        DIALOGUE_ATHENA_7: string;
                        DIALOGUE_ATHENA_8: string;
                        DIALOGUE_ATHENA_9: string;
                        DIALOGUE_BARGO_0: string;
                        DIALOGUE_BARGO_1: string;
                        DIALOGUE_BARGO_2: string;
                        DIALOGUE_BARGO_3: string;
                        DIALOGUE_BARGO_4: string;
                        DIALOGUE_BENNI_0: string;
                        DIALOGUE_BENNI_1: string;
                        DIALOGUE_BENNI_10: string;
                        DIALOGUE_BENNI_11: string;
                        DIALOGUE_BENNI_12: string;
                        DIALOGUE_BENNI_13: string;
                        DIALOGUE_BENNI_14: string;
                        DIALOGUE_BENNI_15: string;
                        DIALOGUE_BENNI_16: string;
                        DIALOGUE_BENNI_17: string;
                        DIALOGUE_BENNI_18: string;
                        DIALOGUE_BENNI_19: string;
                        DIALOGUE_BENNI_2: string;
                        DIALOGUE_BENNI_20: string;
                        DIALOGUE_BENNI_21: string;
                        DIALOGUE_BENNI_22: string;
                        DIALOGUE_BENNI_23: string;
                        DIALOGUE_BENNI_24: string;
                        DIALOGUE_BENNI_25: string;
                        DIALOGUE_BENNI_26: string;
                        DIALOGUE_BENNI_27: string;
                        DIALOGUE_BENNI_28: string;
                        DIALOGUE_BENNI_29: string;
                        DIALOGUE_BENNI_3: string;
                        DIALOGUE_BENNI_30: string;
                        DIALOGUE_BENNI_31: string;
                        DIALOGUE_BENNI_32: string;
                        DIALOGUE_BENNI_33: string;
                        DIALOGUE_BENNI_34: string;
                        DIALOGUE_BENNI_35: string;
                        DIALOGUE_BENNI_36: string;
                        DIALOGUE_BENNI_37: string;
                        DIALOGUE_BENNI_38: string;
                        DIALOGUE_BENNI_39: string;
                        DIALOGUE_BENNI_4: string;
                        DIALOGUE_BENNI_40: string;
                        DIALOGUE_BENNI_41: string;
                        DIALOGUE_BENNI_42: string;
                        DIALOGUE_BENNI_43: string;
                        DIALOGUE_BENNI_44: string;
                        DIALOGUE_BENNI_45: string;
                        DIALOGUE_BENNI_46: string;
                        DIALOGUE_BENNI_5: string;
                        DIALOGUE_BENNI_6: string;
                        DIALOGUE_BENNI_7: string;
                        DIALOGUE_BENNI_8: string;
                        DIALOGUE_BENNI_9: string;
                        DIALOGUE_BOK_0: string;
                        DIALOGUE_BOK_1: string;
                        DIALOGUE_BOK_10: string;
                        DIALOGUE_BOK_11: string;
                        DIALOGUE_BOK_12: string;
                        DIALOGUE_BOK_13: string;
                        DIALOGUE_BOK_14: string;
                        DIALOGUE_BOK_15: string;
                        DIALOGUE_BOK_16: string;
                        DIALOGUE_BOK_17: string;
                        DIALOGUE_BOK_18: string;
                        DIALOGUE_BOK_19: string;
                        DIALOGUE_BOK_2: string;
                        DIALOGUE_BOK_20: string;
                        DIALOGUE_BOK_21: string;
                        DIALOGUE_BOK_22: string;
                        DIALOGUE_BOK_23: string;
                        DIALOGUE_BOK_24: string;
                        DIALOGUE_BOK_25: string;
                        DIALOGUE_BOK_26: string;
                        DIALOGUE_BOK_27: string;
                        DIALOGUE_BOK_28: string;
                        DIALOGUE_BOK_29: string;
                        DIALOGUE_BOK_3: string;
                        DIALOGUE_BOK_30: string;
                        DIALOGUE_BOK_31: string;
                        DIALOGUE_BOK_32: string;
                        DIALOGUE_BOK_33: string;
                        DIALOGUE_BOK_34: string;
                        DIALOGUE_BOK_35: string;
                        DIALOGUE_BOK_36: string;
                        DIALOGUE_BOK_37: string;
                        DIALOGUE_BOK_38: string;
                        DIALOGUE_BOK_39: string;
                        DIALOGUE_BOK_4: string;
                        DIALOGUE_BOK_40: string;
                        DIALOGUE_BOK_41: string;
                        DIALOGUE_BOK_42: string;
                        DIALOGUE_BOK_5: string;
                        DIALOGUE_BOK_6: string;
                        DIALOGUE_BOK_7: string;
                        DIALOGUE_BOK_8: string;
                        DIALOGUE_BOK_9: string;
                        DIALOGUE_BOOMBOX_0: string;
                        DIALOGUE_BOOMBOX_1: string;
                        DIALOGUE_BOOMBOX_2: string;
                        DIALOGUE_BOOMBOX_3: string;
                        DIALOGUE_BOOMBOX_4: string;
                        DIALOGUE_BOOMBOX_5: string;
                        DIALOGUE_BOOMBOX_6: string;
                        DIALOGUE_BOOMBOX_7: string;
                        DIALOGUE_BOOMBOX_8: string;
                        DIALOGUE_BROCCOLINA_0: string;
                        DIALOGUE_BROCCOLINA_1: string;
                        DIALOGUE_CEBOLLINI_0: string;
                        DIALOGUE_CEBOLLINI_1: string;
                        DIALOGUE_CEBOLLINI_10: string;
                        DIALOGUE_CEBOLLINI_11: string;
                        DIALOGUE_CEBOLLINI_12: string;
                        DIALOGUE_CEBOLLINI_13: string;
                        DIALOGUE_CEBOLLINI_14: string;
                        DIALOGUE_CEBOLLINI_15: string;
                        DIALOGUE_CEBOLLINI_16: string;
                        DIALOGUE_CEBOLLINI_17: string;
                        DIALOGUE_CEBOLLINI_18: string;
                        DIALOGUE_CEBOLLINI_19: string;
                        DIALOGUE_CEBOLLINI_2: string;
                        DIALOGUE_CEBOLLINI_3: string;
                        DIALOGUE_CEBOLLINI_4: string;
                        DIALOGUE_CEBOLLINI_5: string;
                        DIALOGUE_CEBOLLINI_6: string;
                        DIALOGUE_CEBOLLINI_7: string;
                        DIALOGUE_CEBOLLINI_8: string;
                        DIALOGUE_CEBOLLINI_9: string;
                        DIALOGUE_DON_ZORRO_0: string;
                        DIALOGUE_DON_ZORRO_1: string;
                        DIALOGUE_DON_ZORRO_10: string;
                        DIALOGUE_DON_ZORRO_11: string;
                        DIALOGUE_DON_ZORRO_12: string;
                        DIALOGUE_DON_ZORRO_13: string;
                        DIALOGUE_DON_ZORRO_14: string;
                        DIALOGUE_DON_ZORRO_2: string;
                        DIALOGUE_DON_ZORRO_3: string;
                        DIALOGUE_DON_ZORRO_4: string;
                        DIALOGUE_DON_ZORRO_5: string;
                        DIALOGUE_DON_ZORRO_6: string;
                        DIALOGUE_DON_ZORRO_7: string;
                        DIALOGUE_DON_ZORRO_8: string;
                        DIALOGUE_DON_ZORRO_9: string;
                        DIALOGUE_EUGENE_0: string;
                        DIALOGUE_EUGENE_1: string;
                        DIALOGUE_EUGENE_2: string;
                        DIALOGUE_EUGENE_3: string;
                        DIALOGUE_EUGENE_4: string;
                        DIALOGUE_EUGENE_5: string;
                        DIALOGUE_EUGENE_6: string;
                        DIALOGUE_EVE_0: string;
                        DIALOGUE_EVE_1: string;
                        DIALOGUE_EVE_10: string;
                        DIALOGUE_EVE_11: string;
                        DIALOGUE_EVE_12: string;
                        DIALOGUE_EVE_13: string;
                        DIALOGUE_EVE_14: string;
                        DIALOGUE_EVE_15: string;
                        DIALOGUE_EVE_16: string;
                        DIALOGUE_EVE_17: string;
                        DIALOGUE_EVE_18: string;
                        DIALOGUE_EVE_19: string;
                        DIALOGUE_EVE_2: string;
                        DIALOGUE_EVE_20: string;
                        DIALOGUE_EVE_21: string;
                        DIALOGUE_EVE_22: string;
                        DIALOGUE_EVE_23: string;
                        DIALOGUE_EVE_24: string;
                        DIALOGUE_EVE_25: string;
                        DIALOGUE_EVE_26: string;
                        DIALOGUE_EVE_27: string;
                        DIALOGUE_EVE_28: string;
                        DIALOGUE_EVE_29: string;
                        DIALOGUE_EVE_3: string;
                        DIALOGUE_EVE_30: string;
                        DIALOGUE_EVE_31: string;
                        DIALOGUE_EVE_32: string;
                        DIALOGUE_EVE_33: string;
                        DIALOGUE_EVE_34: string;
                        DIALOGUE_EVE_35: string;
                        DIALOGUE_EVE_36: string;
                        DIALOGUE_EVE_37: string;
                        DIALOGUE_EVE_38: string;
                        DIALOGUE_EVE_39: string;
                        DIALOGUE_EVE_4: string;
                        DIALOGUE_EVE_40: string;
                        DIALOGUE_EVE_41: string;
                        DIALOGUE_EVE_42: string;
                        DIALOGUE_EVE_43: string;
                        DIALOGUE_EVE_44: string;
                        DIALOGUE_EVE_45: string;
                        DIALOGUE_EVE_5: string;
                        DIALOGUE_EVE_6: string;
                        DIALOGUE_EVE_7: string;
                        DIALOGUE_EVE_8: string;
                        DIALOGUE_EVE_9: string;
                        DIALOGUE_FIRST_NAME_SELECT_NOOT_1: string;
                        DIALOGUE_FLORA_0: string;
                        DIALOGUE_FLORA_1: string;
                        DIALOGUE_FLORA_10: string;
                        DIALOGUE_FLORA_11: string;
                        DIALOGUE_FLORA_12: string;
                        DIALOGUE_FLORA_13: string;
                        DIALOGUE_FLORA_14: string;
                        DIALOGUE_FLORA_15: string;
                        DIALOGUE_FLORA_16: string;
                        DIALOGUE_FLORA_17: string;
                        DIALOGUE_FLORA_18: string;
                        DIALOGUE_FLORA_19: string;
                        DIALOGUE_FLORA_2: string;
                        DIALOGUE_FLORA_20: string;
                        DIALOGUE_FLORA_21: string;
                        DIALOGUE_FLORA_22: string;
                        DIALOGUE_FLORA_23: string;
                        DIALOGUE_FLORA_24: string;
                        DIALOGUE_FLORA_25: string;
                        DIALOGUE_FLORA_26: string;
                        DIALOGUE_FLORA_27: string;
                        DIALOGUE_FLORA_28: string;
                        DIALOGUE_FLORA_29: string;
                        DIALOGUE_FLORA_3: string;
                        DIALOGUE_FLORA_30: string;
                        DIALOGUE_FLORA_31: string;
                        DIALOGUE_FLORA_32: string;
                        DIALOGUE_FLORA_33: string;
                        DIALOGUE_FLORA_34: string;
                        DIALOGUE_FLORA_35: string;
                        DIALOGUE_FLORA_36: string;
                        DIALOGUE_FLORA_37: string;
                        DIALOGUE_FLORA_38: string;
                        DIALOGUE_FLORA_39: string;
                        DIALOGUE_FLORA_4: string;
                        DIALOGUE_FLORA_5: string;
                        DIALOGUE_FLORA_6: string;
                        DIALOGUE_FLORA_7: string;
                        DIALOGUE_FLORA_8: string;
                        DIALOGUE_FLORA_9: string;
                        DIALOGUE_FLORIAN_0: string;
                        DIALOGUE_FLORIAN_1: string;
                        DIALOGUE_FLORIAN_10: string;
                        DIALOGUE_FLORIAN_11: string;
                        DIALOGUE_FLORIAN_12: string;
                        DIALOGUE_FLORIAN_13: string;
                        DIALOGUE_FLORIAN_14: string;
                        DIALOGUE_FLORIAN_15: string;
                        DIALOGUE_FLORIAN_16: string;
                        DIALOGUE_FLORIAN_17: string;
                        DIALOGUE_FLORIAN_18: string;
                        DIALOGUE_FLORIAN_19: string;
                        DIALOGUE_FLORIAN_2: string;
                        DIALOGUE_FLORIAN_20: string;
                        DIALOGUE_FLORIAN_21: string;
                        DIALOGUE_FLORIAN_22: string;
                        DIALOGUE_FLORIAN_23: string;
                        DIALOGUE_FLORIAN_24: string;
                        DIALOGUE_FLORIAN_25: string;
                        DIALOGUE_FLORIAN_26: string;
                        DIALOGUE_FLORIAN_3: string;
                        DIALOGUE_FLORIAN_4: string;
                        DIALOGUE_FLORIAN_5: string;
                        DIALOGUE_FLORIAN_6: string;
                        DIALOGUE_FLORIAN_7: string;
                        DIALOGUE_FLORIAN_8: string;
                        DIALOGUE_FLORIAN_9: string;
                        DIALOGUE_GALE_0: string;
                        DIALOGUE_GALE_1: string;
                        DIALOGUE_GALE_10: string;
                        DIALOGUE_GALE_11: string;
                        DIALOGUE_GALE_12: string;
                        DIALOGUE_GALE_13: string;
                        DIALOGUE_GALE_14: string;
                        DIALOGUE_GALE_15: string;
                        DIALOGUE_GALE_16: string;
                        DIALOGUE_GALE_17: string;
                        DIALOGUE_GALE_2: string;
                        DIALOGUE_GALE_3: string;
                        DIALOGUE_GALE_4: string;
                        DIALOGUE_GALE_5: string;
                        DIALOGUE_GALE_6: string;
                        DIALOGUE_GALE_7: string;
                        DIALOGUE_GALE_8: string;
                        DIALOGUE_GALE_9: string;
                        DIALOGUE_HARRIET_0: string;
                        DIALOGUE_HARRIET_1: string;
                        DIALOGUE_HARRIET_10: string;
                        DIALOGUE_HARRIET_11: string;
                        DIALOGUE_HARRIET_12: string;
                        DIALOGUE_HARRIET_2: string;
                        DIALOGUE_HARRIET_3: string;
                        DIALOGUE_HARRIET_4: string;
                        DIALOGUE_HARRIET_5: string;
                        DIALOGUE_HARRIET_6: string;
                        DIALOGUE_HARRIET_7: string;
                        DIALOGUE_HARRIET_8: string;
                        DIALOGUE_HARRIET_9: string;
                        DIALOGUE_HARVEY_0: string;
                        DIALOGUE_HARVEY_1: string;
                        DIALOGUE_HARVEY_2: string;
                        DIALOGUE_HARVEY_3: string;
                        DIALOGUE_HARVEY_4: string;
                        DIALOGUE_HARVEY_5: string;
                        DIALOGUE_HARVEY_6: string;
                        DIALOGUE_HOWARD_CORNELIUS_0: string;
                        DIALOGUE_HOWARD_CORNELIUS_1: string;
                        DIALOGUE_HOWARD_CORNELIUS_2: string;
                        DIALOGUE_HOWARD_CORNELIUS_3: string;
                        DIALOGUE_HOWARD_CORNELIUS_4: string;
                        DIALOGUE_HOWARD_CORNELIUS_5: string;
                        DIALOGUE_JELLY_JIM_0: string;
                        DIALOGUE_JELLY_JIM_1: string;
                        DIALOGUE_JELLY_JIM_2: string;
                        DIALOGUE_JELLY_JIM_3: string;
                        DIALOGUE_JELLY_JIM_4: string;
                        DIALOGUE_JELLY_JIM_5: string;
                        DIALOGUE_JELLY_JIM_6: string;
                        DIALOGUE_JELLY_JIM_7: string;
                        DIALOGUE_JULIA_GHOULIA_0: string;
                        DIALOGUE_JULIA_GHOULIA_1: string;
                        DIALOGUE_JULIA_GHOULIA_2: string;
                        DIALOGUE_JULIA_GHOULIA_3: string;
                        DIALOGUE_JULIA_GHOULIA_4: string;
                        DIALOGUE_JULIA_GHOULIA_5: string;
                        DIALOGUE_KANDI_KORN_1: string;
                        DIALOGUE_KANDI_KORN_2: string;
                        DIALOGUE_KANDI_KORN_3: string;
                        DIALOGUE_KANDI_KORN_4: string;
                        DIALOGUE_KANDI_KORN_5: string;
                        DIALOGUE_KANDI_KORN_6: string;
                        DIALOGUE_KOI_1: string;
                        DIALOGUE_KOI_10: string;
                        DIALOGUE_KOI_11: string;
                        DIALOGUE_KOI_2: string;
                        DIALOGUE_KOI_3: string;
                        DIALOGUE_KOI_4: string;
                        DIALOGUE_KOI_5: string;
                        DIALOGUE_KOI_6: string;
                        DIALOGUE_KOI_7: string;
                        DIALOGUE_KOI_8: string;
                        DIALOGUE_KOI_9: string;
                        DIALOGUE_MAMA_STAR_0: string;
                        DIALOGUE_MAMA_STAR_1: string;
                        DIALOGUE_MAMA_STAR_10: string;
                        DIALOGUE_MAMA_STAR_11: string;
                        DIALOGUE_MAMA_STAR_12: string;
                        DIALOGUE_MAMA_STAR_13: string;
                        DIALOGUE_MAMA_STAR_14: string;
                        DIALOGUE_MAMA_STAR_15: string;
                        DIALOGUE_MAMA_STAR_16: string;
                        DIALOGUE_MAMA_STAR_2: string;
                        DIALOGUE_MAMA_STAR_3: string;
                        DIALOGUE_MAMA_STAR_4: string;
                        DIALOGUE_MAMA_STAR_5: string;
                        DIALOGUE_MAMA_STAR_6: string;
                        DIALOGUE_MAMA_STAR_7: string;
                        DIALOGUE_MAMA_STAR_8: string;
                        DIALOGUE_MAMA_STAR_9: string;
                        DIALOGUE_MERCHANT_0: string;
                        DIALOGUE_MERCHANT_1: string;
                        DIALOGUE_MERCHANT_10: string;
                        DIALOGUE_MERCHANT_11: string;
                        DIALOGUE_MERCHANT_12: string;
                        DIALOGUE_MERCHANT_13: string;
                        DIALOGUE_MERCHANT_14: string;
                        DIALOGUE_MERCHANT_15: string;
                        DIALOGUE_MERCHANT_16: string;
                        DIALOGUE_MERCHANT_17: string;
                        DIALOGUE_MERCHANT_18: string;
                        DIALOGUE_MERCHANT_19: string;
                        DIALOGUE_MERCHANT_2: string;
                        DIALOGUE_MERCHANT_20: string;
                        DIALOGUE_MERCHANT_21: string;
                        DIALOGUE_MERCHANT_22: string;
                        DIALOGUE_MERCHANT_23: string;
                        DIALOGUE_MERCHANT_24: string;
                        DIALOGUE_MERCHANT_25: string;
                        DIALOGUE_MERCHANT_26: string;
                        DIALOGUE_MERCHANT_27: string;
                        DIALOGUE_MERCHANT_28: string;
                        DIALOGUE_MERCHANT_29: string;
                        DIALOGUE_MERCHANT_3: string;
                        DIALOGUE_MERCHANT_30: string;
                        DIALOGUE_MERCHANT_31: string;
                        DIALOGUE_MERCHANT_32: string;
                        DIALOGUE_MERCHANT_33: string;
                        DIALOGUE_MERCHANT_34: string;
                        DIALOGUE_MERCHANT_35: string;
                        DIALOGUE_MERCHANT_36: string;
                        DIALOGUE_MERCHANT_37: string;
                        DIALOGUE_MERCHANT_38: string;
                        DIALOGUE_MERCHANT_39: string;
                        DIALOGUE_MERCHANT_4: string;
                        DIALOGUE_MERCHANT_5: string;
                        DIALOGUE_MERCHANT_6: string;
                        DIALOGUE_MERCHANT_7: string;
                        DIALOGUE_MERCHANT_8: string;
                        DIALOGUE_MERCHANT_9: string;
                        DIALOGUE_MIRA_0: string;
                        DIALOGUE_MIRA_1: string;
                        DIALOGUE_MIRA_10: string;
                        DIALOGUE_MIRA_11: string;
                        DIALOGUE_MIRA_12: string;
                        DIALOGUE_MIRA_13: string;
                        DIALOGUE_MIRA_14: string;
                        DIALOGUE_MIRA_15: string;
                        DIALOGUE_MIRA_16: string;
                        DIALOGUE_MIRA_17: string;
                        DIALOGUE_MIRA_18: string;
                        DIALOGUE_MIRA_19: string;
                        DIALOGUE_MIRA_2: string;
                        DIALOGUE_MIRA_20: string;
                        DIALOGUE_MIRA_21: string;
                        DIALOGUE_MIRA_22: string;
                        DIALOGUE_MIRA_23: string;
                        DIALOGUE_MIRA_24: string;
                        DIALOGUE_MIRA_25: string;
                        DIALOGUE_MIRA_26: string;
                        DIALOGUE_MIRA_27: string;
                        DIALOGUE_MIRA_28: string;
                        DIALOGUE_MIRA_29: string;
                        DIALOGUE_MIRA_3: string;
                        DIALOGUE_MIRA_30: string;
                        DIALOGUE_MIRA_31: string;
                        DIALOGUE_MIRA_32: string;
                        DIALOGUE_MIRA_33: string;
                        DIALOGUE_MIRA_34: string;
                        DIALOGUE_MIRA_35: string;
                        DIALOGUE_MIRA_36: string;
                        DIALOGUE_MIRA_37: string;
                        DIALOGUE_MIRA_38: string;
                        DIALOGUE_MIRA_39: string;
                        DIALOGUE_MIRA_4: string;
                        DIALOGUE_MIRA_40: string;
                        DIALOGUE_MIRA_41: string;
                        DIALOGUE_MIRA_42: string;
                        DIALOGUE_MIRA_43: string;
                        DIALOGUE_MIRA_44: string;
                        DIALOGUE_MIRA_45: string;
                        DIALOGUE_MIRA_46: string;
                        DIALOGUE_MIRA_47: string;
                        DIALOGUE_MIRA_5: string;
                        DIALOGUE_MIRA_6: string;
                        DIALOGUE_MIRA_7: string;
                        DIALOGUE_MIRA_8: string;
                        DIALOGUE_MIRA_9: string;
                        DIALOGUE_MIRA_DEFEAT_0: string;
                        DIALOGUE_MIRA_DEFEAT_1: string;
                        DIALOGUE_MIRA_DEFEAT_2: string;
                        DIALOGUE_MIRA_DEFEAT_3: string;
                        DIALOGUE_MIRA_DEFEAT_4: string;
                        DIALOGUE_MIRA_REWARD: string;
                        DIALOGUE_MIST_1: string;
                        DIALOGUE_MIST_2: string;
                        DIALOGUE_MIST_3: string;
                        DIALOGUE_MIST_4: string;
                        DIALOGUE_MIST_5: string;
                        DIALOGUE_MIZU_1: string;
                        DIALOGUE_MIZU_2: string;
                        DIALOGUE_MIZU_3: string;
                        DIALOGUE_MIZU_4: string;
                        DIALOGUE_MIZU_5: string;
                        DIALOGUE_MOZZA_ELLE_0: string;
                        DIALOGUE_MOZZA_ELLE_1: string;
                        DIALOGUE_MOZZA_ELLE_10: string;
                        DIALOGUE_MOZZA_ELLE_11: string;
                        DIALOGUE_MOZZA_ELLE_2: string;
                        DIALOGUE_MOZZA_ELLE_3: string;
                        DIALOGUE_MOZZA_ELLE_4: string;
                        DIALOGUE_MOZZA_ELLE_5: string;
                        DIALOGUE_MOZZA_ELLE_6: string;
                        DIALOGUE_MOZZA_ELLE_7: string;
                        DIALOGUE_MOZZA_ELLE_8: string;
                        DIALOGUE_MOZZA_ELLE_9: string;
                        DIALOGUE_NOOT_0: string;
                        DIALOGUE_NOOT_1: string;
                        DIALOGUE_NOOT_10: string;
                        DIALOGUE_NOOT_100: string;
                        DIALOGUE_NOOT_101: string;
                        DIALOGUE_NOOT_102: string;
                        DIALOGUE_NOOT_103: string;
                        DIALOGUE_NOOT_104: string;
                        DIALOGUE_NOOT_105: string;
                        DIALOGUE_NOOT_106: string;
                        DIALOGUE_NOOT_107: string;
                        DIALOGUE_NOOT_108: string;
                        DIALOGUE_NOOT_109: string;
                        DIALOGUE_NOOT_11: string;
                        DIALOGUE_NOOT_110: string;
                        DIALOGUE_NOOT_111: string;
                        DIALOGUE_NOOT_112: string;
                        DIALOGUE_NOOT_113: string;
                        DIALOGUE_NOOT_114: string;
                        DIALOGUE_NOOT_115: string;
                        DIALOGUE_NOOT_116: string;
                        DIALOGUE_NOOT_117: string;
                        DIALOGUE_NOOT_118: string;
                        DIALOGUE_NOOT_119: string;
                        DIALOGUE_NOOT_12: string;
                        DIALOGUE_NOOT_120: string;
                        DIALOGUE_NOOT_121: string;
                        DIALOGUE_NOOT_122: string;
                        DIALOGUE_NOOT_123: string;
                        DIALOGUE_NOOT_124: string;
                        DIALOGUE_NOOT_125: string;
                        DIALOGUE_NOOT_126: string;
                        DIALOGUE_NOOT_127: string;
                        DIALOGUE_NOOT_128: string;
                        DIALOGUE_NOOT_129: string;
                        DIALOGUE_NOOT_13: string;
                        DIALOGUE_NOOT_130: string;
                        DIALOGUE_NOOT_131: string;
                        DIALOGUE_NOOT_132: string;
                        DIALOGUE_NOOT_133: string;
                        DIALOGUE_NOOT_134: string;
                        DIALOGUE_NOOT_135: string;
                        DIALOGUE_NOOT_136: string;
                        DIALOGUE_NOOT_137: string;
                        DIALOGUE_NOOT_138: string;
                        DIALOGUE_NOOT_139: string;
                        DIALOGUE_NOOT_14: string;
                        DIALOGUE_NOOT_140: string;
                        DIALOGUE_NOOT_141: string;
                        DIALOGUE_NOOT_142: string;
                        DIALOGUE_NOOT_143: string;
                        DIALOGUE_NOOT_144: string;
                        DIALOGUE_NOOT_145: string;
                        DIALOGUE_NOOT_146: string;
                        DIALOGUE_NOOT_147: string;
                        DIALOGUE_NOOT_148: string;
                        DIALOGUE_NOOT_149: string;
                        DIALOGUE_NOOT_15: string;
                        DIALOGUE_NOOT_150: string;
                        DIALOGUE_NOOT_151: string;
                        DIALOGUE_NOOT_152: string;
                        DIALOGUE_NOOT_153: string;
                        DIALOGUE_NOOT_154: string;
                        DIALOGUE_NOOT_155: string;
                        DIALOGUE_NOOT_156: string;
                        DIALOGUE_NOOT_157: string;
                        DIALOGUE_NOOT_158: string;
                        DIALOGUE_NOOT_159: string;
                        DIALOGUE_NOOT_16: string;
                        DIALOGUE_NOOT_160: string;
                        DIALOGUE_NOOT_161: string;
                        DIALOGUE_NOOT_162: string;
                        DIALOGUE_NOOT_163: string;
                        DIALOGUE_NOOT_164: string;
                        DIALOGUE_NOOT_165: string;
                        DIALOGUE_NOOT_166: string;
                        DIALOGUE_NOOT_167: string;
                        DIALOGUE_NOOT_168: string;
                        DIALOGUE_NOOT_169: string;
                        DIALOGUE_NOOT_17: string;
                        DIALOGUE_NOOT_170: string;
                        DIALOGUE_NOOT_171: string;
                        DIALOGUE_NOOT_172: string;
                        DIALOGUE_NOOT_173: string;
                        DIALOGUE_NOOT_174: string;
                        DIALOGUE_NOOT_175: string;
                        DIALOGUE_NOOT_176: string;
                        DIALOGUE_NOOT_177: string;
                        DIALOGUE_NOOT_178: string;
                        DIALOGUE_NOOT_179: string;
                        DIALOGUE_NOOT_18: string;
                        DIALOGUE_NOOT_180: string;
                        DIALOGUE_NOOT_181: string;
                        DIALOGUE_NOOT_182: string;
                        DIALOGUE_NOOT_183: string;
                        DIALOGUE_NOOT_184: string;
                        DIALOGUE_NOOT_185: string;
                        DIALOGUE_NOOT_186: string;
                        DIALOGUE_NOOT_187: string;
                        DIALOGUE_NOOT_188: string;
                        DIALOGUE_NOOT_189: string;
                        DIALOGUE_NOOT_19: string;
                        DIALOGUE_NOOT_190: string;
                        DIALOGUE_NOOT_191: string;
                        DIALOGUE_NOOT_192: string;
                        DIALOGUE_NOOT_193: string;
                        DIALOGUE_NOOT_194: string;
                        DIALOGUE_NOOT_195: string;
                        DIALOGUE_NOOT_196: string;
                        DIALOGUE_NOOT_197: string;
                        DIALOGUE_NOOT_198: string;
                        DIALOGUE_NOOT_199: string;
                        DIALOGUE_NOOT_2: string;
                        DIALOGUE_NOOT_20: string;
                        DIALOGUE_NOOT_200: string;
                        DIALOGUE_NOOT_201: string;
                        DIALOGUE_NOOT_202: string;
                        DIALOGUE_NOOT_203: string;
                        DIALOGUE_NOOT_204: string;
                        DIALOGUE_NOOT_205: string;
                        DIALOGUE_NOOT_206: string;
                        DIALOGUE_NOOT_207: string;
                        DIALOGUE_NOOT_208: string;
                        DIALOGUE_NOOT_209: string;
                        DIALOGUE_NOOT_21: string;
                        DIALOGUE_NOOT_210: string;
                        DIALOGUE_NOOT_211: string;
                        DIALOGUE_NOOT_212: string;
                        DIALOGUE_NOOT_213: string;
                        DIALOGUE_NOOT_214: string;
                        DIALOGUE_NOOT_215: string;
                        DIALOGUE_NOOT_216: string;
                        DIALOGUE_NOOT_217: string;
                        DIALOGUE_NOOT_218: string;
                        DIALOGUE_NOOT_219: string;
                        DIALOGUE_NOOT_22: string;
                        DIALOGUE_NOOT_220: string;
                        DIALOGUE_NOOT_221: string;
                        DIALOGUE_NOOT_222: string;
                        DIALOGUE_NOOT_223: string;
                        DIALOGUE_NOOT_224: string;
                        DIALOGUE_NOOT_225: string;
                        DIALOGUE_NOOT_226: string;
                        DIALOGUE_NOOT_227: string;
                        DIALOGUE_NOOT_228: string;
                        DIALOGUE_NOOT_229: string;
                        DIALOGUE_NOOT_23: string;
                        DIALOGUE_NOOT_230: string;
                        DIALOGUE_NOOT_231: string;
                        DIALOGUE_NOOT_232: string;
                        DIALOGUE_NOOT_233: string;
                        DIALOGUE_NOOT_234: string;
                        DIALOGUE_NOOT_235: string;
                        DIALOGUE_NOOT_236: string;
                        DIALOGUE_NOOT_237: string;
                        DIALOGUE_NOOT_238: string;
                        DIALOGUE_NOOT_239: string;
                        DIALOGUE_NOOT_24: string;
                        DIALOGUE_NOOT_240: string;
                        DIALOGUE_NOOT_241: string;
                        DIALOGUE_NOOT_242: string;
                        DIALOGUE_NOOT_243: string;
                        DIALOGUE_NOOT_244: string;
                        DIALOGUE_NOOT_245: string;
                        DIALOGUE_NOOT_246: string;
                        DIALOGUE_NOOT_247: string;
                        DIALOGUE_NOOT_248: string;
                        DIALOGUE_NOOT_249: string;
                        DIALOGUE_NOOT_25: string;
                        DIALOGUE_NOOT_250: string;
                        DIALOGUE_NOOT_251: string;
                        DIALOGUE_NOOT_252: string;
                        DIALOGUE_NOOT_253: string;
                        DIALOGUE_NOOT_254: string;
                        DIALOGUE_NOOT_255: string;
                        DIALOGUE_NOOT_256: string;
                        DIALOGUE_NOOT_257: string;
                        DIALOGUE_NOOT_258: string;
                        DIALOGUE_NOOT_259: string;
                        DIALOGUE_NOOT_26: string;
                        DIALOGUE_NOOT_260: string;
                        DIALOGUE_NOOT_261: string;
                        DIALOGUE_NOOT_262: string;
                        DIALOGUE_NOOT_263: string;
                        DIALOGUE_NOOT_264: string;
                        DIALOGUE_NOOT_265: string;
                        DIALOGUE_NOOT_266: string;
                        DIALOGUE_NOOT_267: string;
                        DIALOGUE_NOOT_268: string;
                        DIALOGUE_NOOT_269: string;
                        DIALOGUE_NOOT_27: string;
                        DIALOGUE_NOOT_270: string;
                        DIALOGUE_NOOT_271: string;
                        DIALOGUE_NOOT_272: string;
                        DIALOGUE_NOOT_273: string;
                        DIALOGUE_NOOT_274: string;
                        DIALOGUE_NOOT_275: string;
                        DIALOGUE_NOOT_276: string;
                        DIALOGUE_NOOT_277: string;
                        DIALOGUE_NOOT_278: string;
                        DIALOGUE_NOOT_279: string;
                        DIALOGUE_NOOT_28: string;
                        DIALOGUE_NOOT_280: string;
                        DIALOGUE_NOOT_281: string;
                        DIALOGUE_NOOT_282: string;
                        DIALOGUE_NOOT_283: string;
                        DIALOGUE_NOOT_284: string;
                        DIALOGUE_NOOT_285: string;
                        DIALOGUE_NOOT_286: string;
                        DIALOGUE_NOOT_287: string;
                        DIALOGUE_NOOT_288: string;
                        DIALOGUE_NOOT_289: string;
                        DIALOGUE_NOOT_29: string;
                        DIALOGUE_NOOT_3: string;
                        DIALOGUE_NOOT_30: string;
                        DIALOGUE_NOOT_31: string;
                        DIALOGUE_NOOT_32: string;
                        DIALOGUE_NOOT_33: string;
                        DIALOGUE_NOOT_34: string;
                        DIALOGUE_NOOT_35: string;
                        DIALOGUE_NOOT_36: string;
                        DIALOGUE_NOOT_37: string;
                        DIALOGUE_NOOT_38: string;
                        DIALOGUE_NOOT_39: string;
                        DIALOGUE_NOOT_4: string;
                        DIALOGUE_NOOT_40: string;
                        DIALOGUE_NOOT_41: string;
                        DIALOGUE_NOOT_42: string;
                        DIALOGUE_NOOT_43: string;
                        DIALOGUE_NOOT_44: string;
                        DIALOGUE_NOOT_45: string;
                        DIALOGUE_NOOT_46: string;
                        DIALOGUE_NOOT_47: string;
                        DIALOGUE_NOOT_48: string;
                        DIALOGUE_NOOT_49: string;
                        DIALOGUE_NOOT_5: string;
                        DIALOGUE_NOOT_50: string;
                        DIALOGUE_NOOT_51: string;
                        DIALOGUE_NOOT_52: string;
                        DIALOGUE_NOOT_53: string;
                        DIALOGUE_NOOT_54: string;
                        DIALOGUE_NOOT_55: string;
                        DIALOGUE_NOOT_56: string;
                        DIALOGUE_NOOT_57: string;
                        DIALOGUE_NOOT_58: string;
                        DIALOGUE_NOOT_59: string;
                        DIALOGUE_NOOT_6: string;
                        DIALOGUE_NOOT_60: string;
                        DIALOGUE_NOOT_61: string;
                        DIALOGUE_NOOT_62: string;
                        DIALOGUE_NOOT_63: string;
                        DIALOGUE_NOOT_64: string;
                        DIALOGUE_NOOT_65: string;
                        DIALOGUE_NOOT_66: string;
                        DIALOGUE_NOOT_67: string;
                        DIALOGUE_NOOT_68: string;
                        DIALOGUE_NOOT_69: string;
                        DIALOGUE_NOOT_7: string;
                        DIALOGUE_NOOT_70: string;
                        DIALOGUE_NOOT_71: string;
                        DIALOGUE_NOOT_72: string;
                        DIALOGUE_NOOT_73: string;
                        DIALOGUE_NOOT_74: string;
                        DIALOGUE_NOOT_75: string;
                        DIALOGUE_NOOT_76: string;
                        DIALOGUE_NOOT_77: string;
                        DIALOGUE_NOOT_78: string;
                        DIALOGUE_NOOT_79: string;
                        DIALOGUE_NOOT_8: string;
                        DIALOGUE_NOOT_80: string;
                        DIALOGUE_NOOT_81: string;
                        DIALOGUE_NOOT_82: string;
                        DIALOGUE_NOOT_83: string;
                        DIALOGUE_NOOT_84: string;
                        DIALOGUE_NOOT_85: string;
                        DIALOGUE_NOOT_86: string;
                        DIALOGUE_NOOT_87: string;
                        DIALOGUE_NOOT_88: string;
                        DIALOGUE_NOOT_89: string;
                        DIALOGUE_NOOT_9: string;
                        DIALOGUE_NOOT_90: string;
                        DIALOGUE_NOOT_91: string;
                        DIALOGUE_NOOT_92: string;
                        DIALOGUE_NOOT_93: string;
                        DIALOGUE_NOOT_94: string;
                        DIALOGUE_NOOT_95: string;
                        DIALOGUE_NOOT_96: string;
                        DIALOGUE_NOOT_97: string;
                        DIALOGUE_NOOT_98: string;
                        DIALOGUE_NOOT_99: string;
                        DIALOGUE_NOOT_FTUE_EVOLUTION: string;
                        DIALOGUE_NOOT_ICETOWER_1: string;
                        DIALOGUE_NOOT_ICETOWER_10: string;
                        DIALOGUE_NOOT_ICETOWER_11: string;
                        DIALOGUE_NOOT_ICETOWER_12: string;
                        DIALOGUE_NOOT_ICETOWER_13: string;
                        DIALOGUE_NOOT_ICETOWER_14: string;
                        DIALOGUE_NOOT_ICETOWER_15: string;
                        DIALOGUE_NOOT_ICETOWER_16: string;
                        DIALOGUE_NOOT_ICETOWER_17: string;
                        DIALOGUE_NOOT_ICETOWER_18: string;
                        DIALOGUE_NOOT_ICETOWER_19: string;
                        DIALOGUE_NOOT_ICETOWER_2: string;
                        DIALOGUE_NOOT_ICETOWER_20: string;
                        DIALOGUE_NOOT_ICETOWER_21: string;
                        DIALOGUE_NOOT_ICETOWER_22: string;
                        DIALOGUE_NOOT_ICETOWER_23: string;
                        DIALOGUE_NOOT_ICETOWER_3: string;
                        DIALOGUE_NOOT_ICETOWER_4: string;
                        DIALOGUE_NOOT_ICETOWER_5: string;
                        DIALOGUE_NOOT_ICETOWER_6: string;
                        DIALOGUE_NOOT_ICETOWER_7: string;
                        DIALOGUE_NOOT_ICETOWER_8: string;
                        DIALOGUE_NOOT_ICETOWER_9: string;
                        DIALOGUE_NOOT_SHIVERCHILL_1: string;
                        DIALOGUE_NOOT_SHIVERCHILL_2: string;
                        DIALOGUE_NOOT_SHIVERCHILL_3: string;
                        DIALOGUE_NOOT_SHIVERCHILL_4: string;
                        DIALOGUE_NOOT_ULTIMATE_TAMING_LOSS_1: string;
                        DIALOGUE_PIPPIT_0: string;
                        DIALOGUE_PIPPIT_1: string;
                        DIALOGUE_PIPPIT_2: string;
                        DIALOGUE_PIPPIT_3: string;
                        DIALOGUE_PIPPIT_4: string;
                        DIALOGUE_PIPPIT_5: string;
                        DIALOGUE_PIPPIT_6: string;
                        DIALOGUE_PIPPIT_7: string;
                        DIALOGUE_PIPPIT_8: string;
                        DIALOGUE_PIPPIT_9: string;
                        DIALOGUE_POTION_0: string;
                        DIALOGUE_POTION_1: string;
                        DIALOGUE_POTION_2: string;
                        DIALOGUE_POTION_3: string;
                        DIALOGUE_POTION_4: string;
                        DIALOGUE_POTION_5: string;
                        DIALOGUE_POTION_6: string;
                        DIALOGUE_POTION_7: string;
                        DIALOGUE_PROFESSOR_SCOOG_0: string;
                        DIALOGUE_PROFESSOR_SCOOG_1: string;
                        DIALOGUE_PROFESSOR_SCOOG_10: string;
                        DIALOGUE_PROFESSOR_SCOOG_11: string;
                        DIALOGUE_PROFESSOR_SCOOG_12: string;
                        DIALOGUE_PROFESSOR_SCOOG_13: string;
                        DIALOGUE_PROFESSOR_SCOOG_14: string;
                        DIALOGUE_PROFESSOR_SCOOG_15: string;
                        DIALOGUE_PROFESSOR_SCOOG_16: string;
                        DIALOGUE_PROFESSOR_SCOOG_17: string;
                        DIALOGUE_PROFESSOR_SCOOG_18: string;
                        DIALOGUE_PROFESSOR_SCOOG_19: string;
                        DIALOGUE_PROFESSOR_SCOOG_2: string;
                        DIALOGUE_PROFESSOR_SCOOG_20: string;
                        DIALOGUE_PROFESSOR_SCOOG_21: string;
                        DIALOGUE_PROFESSOR_SCOOG_22: string;
                        DIALOGUE_PROFESSOR_SCOOG_23: string;
                        DIALOGUE_PROFESSOR_SCOOG_24: string;
                        DIALOGUE_PROFESSOR_SCOOG_25: string;
                        DIALOGUE_PROFESSOR_SCOOG_26: string;
                        DIALOGUE_PROFESSOR_SCOOG_27: string;
                        DIALOGUE_PROFESSOR_SCOOG_28: string;
                        DIALOGUE_PROFESSOR_SCOOG_29: string;
                        DIALOGUE_PROFESSOR_SCOOG_3: string;
                        DIALOGUE_PROFESSOR_SCOOG_30: string;
                        DIALOGUE_PROFESSOR_SCOOG_31: string;
                        DIALOGUE_PROFESSOR_SCOOG_32: string;
                        DIALOGUE_PROFESSOR_SCOOG_33: string;
                        DIALOGUE_PROFESSOR_SCOOG_34: string;
                        DIALOGUE_PROFESSOR_SCOOG_35: string;
                        DIALOGUE_PROFESSOR_SCOOG_36: string;
                        DIALOGUE_PROFESSOR_SCOOG_37: string;
                        DIALOGUE_PROFESSOR_SCOOG_38: string;
                        DIALOGUE_PROFESSOR_SCOOG_39: string;
                        DIALOGUE_PROFESSOR_SCOOG_4: string;
                        DIALOGUE_PROFESSOR_SCOOG_40: string;
                        DIALOGUE_PROFESSOR_SCOOG_41: string;
                        DIALOGUE_PROFESSOR_SCOOG_42: string;
                        DIALOGUE_PROFESSOR_SCOOG_43: string;
                        DIALOGUE_PROFESSOR_SCOOG_44: string;
                        DIALOGUE_PROFESSOR_SCOOG_45: string;
                        DIALOGUE_PROFESSOR_SCOOG_46: string;
                        DIALOGUE_PROFESSOR_SCOOG_47: string;
                        DIALOGUE_PROFESSOR_SCOOG_48: string;
                        DIALOGUE_PROFESSOR_SCOOG_49: string;
                        DIALOGUE_PROFESSOR_SCOOG_5: string;
                        DIALOGUE_PROFESSOR_SCOOG_50: string;
                        DIALOGUE_PROFESSOR_SCOOG_51: string;
                        DIALOGUE_PROFESSOR_SCOOG_52: string;
                        DIALOGUE_PROFESSOR_SCOOG_53: string;
                        DIALOGUE_PROFESSOR_SCOOG_54: string;
                        DIALOGUE_PROFESSOR_SCOOG_55: string;
                        DIALOGUE_PROFESSOR_SCOOG_56: string;
                        DIALOGUE_PROFESSOR_SCOOG_57: string;
                        DIALOGUE_PROFESSOR_SCOOG_58: string;
                        DIALOGUE_PROFESSOR_SCOOG_59: string;
                        DIALOGUE_PROFESSOR_SCOOG_6: string;
                        DIALOGUE_PROFESSOR_SCOOG_60: string;
                        DIALOGUE_PROFESSOR_SCOOG_61: string;
                        DIALOGUE_PROFESSOR_SCOOG_62: string;
                        DIALOGUE_PROFESSOR_SCOOG_7: string;
                        DIALOGUE_PROFESSOR_SCOOG_8: string;
                        DIALOGUE_PROFESSOR_SCOOG_9: string;
                        DIALOGUE_PUPPET_MASTER_0: string;
                        DIALOGUE_PUPPET_MASTER_1: string;
                        DIALOGUE_PUPPET_MASTER_10: string;
                        DIALOGUE_PUPPET_MASTER_11: string;
                        DIALOGUE_PUPPET_MASTER_12: string;
                        DIALOGUE_PUPPET_MASTER_13: string;
                        DIALOGUE_PUPPET_MASTER_14: string;
                        DIALOGUE_PUPPET_MASTER_2: string;
                        DIALOGUE_PUPPET_MASTER_3: string;
                        DIALOGUE_PUPPET_MASTER_4: string;
                        DIALOGUE_PUPPET_MASTER_5: string;
                        DIALOGUE_PUPPET_MASTER_6: string;
                        DIALOGUE_PUPPET_MASTER_7: string;
                        DIALOGUE_PUPPET_MASTER_8: string;
                        DIALOGUE_PUPPET_MASTER_9: string;
                        DIALOGUE_SIR_VEY_0: string;
                        DIALOGUE_SIR_VEY_1: string;
                        DIALOGUE_SLIME_GUARD_0: string;
                        DIALOGUE_SLIME_GUARD_1: string;
                        DIALOGUE_SLIME_GUARD_2: string;
                        DIALOGUE_SLIME_GUARD_3: string;
                        DIALOGUE_SLIME_GUARD_4: string;
                        DIALOGUE_SLIME_GUARD_5: string;
                        DIALOGUE_SLIME_QUEEN_0: string;
                        DIALOGUE_SLIME_QUEEN_1: string;
                        DIALOGUE_SLIME_QUEEN_10: string;
                        DIALOGUE_SLIME_QUEEN_2: string;
                        DIALOGUE_SLIME_QUEEN_3: string;
                        DIALOGUE_SLIME_QUEEN_4: string;
                        DIALOGUE_SLIME_QUEEN_5: string;
                        DIALOGUE_SLIME_QUEEN_6: string;
                        DIALOGUE_SLIME_QUEEN_7: string;
                        DIALOGUE_SLIME_QUEEN_8: string;
                        DIALOGUE_SLIME_QUEEN_9: string;
                        DIALOGUE_SLIME_WORKER_0: string;
                        DIALOGUE_SLIME_WORKER_1: string;
                        DIALOGUE_SLURPY_0: string;
                        DIALOGUE_SLURPY_1: string;
                        DIALOGUE_SLURPY_10: string;
                        DIALOGUE_SLURPY_11: string;
                        DIALOGUE_SLURPY_12: string;
                        DIALOGUE_SLURPY_13: string;
                        DIALOGUE_SLURPY_14: string;
                        DIALOGUE_SLURPY_15: string;
                        DIALOGUE_SLURPY_16: string;
                        DIALOGUE_SLURPY_17: string;
                        DIALOGUE_SLURPY_18: string;
                        DIALOGUE_SLURPY_19: string;
                        DIALOGUE_SLURPY_2: string;
                        DIALOGUE_SLURPY_20: string;
                        DIALOGUE_SLURPY_21: string;
                        DIALOGUE_SLURPY_22: string;
                        DIALOGUE_SLURPY_23: string;
                        DIALOGUE_SLURPY_24: string;
                        DIALOGUE_SLURPY_25: string;
                        DIALOGUE_SLURPY_26: string;
                        DIALOGUE_SLURPY_27: string;
                        DIALOGUE_SLURPY_28: string;
                        DIALOGUE_SLURPY_29: string;
                        DIALOGUE_SLURPY_3: string;
                        DIALOGUE_SLURPY_30: string;
                        DIALOGUE_SLURPY_31: string;
                        DIALOGUE_SLURPY_32: string;
                        DIALOGUE_SLURPY_33: string;
                        DIALOGUE_SLURPY_34: string;
                        DIALOGUE_SLURPY_35: string;
                        DIALOGUE_SLURPY_36: string;
                        DIALOGUE_SLURPY_37: string;
                        DIALOGUE_SLURPY_38: string;
                        DIALOGUE_SLURPY_39: string;
                        DIALOGUE_SLURPY_4: string;
                        DIALOGUE_SLURPY_40: string;
                        DIALOGUE_SLURPY_41: string;
                        DIALOGUE_SLURPY_42: string;
                        DIALOGUE_SLURPY_43: string;
                        DIALOGUE_SLURPY_44: string;
                        DIALOGUE_SLURPY_45: string;
                        DIALOGUE_SLURPY_46: string;
                        DIALOGUE_SLURPY_47: string;
                        DIALOGUE_SLURPY_48: string;
                        DIALOGUE_SLURPY_49: string;
                        DIALOGUE_SLURPY_5: string;
                        DIALOGUE_SLURPY_6: string;
                        DIALOGUE_SLURPY_7: string;
                        DIALOGUE_SLURPY_8: string;
                        DIALOGUE_SLURPY_9: string;
                        DIALOGUE_SWOOPY_0: string;
                        DIALOGUE_SWOOPY_1: string;
                        DIALOGUE_SWOOPY_2: string;
                        DIALOGUE_SWOOPY_3: string;
                        DIALOGUE_SWOOPY_4: string;
                        DIALOGUE_TOY_0: string;
                        DIALOGUE_TOY_1: string;
                        DIALOGUE_TOY_10: string;
                        DIALOGUE_TOY_11: string;
                        DIALOGUE_TOY_12: string;
                        DIALOGUE_TOY_13: string;
                        DIALOGUE_TOY_14: string;
                        DIALOGUE_TOY_15: string;
                        DIALOGUE_TOY_16: string;
                        DIALOGUE_TOY_17: string;
                        DIALOGUE_TOY_2: string;
                        DIALOGUE_TOY_3: string;
                        DIALOGUE_TOY_4: string;
                        DIALOGUE_TOY_5: string;
                        DIALOGUE_TOY_6: string;
                        DIALOGUE_TOY_7: string;
                        DIALOGUE_TOY_8: string;
                        DIALOGUE_TOY_9: string;
                        DIALOGUE_VERNA_0: string;
                        DIALOGUE_VERNA_1: string;
                        DIALOGUE_VERNA_2: string;
                        DIALOGUE_VERNA_3: string;
                        DIALOGUE_WANDERER_1: string;
                        DIALOGUE_WANDERER_2: string;
                        DIALOGUE_WANDERER_3: string;
                        DIALOGUE_WANDERER_4: string;
                        DIALOGUE_WANDERER_BEGIN_TRADE: string;
                        DIALOGUE_WANDERER_COMPLETED_TASK: string;
                        DIALOGUE_WANDERER_END_TRADE: string;
                        DIALOGUE_WANDERER_IDLE_1: string;
                        DIALOGUE_WANDERER_IDLE_2: string;
                        DIALOGUE_WANDERER_IDLE_3: string;
                        DIALOGUE_WANDERER_LORE_AQUADILE_1: string;
                        DIALOGUE_WANDERER_LORE_AQUADILE_2: string;
                        DIALOGUE_WANDERER_LORE_AQUADILE_3: string;
                        DIALOGUE_WANDERER_LORE_ARCTURION_1: string;
                        DIALOGUE_WANDERER_LORE_ARCTURION_2: string;
                        DIALOGUE_WANDERER_LORE_ARCTURION_3: string;
                        DIALOGUE_WANDERER_LORE_BLASTSTAR_1: string;
                        DIALOGUE_WANDERER_LORE_BLASTSTAR_2: string;
                        DIALOGUE_WANDERER_LORE_BLASTSTAR_3: string;
                        DIALOGUE_WANDERER_LORE_LUMANIGHT_1: string;
                        DIALOGUE_WANDERER_LORE_LUMANIGHT_2: string;
                        DIALOGUE_WANDERER_LORE_LUMANIGHT_3: string;
                        DIALOGUE_WANDERER_LORE_MAGMAYHEM_1: string;
                        DIALOGUE_WANDERER_LORE_MAGMAYHEM_2: string;
                        DIALOGUE_WANDERER_LORE_MAGMAYHEM_3: string;
                        DIALOGUE_WANDERER_LORE_NEBULA_1: string;
                        DIALOGUE_WANDERER_LORE_NEBULA_2: string;
                        DIALOGUE_WANDERER_LORE_NEBULA_3: string;
                        DIALOGUE_WANDERER_LORE_RIPTIDE_1: string;
                        DIALOGUE_WANDERER_LORE_RIPTIDE_2: string;
                        DIALOGUE_WANDERER_LORE_RIPTIDE_3: string;
                        DIALOGUE_WANDERER_LORE_SHIVERSCORCH_1: string;
                        DIALOGUE_WANDERER_LORE_SHIVERSCORCH_2: string;
                        DIALOGUE_WANDERER_LORE_SHIVERSCORCH_3: string;
                        DIALOGUE_WANDERER_TRADE_ITEM_1: string;
                        DIALOGUE_WANDERER_TRADE_ITEM_2: string;
                        DIALOGUE_WANDERER_TRADE_ITEM_3: string;
                        DIALOGUE_WINTERFEST_0: string;
                        DIALOGUE_WINTERFEST_1: string;
                        DIVISION_BRONZE: string;
                        DIVISION_BRONZE_1: string;
                        DIVISION_BRONZE_2: string;
                        DIVISION_BRONZE_3: string;
                        DIVISION_GOLD: string;
                        DIVISION_GOLD_1: string;
                        DIVISION_GOLD_2: string;
                        DIVISION_GOLD_3: string;
                        DIVISION_SILVER: string;
                        DIVISION_SILVER_1: string;
                        DIVISION_SILVER_2: string;
                        DIVISION_SILVER_3: string;
                        DO_NOT_EVOLVE: string;
                        DOWNLOAD: string;
                        DOWNLOAD_BODY: string;
                        DOWNLOAD_REWARD_BODY: string;
                        DOWNLOAD_REWARD_TITLE: string;
                        DOWNLOAD_TITLE: string;
                        DUNGEON_ENTRANCE_LOCKOUT: string;
                        DUNGEON_ENTRANCE_TIMER: string;
                        DYNO_DIG_DISTANCE_COLD: string;
                        DYNO_DIG_DISTANCE_DIG: string;
                        DYNO_DIG_DISTANCE_HOT: string;
                        DYNO_DIG_DISTANCE_ICE_COLD: string;
                        DYNO_DIG_DISTANCE_WARM: string;
                        DYNO_DIG_EXTEND_TIME: string;
                        DYNO_DIG_FOUND_FOSSIL: string;
                        DYNO_DIG_FOUND_ITEM: string;
                        DYNO_DIG_INSTRUCTIONS_0: string;
                        DYNO_DIG_INSTRUCTIONS_1: string;
                        DYNO_DIG_INSTRUCTIONS_2: string;
                        DYNO_DIG_INSTRUCTIONS_3: string;
                        DYNO_DIG_INSTRUCTIONS_4: string;
                        DYNO_DIG_INSTRUCTIONS_5: string;
                        DYNO_DIG_ITEMS_RECOVERED: string;
                        DYNO_DIG_READY_TO_START: string;
                        DYNO_DIG_SHOP_WELCOME: string;
                        DYNO_DIG_START: string;
                        DYNO_DIG_START_NO_MORE_FOSSILS: string;
                        DYNO_DIG_START_NO_SHOVEL: string;
                        DYNO_DIG_TIMES_UP: string;
                        DYNO_DIG_TIMES_UP_REWARD: string;
                        DYNO_DIG_TIMES_UP_TRY_AGAIN: string;
                        DYNO_DIG_TITLE: string;
                        EARTH_TOWER_WARDEN_KEY: string;
                        EARTH_TOWER_WARDEN_LOCKED: string;
                        EDUCATION_ERROR_REFRESH: string;
                        EDUCATION_NOT_LOADED: string;
                        EFFECT_ATTACK_POWERFUL: string;
                        EFFECT_ATTACK_WEAK: string;
                        EFFECT_BOUNTY_COMPLETE: string;
                        EFFECT_VOLUME_LABEL: string;
                        EFFICACY_SKIP_POPUP_SKIP: string;
                        EFFICACY_SKIP_POPUP_TEXT: string;
                        EFFICACY_SKIP_POPUP_TITLE: string;
                        EFFICACY_SKIP_POPUP_WATCH: string;
                        EFFICACY_VIDEO_REPLAY: string;
                        EFFICACY_VIDEO_SOLVE: string;
                        EFFICACY_VIDEO_TEXT: string;
                        EFFICACY_VIDEO_TITLE: string;
                        EG_CHOOSE_RUNE_HEADER: string;
                        EG_CHOOSE_RUNE_TITLE: string;
                        EG_GUARDIAN_1: string;
                        EG_GUARDIAN_10: string;
                        EG_GUARDIAN_11: string;
                        EG_GUARDIAN_12: string;
                        EG_GUARDIAN_13: string;
                        EG_GUARDIAN_14: string;
                        EG_GUARDIAN_15: string;
                        EG_GUARDIAN_16: string;
                        EG_GUARDIAN_17: string;
                        EG_GUARDIAN_18: string;
                        EG_GUARDIAN_19: string;
                        EG_GUARDIAN_2: string;
                        EG_GUARDIAN_20: string;
                        EG_GUARDIAN_21: string;
                        EG_GUARDIAN_22: string;
                        EG_GUARDIAN_23: string;
                        EG_GUARDIAN_24: string;
                        EG_GUARDIAN_25: string;
                        EG_GUARDIAN_26: string;
                        EG_GUARDIAN_27: string;
                        EG_GUARDIAN_28: string;
                        EG_GUARDIAN_29: string;
                        EG_GUARDIAN_3: string;
                        EG_GUARDIAN_30: string;
                        EG_GUARDIAN_31: string;
                        EG_GUARDIAN_32: string;
                        EG_GUARDIAN_33: string;
                        EG_GUARDIAN_34: string;
                        EG_GUARDIAN_35: string;
                        EG_GUARDIAN_36: string;
                        EG_GUARDIAN_37: string;
                        EG_GUARDIAN_38: string;
                        EG_GUARDIAN_39: string;
                        EG_GUARDIAN_4: string;
                        EG_GUARDIAN_40: string;
                        EG_GUARDIAN_41: string;
                        EG_GUARDIAN_42: string;
                        EG_GUARDIAN_43: string;
                        EG_GUARDIAN_44: string;
                        EG_GUARDIAN_45: string;
                        EG_GUARDIAN_46: string;
                        EG_GUARDIAN_47: string;
                        EG_GUARDIAN_48: string;
                        EG_GUARDIAN_49: string;
                        EG_GUARDIAN_5: string;
                        EG_GUARDIAN_50: string;
                        EG_GUARDIAN_6: string;
                        EG_GUARDIAN_7: string;
                        EG_GUARDIAN_8: string;
                        EG_GUARDIAN_9: string;
                        EG_NOOT_1: string;
                        EG_NOOT_10: string;
                        EG_NOOT_11: string;
                        EG_NOOT_12: string;
                        EG_NOOT_13: string;
                        EG_NOOT_14: string;
                        EG_NOOT_15: string;
                        EG_NOOT_16: string;
                        EG_NOOT_17: string;
                        EG_NOOT_18: string;
                        EG_NOOT_19: string;
                        EG_NOOT_2: string;
                        EG_NOOT_20: string;
                        EG_NOOT_21: string;
                        EG_NOOT_22: string;
                        EG_NOOT_23: string;
                        EG_NOOT_24: string;
                        EG_NOOT_25: string;
                        EG_NOOT_26: string;
                        EG_NOOT_27: string;
                        EG_NOOT_28: string;
                        EG_NOOT_29: string;
                        EG_NOOT_3: string;
                        EG_NOOT_30: string;
                        EG_NOOT_31: string;
                        EG_NOOT_32: string;
                        EG_NOOT_33: string;
                        EG_NOOT_34: string;
                        EG_NOOT_35: string;
                        EG_NOOT_36: string;
                        EG_NOOT_37: string;
                        EG_NOOT_38: string;
                        EG_NOOT_39: string;
                        EG_NOOT_4: string;
                        EG_NOOT_40: string;
                        EG_NOOT_5: string;
                        EG_NOOT_6: string;
                        EG_NOOT_7: string;
                        EG_NOOT_8: string;
                        EG_NOOT_9: string;
                        EG_NOOT_ON_FAINT: string;
                        EG_NOOT_SPELL_LOCKED: string;
                        EG_RUNE_BOOST_CRIT_DESC: string;
                        EG_RUNE_BOOST_CRIT_NAME: string;
                        EG_RUNE_BOOST_DAMAGE_DESC: string;
                        EG_RUNE_BOOST_DAMAGE_NAME: string;
                        EG_RUNE_BOOST_HEALTH_DESC: string;
                        EG_RUNE_BOOST_HEALTH_NAME: string;
                        ELEMENT: string;
                        ELEMENTAL_GUARDIAN_NOOT_ACTIVE_TELEPORTER: string;
                        ELEMENTAL_GUARDIAN_NOOT_INACTIVE_TELEPORTER: string;
                        EMAIL_PROMPT_ERROR: string;
                        EMAIL_PROMPT_FAIL_MESSAGE_BODY: string;
                        EMAIL_PROMPT_GET_APPLES: string;
                        EMAIL_PROMPT_GET_GOLD: string;
                        EMAIL_PROMPT_LATER: string;
                        EMAIL_PROMPT_MESSAGE_BODY: string;
                        EMAIL_PROMPT_MESSAGE_TITLE: string;
                        EMAIL_PROMPT_SUBMIT: string;
                        EMAIL_PROMPT_TITLE: string;
                        EMPTY: string;
                        ENJOY_BEAT_EVERYTHING: string;
                        ENJOY_BEING_HERO: string;
                        ENJOY_CANT_REAL_LIFE: string;
                        ENJOY_CHANGE_GAME: string;
                        ENJOY_COLLECT_REWARDS: string;
                        ENJOY_COLLECT_THINGS: string;
                        ENJOY_DECORATING: string;
                        ENJOY_DIFFERENT_PLAY: string;
                        ENJOY_DISCOVER_NEW: string;
                        ENJOY_FIND_OUT_NEXT: string;
                        ENJOY_GET_WORKED: string;
                        ENJOY_LIMITED_EVENT: string;
                        ENJOY_NEW_PLACES: string;
                        ENJOY_NOT_LOSING: string;
                        ENJOY_RARE_THINGS: string;
                        ENJOY_THINGS_DO: string;
                        ENJOY_UNEXPECTED_PRIZES: string;
                        ENJOY_UPGRADE_ABILITY: string;
                        ENJOY_UPGRADE_PETS: string;
                        ENJOY_WORLD_DIFF: string;
                        ENTER_CODE_LABEL: string;
                        ENTER_HARD_PATH_WARNING: string;
                        EPIC_ARENA_BATTLE_SELECT: string;
                        EPIC_ARENA_BUY_TOY: string;
                        EPIC_ARENA_CHALLENGE: string;
                        EPIC_ATTACK_MESSAGE_TITLE: string;
                        EPIC_NOT_READY_MESSAGE: string;
                        EPIC_OF_THE_MONTH: string;
                        EPIC_VIEWER_ADD_TO_TEAM: string;
                        EPIC_VIEWER_BECOME_A_MEMBER: string;
                        EPIC_VIEWER_LEVEL: string;
                        EPIC_VIEWER_MEMBERSHIP_BENEFITS: string;
                        EPIC_VIEWER_NEW_EPIC_TASKS: string;
                        EPIC_VIEWER_STARS: string;
                        EPICS_ARENA_LOCKED_TEXT: string;
                        EPICS_CANNOT_LET_GO: string;
                        EPICS_ERROR_ONCE_PER_BATTLE: string;
                        EPICS_ERROR_ONCE_PER_CHALLENGE: string;
                        EPICS_ERROR_TOO_POWERFUL: string;
                        EPICS_GO_EXPLORE: string;
                        EPICS_INFO_TITLE: string;
                        EPICS_OF_THE_MONTH: string;
                        Episode_1: string;
                        Episode_2: string;
                        Episode_3: string;
                        Episode_4: string;
                        Episode_5: string;
                        ERROR: string;
                        ERROR_DIALOG_BODY: string;
                        ERROR_DOWNLOAD: string;
                        ERROR_INPUT_EMPTY: string;
                        ERROR_INPUT_INVALID_EMAIL: string;
                        ERROR_RCI_POPUP_A: string;
                        ERROR_RCI_POPUP_B: string;
                        EVOLUTION_INDEX_TEXT: string;
                        EVOLVE_LATER: string;
                        EVOLVE_LATER_UPPERCASE: string;
                        EVOLVE_NOW: string;
                        EVOLVE_NOW_UPPERCASE: string;
                        EVOLVE_STOP: string;
                        EXISTING_MEMBER_WW_AD_BODY: string;
                        EXISTING_MEMBER_WW_AD_TITLE: string;
                        EXISTING_MEMBER_WW_TOOLTIP_BODY: string;
                        EXISTING_MEMBER_WW_TOOLTIP_TITLE: string;
                        EXPLAIN_MEMBERSHIP_PARENT_BODY_0: string;
                        EXPLAIN_MEMBERSHIP_PARENT_BODY_1: string;
                        EXPLAIN_MEMBERSHIP_PARENT_BODY_HIGHLIGHT: string;
                        EXPLAIN_MEMBERSHIP_PARENT_FOOTER: string;
                        EXPLAIN_MEMBERSHIP_PARENT_TITLE_1: string;
                        EXPLAIN_MEMBERSHIP_STUDENT_BODY_1: string;
                        EXPLAIN_MEMBERSHIP_STUDENT_BODY_2: string;
                        EXPLAIN_MEMBERSHIP_STUDENT_BODY_3: string;
                        EXPLAIN_MEMBERSHIP_STUDENT_BODY_4: string;
                        EXPLAIN_MEMBERSHIP_STUDENT_TITLE_1: string;
                        EXPLAIN_MEMBERSHIP_STUDENT_TITLE_2: string;
                        EXPLAIN_MEMBERSHIP_STUDENT_TITLE_3: string;
                        EXPLAIN_MEMBERSHIP_STUDENT_TITLE_4: string;
                        FA_FORGOT: string;
                        FA_QUESTIONS: string;
                        FA_RETURNING: string;
                        FEATURE_DISABLED: string;
                        FESTIVAL_CONFIRM_TRAVEL: string;
                        FF_CLICK_AND_DRAG: string;
                        FF_COLLECT: string;
                        FF_FLUNG: string;
                        FF_FORGOT: string;
                        FF_LAUNCHED: string;
                        FF_MISSED: string;
                        FF_NEWDESIGN: string;
                        FF_NEWROOM: string;
                        FF_POPUP_COLLECT_BODY: string;
                        FF_POPUP_COLLECT_TITLE: string;
                        FF_POPUP_FINISH_BODY: string;
                        FF_POPUP_FINISH_TITLE: string;
                        FF_POPUP_NO_FLOATLING_BODY: string;
                        FF_POPUP_NO_FLOATLING_TITLE: string;
                        FF_QUIT_BODY: string;
                        FF_REACH: string;
                        FF_RETURNINGS: string;
                        FF_SENDFLOATLINGS: string;
                        FF_TRY_TO_LAND: string;
                        FF_USE_THE_SAMPLES: string;
                        FF_YOU_CAN_TELL: string;
                        FIND_MORE_AEROS: string;
                        FIND_MORE_FLORANS: string;
                        FIND_MORE_GOLD: string;
                        FIND_MORE_HOT_HOTS: string;
                        FIND_MORE_SHIVERS: string;
                        FIND_MORE_YARS: string;
                        FIRST_NAME_SELECT_CHOOSE_NAME: string;
                        FIRST_NAME_SELECTOR_TITLE_DEFAULT: string;
                        FIRST_NAME_SELECTOR_TITLE_LETTER: string;
                        FOLLOW_THE_MUSIC: string;
                        FOREST_GUARDIAN: string;
                        FRIEND_REQUEST_ADD_FRIEND: string;
                        FRIEND_REQUESTS_TITLE: string;
                        FRIENDS_LIST_BUTTON_REQUESTS: string;
                        FRIENDS_LIST_CANCEL_MESSAGE_BODY: string;
                        FRIENDS_LIST_CANCEL_MESSAGE_TITLE: string;
                        FRIENDS_LIST_CONFIRM_CANCEL_BODY: string;
                        FRIENDS_LIST_CONFIRM_CANCEL_TITLE: string;
                        FRIENDS_LIST_COUNTER: string;
                        FRIENDS_LIST_ERROR_MESSAGE_BODY: string;
                        FRIENDS_LIST_FULL_MESSAGE_BODY: string;
                        FRIENDS_LIST_SENT_MESSAGE_BODY: string;
                        FRIENDS_LIST_SENT_MESSAGE_TITLE: string;
                        FRIENDS_LIST_TITLE: string;
                        FRIENDS_LIST_UNAVAILABLE: string;
                        FRIENDS_LIST_WAITING: string;
                        FTUE_PET_EVOLVES_AT: string;
                        FULLSCREEN_LABEL: string;
                        GAINED_MEMBER_STARS: string;
                        GAINED_MEMBER_STARS_EACH: string;
                        GEM_FOUND: string;
                        GENERAL_LABEL: string;
                        GET_CHARFOAL: string;
                        GET_MERMINA: string;
                        GET_SNOWFLUFF: string;
                        GET_SPROOT: string;
                        GET_WOTT: string;
                        GO: string;
                        GO_BATTLE_BUTTON_CAPITAL: string;
                        GO_BATTLE_CAPITAL: string;
                        GO_COLLECT_CAPITAL: string;
                        GO_NOW: string;
                        GO_TO_CUSTOMER_SUPPORT_PAGE: string;
                        GO_TO_ZONE: string;
                        GOLD: string;
                        GOOGLE_AUTH_CREATING_ACCOUNT: string;
                        GOOGLE_AUTH_FAIL_DEFAULT: string;
                        GOOGLE_AUTH_POPUP_BLOCKED: string;
                        GOOGLE_AUTH_PROMPT_BROWSER: string;
                        GOOGLE_AUTH_USE_BROWSER_INSTEAD: string;
                        GOT_ITEM_AWESOME_STUFF: string;
                        GOT_ITEM_BOOTS: string;
                        GOT_ITEM_BOUNTY_POINTS: string;
                        GOT_ITEM_FOLLOW: string;
                        GOT_ITEM_GENERIC: string;
                        GOT_ITEM_GIFT_BOX: string;
                        GOT_ITEM_GOLD: string;
                        GOT_ITEM_LOOK: string;
                        GOT_ITEM_MOVED_HOUSE: string;
                        GOT_ITEM_OTHER: string;
                        GOT_ITEM_SPELL: string;
                        GOT_ITEM_YOU_GOT_FURNITURE: string;
                        GOT_ITEM_YOU_GOT_MYSTERY_BAG: string;
                        GOT_ITEM_YOU_GOT_PET: string;
                        GOT_ITEM_YOU_GOT_SOMETHING: string;
                        GRAPHQL_ERROR_BAD_USER_INPUT: string;
                        GRAPHQL_ERROR_CONSENT_REQUESTS_MAX_LIMIT_REACHED: string;
                        GRAPHQL_ERROR_CONSENT_RESPONSE_ALREADY_RECEIVED: string;
                        GRAPHQL_ERROR_DEFAULT: string;
                        GREAT_HALL_KEYSTONES_POPUP: string;
                        GUARDIAN_BATTLE_START_ERROR: string;
                        HARMONY_ISLAND_AD_WATCH: string;
                        HARMONY_ISLAND_NOT_ENOUGH_RUNES_TRIAL_LOCKED: string;
                        HARMONY_ISLAND_PART_2_AD_BODY: string;
                        HARMONY_ISLAND_PART_2_AD_TITLE: string;
                        HARMONY_ISLAND_RELEASE_AD_BODY: string;
                        HARMONY_ISLAND_RELEASE_AD_TITLE: string;
                        HARMONY_ISLAND_RELEASE_TOOLTIP_BODY: string;
                        HARMONY_ISLAND_TEASER_AD_BODY: string;
                        HARMONY_ISLAND_TEASER_AD_TITLE: string;
                        HARMONY_ISLAND_TRAILER_AD_BODY: string;
                        HARMONY_ISLAND_TRAILER_AD_TITLE: string;
                        HEARTS: string;
                        HEY_TEACHERS: string;
                        HINT_0: string;
                        HINT_1: string;
                        HINT_10: string;
                        HINT_11: string;
                        HINT_12: string;
                        HINT_13: string;
                        HINT_14: string;
                        HINT_15: string;
                        HINT_16: string;
                        HINT_17: string;
                        HINT_18: string;
                        HINT_19: string;
                        HINT_2: string;
                        HINT_20: string;
                        HINT_21: string;
                        HINT_22: string;
                        HINT_23: string;
                        HINT_24: string;
                        HINT_25: string;
                        HINT_26: string;
                        HINT_3: string;
                        HINT_4: string;
                        HINT_5: string;
                        HINT_6: string;
                        HINT_7: string;
                        HINT_8: string;
                        HINT_9: string;
                        HOST_DISCONNECTED_MESSAGE: string;
                        HOUSE_BUTTON_VISIT: string;
                        HOUSE_EDITOR_CONFIRM_PACK_UP: string;
                        HOUSE_EDITOR_TITLE: string;
                        HOUSE_PREVIEW_PURCHASE_MESSAGE: string;
                        HOUSE_VISITING_LOCKED: string;
                        HOUSE_VISITING_UNLOCKED: string;
                        HS_FLOATLINGS_FOUND: string;
                        HS_NINJAS: string;
                        HTTP_TOKEN_EXPIRE_MESSAGE: string;
                        ICE_TOWER_BETA_CONTENT: string;
                        ICE_TOWER_BETA_CONTENT_PART_1: string;
                        ICE_TOWER_BETA_CONTENT_PART_2: string;
                        ICE_TOWER_BETA_CONTENT_PART_3: string;
                        ICE_TOWER_BETA_CONTENT_PART_4: string;
                        ICE_TOWER_BETA_TITLE: string;
                        ICE_TOWER_COMPLETE_SC_WW_AD_TEXT: string;
                        ICE_TOWER_TO_COMPLETE_WW_AD_TEXT: string;
                        ICE_TOWER_UNLOCK_WW_AD_TEXT: string;
                        INACTIVITY_BUTTON: string;
                        INACTIVITY_MESSAGE: string;
                        INIT_ORB_SERVER_ERROR: string;
                        INK_BLOT_BLOCKED_MESSAGE: string;
                        INK_BLOT_BLOCKED_TITLE: string;
                        INPUT_CLEAR: string;
                        INSTALL: string;
                        ITEM_BUTTON_BUY: string;
                        ITEM_BUTTON_HIDE: string;
                        ITEM_BUTTON_REMOVE: string;
                        ITEM_BUTTON_SHOW: string;
                        ITEM_BUTTON_USE: string;
                        ITEM_BUTTON_WEAR: string;
                        ITEM_CURRENT: string;
                        ITEM_FREE: string;
                        ITEM_HEAL_HP: string;
                        ITEM_MAX: string;
                        ITEM_OWNED: string;
                        ITEM_TEXT_CHANGE: string;
                        ITEMCARD_FREE: string;
                        ITEMCARD_LEVEL: string;
                        ITEMCARD_LOCKED: string;
                        ITEMCARD_OWNED: string;
                        JAR_BECOME_MEMBER: string;
                        JAR_EXPIRED: string;
                        JWT_INVALID_MESSAGE: string;
                        KEEP: string;
                        KEEP_PLAYING_BUTTON: string;
                        KEYSTONE_LEVEL_LOCK: string;
                        KEYSTONE_PEDESTAL_NOT_FOUND: string;
                        KEYSTONE_PEDESTAL_NOT_MIN_LEVEL: string;
                        KEYSTONE_PEDESTAL_NOT_RELEASED: string;
                        KEYSTONE_PEDESTALS_ALL_PLACED: string;
                        KEYSTONE_PEDESTALS_TITLE: string;
                        KEYSTONE_PLACED_DOOR_UNLOCKED: string;
                        KEYSTONE_READY: string;
                        KEYSTONE_UNLOCKED: string;
                        LAMPLIGHT_CONFIRM_TRAVEL: string;
                        LAMPLIGHT_DOOR_COMING_SOON_MESSAGE: string;
                        LAMPLIGHT_DOOR_COMING_SOON_TITLE: string;
                        LAMPLIGHT_LOCKED_FESTIVAL: string;
                        LEADER_PROMPT_CHECK_IT_OUT: string;
                        LEADER_PROMPT_HEY_THERE: string;
                        LEADER_PROMPT_LOADING: string;
                        LEADER_PROMPT_PLAY_HOME: string;
                        LEADERBOARD_CATCH_UP: string;
                        LEADERBOARD_CHECK_FRIENDS: string;
                        LEADERBOARD_CLASS_ERROR_LOADING: string;
                        LEADERBOARD_CLASS_LEADERS: string;
                        LEADERBOARD_CLASS_LEVEL_LONG: string;
                        LEADERBOARD_CLASS_LEVEL_SHORT: string;
                        LEADERBOARD_CLASS_TOP: string;
                        LEADERBOARD_ERROR_LOADING_BOARD: string;
                        LEADERBOARD_ERROR_LOADING_PLAYER: string;
                        LEADERBOARD_ERROR_TEMPORARILY_UNAVAILABLE: string;
                        LEADERBOARD_NOT_APPLICABLE: string;
                        LEADERBOARD_NOT_RANKED: string;
                        LEADERBOARD_RANK_1: string;
                        LEADERBOARD_RANK_UP: string;
                        LEARN_HOW: string;
                        LEAVE_NOW: string;
                        LEAVE_TEAM_BODY: string;
                        LEAVE_TEAM_TITLE: string;
                        LET_GO: string;
                        LET_GO_FOREVER_WARNING: string;
                        LET_PET_GO_QUESTION: string;
                        LEVEL_AND_COLON: string;
                        LEVEL_LOCK_EQUIP: string;
                        LEVEL_LOCK_PURCHASE: string;
                        LINK_PARENT_NO_REWARDS: string;
                        LOADING_CAPITALIZE: string;
                        LOADING_LOWERCASE: string;
                        LOADOUT_CUSTOMIZE_SET: string;
                        LOADOUT_NO_RUNES_AVAILABLE: string;
                        LOADOUT_SET_1: string;
                        LOADOUT_SET_2: string;
                        LOADOUT_SET_3: string;
                        LOADOUT_YOUR_RUNES: string;
                        LOADOUT_YOUR_TEAM: string;
                        LOCKED_SPELL: string;
                        LOGIN_LEAVE_BODY: string;
                        LOGIN_LEAVE_GAME: string;
                        LOGIN_LOADING: string;
                        LOGIN_LOADING_FEATURES: string;
                        LOGIN_LOADING_SKILLS: string;
                        LOGIN_LOADING_WORLDS: string;
                        LOGIN_LOGGING_IN: string;
                        LOGIN_LOGGING_IN_GOOGLE: string;
                        LOGIN_PASSWORD: string;
                        LOGIN_PASSWORD_HELP: string;
                        LOGIN_PASSWORD_HELP_CONTENT: string;
                        LOGIN_PRIVACY_POLICY: string;
                        LOGIN_USERNAME: string;
                        LOGIN_WEBSITE: string;
                        LORE_TABLET_0: string;
                        LORE_TABLET_1: string;
                        LORE_TABLET_10: string;
                        LORE_TABLET_11: string;
                        LORE_TABLET_12: string;
                        LORE_TABLET_13: string;
                        LORE_TABLET_14: string;
                        LORE_TABLET_15: string;
                        LORE_TABLET_16: string;
                        LORE_TABLET_17: string;
                        LORE_TABLET_18: string;
                        LORE_TABLET_19: string;
                        LORE_TABLET_2: string;
                        LORE_TABLET_20: string;
                        LORE_TABLET_21: string;
                        LORE_TABLET_22: string;
                        LORE_TABLET_23: string;
                        LORE_TABLET_24: string;
                        LORE_TABLET_25: string;
                        LORE_TABLET_26: string;
                        LORE_TABLET_27: string;
                        LORE_TABLET_3: string;
                        LORE_TABLET_4: string;
                        LORE_TABLET_5: string;
                        LORE_TABLET_6: string;
                        LORE_TABLET_7: string;
                        LORE_TABLET_8: string;
                        LORE_TABLET_9: string;
                        LUCKY_LOOT: string;
                        LVL: string;
                        MAIL_BECOME_A_MEMBER: string;
                        MAIL_CLICK_TO_OPEN: string;
                        MAIL_OPEN_MY_BOX: string;
                        MAIL_UNAVAILABLE: string;
                        MAILBOX_DELETE_MESSAGE: string;
                        MAP_ACADEMY_ARCHIVES: string;
                        MAP_ACADEMY_GREATHALL: string;
                        MAP_ACADEMY_SECOND_FLOOR: string;
                        MAP_ACTIVITY_CENTRAL_VILLAGE: string;
                        MAP_ACTIVITY_ISLAND_CENTER: string;
                        MAP_ACTIVITY_NORTHEAST: string;
                        MAP_ACTIVITY_NORTHWEST: string;
                        MAP_ACTIVITY_RIVER_BRIDGE: string;
                        MAP_ACTIVITY_SWING_BRIDGE: string;
                        MAP_ACTIVITY_WESTERN_SHORE: string;
                        MAP_BONFIRE_SPIRE_FIERY_ALCOVE: string;
                        MAP_BONFIRE_SPIRE_FIREWATCH_ROAD: string;
                        MAP_BONFIRE_SPIRE_GARDEN_GETAWAY: string;
                        MAP_BONFIRE_SPIRE_LAVA_PITS: string;
                        MAP_BONFIRE_SPIRE_MOLTEN_ENCLAVE: string;
                        MAP_BONFIRE_SPIRE_OUTER_SLIMEBURBIA: string;
                        MAP_BONFIRE_SPIRE_PALM_PATH: string;
                        MAP_BONFIRE_SPIRE_PALM_TERRACE: string;
                        MAP_BONFIRE_SPIRE_PITFALL_TERRACE: string;
                        MAP_BONFIRE_SPIRE_RED_HOT_RIVER: string;
                        MAP_BONFIRE_SPIRE_ROYAL_KITCHEN: string;
                        MAP_BONFIRE_SPIRE_SLIME_SHANTY: string;
                        MAP_BONFIRE_SPIRE_THRONE_ROOM: string;
                        MAP_BONFIRE_SPIRE_THRONE_ROOM_ENTRANCE: string;
                        MAP_BONFIRE_SPIRE_VOLCANIC_CAVERN: string;
                        MAP_BONFIRE_SPIRE_VOLCANIC_SANCTUM: string;
                        MAP_BONFIRE_SPIRE_VOLCANO_ENTRANCE: string;
                        MAP_BONFIRE_SPIRE_VOLCANO_JUNCTION: string;
                        MAP_BONFIRE_SPIRE_VOLCANO_VILLAGE: string;
                        MAP_DARK_TOWER_ENTRANCE: string;
                        MAP_DARK_TOWER_FLOOR: string;
                        MAP_DARK_TOWER_SHOWDOWN: string;
                        MAP_DYNO_DIG_MUSEUM: string;
                        MAP_DYNO_DIG_OASIS: string;
                        MAP_EARTH_TOWER: string;
                        MAP_EARTH_TOWER_COMMON_ROOM: string;
                        MAP_EARTH_TOWER_FLOOR: string;
                        MAP_EARTH_TOWER_WARDEN_ROOM: string;
                        MAP_FOREST_BIG_TREE: string;
                        MAP_FOREST_CROSSROADS: string;
                        MAP_FOREST_FIREFLY_CLEARING: string;
                        MAP_FOREST_FIREFLY_CROSSING: string;
                        MAP_FOREST_FISHERMANS_POND: string;
                        MAP_FOREST_GRASSY_CLEARING: string;
                        MAP_FOREST_MOUNTAIN_GATE: string;
                        MAP_FOREST_MOUNTAIN_PASS: string;
                        MAP_FOREST_OLD_ROAD_REMAINS: string;
                        MAP_FOREST_STONEFISH_BEACH: string;
                        MAP_FOREST_THE_OLD_ROAD: string;
                        MAP_HOUSE_EXTERIOR: string;
                        MAP_HOUSE_PALLET_PASS: string;
                        MAP_HOUSE_STARTER_HOUSE: string;
                        MAP_ICE_TOWER: string;
                        MAP_ICE_TOWER_COMMON_ROOM: string;
                        MAP_ICE_TOWER_FLOOR: string;
                        MAP_ICE_TOWER_WARDEN_ROOM: string;
                        MAP_LAMPLIGHT_ACADEMY_CROSSROADS: string;
                        MAP_LAMPLIGHT_ACADEMY_ENTRANCE: string;
                        MAP_LAMPLIGHT_BURROW: string;
                        MAP_LAMPLIGHT_COLISEUM: string;
                        MAP_LAMPLIGHT_FORT_FOX: string;
                        MAP_LAMPLIGHT_HISTORY_DISTRICT: string;
                        MAP_LAMPLIGHT_LOWER_INTERSECTION: string;
                        MAP_LAMPLIGHT_MARKET: string;
                        MAP_LAMPLIGHT_NORTHWEST_COURT: string;
                        MAP_LAMPLIGHT_OUTSKIRTS: string;
                        MAP_LAMPLIGHT_PET_PARK: string;
                        MAP_LAMPLIGHT_SOUTHERN_DOCK: string;
                        MAP_LAMPLIGHT_TOWN_SQUARE: string;
                        MAP_LAMPLIGHT_VENDORS_PLAZA: string;
                        MAP_SHIPWRECK_SHORE_BROKEN_BOWSPRIT: string;
                        MAP_SHIPWRECK_SHORE_BROKEN_SHIP_BED: string;
                        MAP_SHIPWRECK_SHORE_CAPNS_QUARTERS: string;
                        MAP_SHIPWRECK_SHORE_CARGO_HOLD: string;
                        MAP_SHIPWRECK_SHORE_CROWS_NEST: string;
                        MAP_SHIPWRECK_SHORE_DEEP_WATER: string;
                        MAP_SHIPWRECK_SHORE_DESOLATE_DECK: string;
                        MAP_SHIPWRECK_SHORE_DIVE_DOCK: string;
                        MAP_SHIPWRECK_SHORE_FAR_BEACH: string;
                        MAP_SHIPWRECK_SHORE_LOWER_DECK: string;
                        MAP_SHIPWRECK_SHORE_LOWER_DECK_HALL: string;
                        MAP_SHIPWRECK_SHORE_SAND_CITY: string;
                        MAP_SHIPWRECK_SHORE_SAND_TOWN: string;
                        MAP_SHIPWRECK_SHORE_SEAWEED_SANCTUARY: string;
                        MAP_SHIPWRECK_SHORE_SEAWEED_SKYSCRAPERS: string;
                        MAP_SHIPWRECK_SHORE_SECLUDED_SHORE: string;
                        MAP_SHIPWRECK_SHORE_SECOND_SHIP_RAMP: string;
                        MAP_SHIPWRECK_SHORE_SECRET_SHORE: string;
                        MAP_SHIPWRECK_SHORE_SECRET_SHORE_SPACE: string;
                        MAP_SHIPWRECK_SHORE_SHORELINE: string;
                        MAP_SHIPWRECK_SHORE_SUNKEN_SECRET: string;
                        MAP_SHIPWRECK_SHORE_UNDERWATER_ALCOVE: string;
                        MAP_SHIPWRECK_SHORE_UPPER_DECK: string;
                        MAP_SHIVERCHILL_BOKS_CAVE: string;
                        MAP_SHIVERCHILL_BORDERLAND: string;
                        MAP_SHIVERCHILL_DUNGEON_HUB: string;
                        MAP_SHIVERCHILL_FROZEN_PASS: string;
                        MAP_SHIVERCHILL_FURNACE_ROOM: string;
                        MAP_SHIVERCHILL_GATE: string;
                        MAP_SHIVERCHILL_HIDDEN_ROOM: string;
                        MAP_SHIVERCHILL_MOUNTAIN_PASS: string;
                        MAP_SHIVERCHILL_MOUNTAIN_VALLEY: string;
                        MAP_SHIVERCHILL_RAIL_RUINS: string;
                        MAP_SHIVERCHILL_ROYAL_PASSAGE: string;
                        MAP_SHIVERCHILL_RUINED_ENTRANCE: string;
                        MAP_SHIVERCHILL_RUINED_PASSAGE: string;
                        MAP_SHIVERCHILL_RUINED_STEPS: string;
                        MAP_SHIVERCHILL_THE_CHASM: string;
                        MAP_SHIVERCHILL_TREASURE_ROOM: string;
                        MAP_SHIVERCHILL_WORMS_REST: string;
                        MAP_SKYWATCH_BLAST_DOORS: string;
                        MAP_SKYWATCH_BREEZY_PASS: string;
                        MAP_SKYWATCH_CLOUDY_PASS: string;
                        MAP_SKYWATCH_END_CHAMBER: string;
                        MAP_SKYWATCH_FACTORY_ENTRANCE: string;
                        MAP_SKYWATCH_FACTORY_MAIN_HALL: string;
                        MAP_SKYWATCH_GARDENERS_HUT_EXTERIOR: string;
                        MAP_SKYWATCH_GARDENERS_HUT_INNER: string;
                        MAP_SKYWATCH_GREAT_GRATERS: string;
                        MAP_SKYWATCH_INNER_SCREWBALL_SHACK: string;
                        MAP_SKYWATCH_LOWER_BEANOVATOR: string;
                        MAP_SKYWATCH_MAIN_HALL: string;
                        MAP_SKYWATCH_OLD_MANS_ROOM: string;
                        MAP_SKYWATCH_OUTSKIRTS: string;
                        MAP_SKYWATCH_SCREWBALL_SHACK: string;
                        MAP_SKYWATCH_SKY_SHOWER: string;
                        MAP_SKYWATCH_UPPER_BEANOVATOR: string;
                        MAP_SKYWATCH_WIND_TUNNEL: string;
                        MAP_TITAN_GROUNDS: string;
                        MAP_TOY_ZONE_DRAGONS_LAIR: string;
                        MAP_TOY_ZONE_EPIC_ZONE: string;
                        MAP_TOY_ZONE_MYSTIC_ROTUNDA: string;
                        MAX_STARS_EARNED: string;
                        MEMBER_AD_ERROR_BODY: string;
                        MEMBER_AD_PURCHASE_FAILED_BODY: string;
                        MEMBER_AD_PURCHASE_PENDING_BODY: string;
                        MEMBER_AD_SUCCESS_BODY: string;
                        MEMBER_AD_SUCCESS_TITLE: string;
                        MEMBER_AD_VISIT_SITE_BODY: string;
                        MEMBER_MART_STORE_NAME: string;
                        MEMBER_MART_TIME_OUT_MESSAGE: string;
                        MEMBER_MART_TIME_REMAINING: string;
                        MEMBER_PROMPT_BECOME_MEMBER: string;
                        MEMBER_PROMPT_BUY_NOW: string;
                        MEMBER_PROMPT_JOIN_GOLD: string;
                        MEMBER_PROMPT_MEMBERSHIP: string;
                        MEMBER_PROMPT_REWARD_GOLD: string;
                        MEMBER_STARS_EARNED: string;
                        MEMBERS_COLLECT_MORE_XP: string;
                        MEMBERSHIP_AD_SCHOOL_CONTENT: string;
                        MEMBERSHIP_AD_SCHOOL_TITLE: string;
                        MEMBERSHIP_AMAZING_THINGS: string;
                        MEMBERSHIP_AWESOME_GEAR: string;
                        MEMBERSHIP_BECOME_MEMBER: string;
                        MEMBERSHIP_CLOUD_MOUNT: string;
                        MEMBERSHIP_CONGRATULATIONS: string;
                        MEMBERSHIP_GET_MONTHLY_BOX: string;
                        MEMBERSHIP_GET_MOUNT: string;
                        MEMBERSHIP_GET_MOUNT_BODY: string;
                        MEMBERSHIP_LEARN_MORE: string;
                        MEMBERSHIP_MONTHLY_BOX_DESCRIPTION: string;
                        MEMBERSHIP_MONTHLY_BOX_TITLE: string;
                        MEMBERSHIP_MOUNT_EQUIP: string;
                        MEMBERSHIP_SUCCESS_RELOAD_MESSAGE: string;
                        MEMBERSHIP_SUPPRESSION_BODY: string;
                        MEMBERSHIP_SUPPRESSION_HEADER: string;
                        MEMBERSHIP_TITAN_CATAPULT_BODY_0: string;
                        MEMBERSHIP_TITAN_CATAPULT_BODY_1: string;
                        MEMBERSHIP_TITAN_CATAPULT_BODY_2: string;
                        MEMBERSHIP_TITAN_CATAPULT_BODY_3: string;
                        MEMBERSHIP_TITAN_CATAPULT_GRAPHIC_0: string;
                        MEMBERSHIP_TITAN_CATAPULT_GRAPHIC_1: string;
                        MEMBERSHIP_TITAN_CATAPULT_TITLE: string;
                        MERCHANT_NEW_ITEMS: string;
                        MESSAGE_TITLE_OOPS: string;
                        MESSAGE_TITLE_UH_OH: string;
                        MINI_GAME_BUTTON_CANCEL: string;
                        MINI_GAME_BUTTON_HOW_TO: string;
                        MINI_GAME_BUTTON_START: string;
                        MINI_GAME_NOT_ENOUGH_GOLD: string;
                        MONEY: string;
                        MONTH_NAME_1: string;
                        MONTH_NAME_10: string;
                        MONTH_NAME_11: string;
                        MONTH_NAME_12: string;
                        MONTH_NAME_2: string;
                        MONTH_NAME_3: string;
                        MONTH_NAME_4: string;
                        MONTH_NAME_5: string;
                        MONTH_NAME_6: string;
                        MONTH_NAME_7: string;
                        MONTH_NAME_8: string;
                        MONTH_NAME_9: string;
                        MORE_TO_DISCOVER: string;
                        MORPH_END_MESSAGE: string;
                        MORPH_START_NEW: string;
                        MOVE_HOUSE_CONFIRM: string;
                        MUSEUM_COLLECTED_ALL_FOSSILS: string;
                        MUSEUM_CRAFT_FOSSILS_0: string;
                        MUSEUM_CRAFT_FOSSILS_1: string;
                        MUSEUM_INTRO: string;
                        MUSIC_VOLUME_LABEL: string;
                        MYTHICS_UPSELL_TITLE: string;
                        N_PERCENT: string;
                        NAME_APPRENTICE: string;
                        NAME_CHANGE_BUTTON_DONE: string;
                        NAME_CHANGE_CHANGE_TO: string;
                        NAME_CHANGE_CHOOSE_TITLE: string;
                        NAME_CHANGE_NAME_WIZARD: string;
                        NAME_CHANGE_REVERT_CHANGE: string;
                        NAME_CHANGE_SUCCESS: string;
                        NETWORK_ALL_GOOD: string;
                        NETWORK_CANNOT_CONNECT: string;
                        NETWORK_CANNOT_CONNECT_TIMER: string;
                        NETWORK_CHECK_CONNECTION: string;
                        NETWORK_ERROR: string;
                        NETWORK_ERROR_SKILLS: string;
                        NETWORK_FORBIDDEN: string;
                        NETWORK_GOING_OFFLINE: string;
                        NETWORK_INCORRECT_USERNAME_PASSWORD: string;
                        NETWORK_LOGGED_IN_ELSEWHERE: string;
                        NETWORK_OFFLINE: string;
                        NETWORK_OUT_OF_DATE: string;
                        NETWORK_TRY_LATER: string;
                        NEW_MEMBER_WW_AD_BODY: string;
                        NEW_MEMBER_WW_AD_TITLE: string;
                        NEW_MEMBER_WW_TOOLTIP_BODY: string;
                        NEW_MEMBER_WW_TOOLTIP_TITLE: string;
                        NEW_STARLIGHT_HIGHLIGHT: string;
                        NICKNAME_REQUIRE_CATCH_MIMIC: string;
                        NICKNAME_REQUIRE_COMPLETEQUEST: string;
                        NICKNAME_REQUIRE_HALFQUEST: string;
                        NICKNAME_REQUIRE_MEMBERSHIP: string;
                        NICKNAME_REQUIRE_PIRATE_SET: string;
                        NICKNAME_REQUIRE_ROBOLYMPICS: string;
                        NICKNAME_REQUIRE_ROBOT_SET: string;
                        NICKNAME_REQUIRE_SHIPWRECK_COMPLETE: string;
                        NICKNAME_REQUIRE_TECH_GOBBLER: string;
                        NICKNAMER_BUTTON_APPLY: string;
                        NICKNAMER_DEFAULT_TITLE: string;
                        NICKNAMER_MEMBER_LOCKED_NAME: string;
                        NICKNAMER_ORIGINAL: string;
                        NICKNAMER_TITLE_BONFIRE: string;
                        NICKNAMER_TITLE_FIREFLY: string;
                        NICKNAMER_TITLE_SHIPWRECK: string;
                        NICKNAMER_TITLE_SHIVERCHILL: string;
                        NICKNAMER_TITLE_SKYWATCH: string;
                        NICKNAMER_TITLE_SUMMERFEST: string;
                        NO_CATCHING_MONSTER_ON_ISLAND: string;
                        NO_EPICS_AVAILABLE: string;
                        NO_TEXT: string;
                        NON_MEMBER_RESCUE_EVOLVED: string;
                        NON_MEMBER_RESCUE_EVOLVED_SCHOOL: string;
                        NOT_NOW: string;
                        NOW_LEAVING_PRODIGY: string;
                        NPC_NAME_ACADEMY_MERCHANT: string;
                        NPC_NAME_ADA: string;
                        NPC_NAME_ANCIENT: string;
                        NPC_NAME_ARENA_CALLER: string;
                        NPC_NAME_ARENA_MASTER: string;
                        NPC_NAME_ARENA_MERCHANT: string;
                        NPC_NAME_ASPEN_FROST: string;
                        NPC_NAME_ASSISTANT_SPOKES: string;
                        NPC_NAME_ATHENA: string;
                        NPC_NAME_BARGO: string;
                        NPC_NAME_BARRY_BOSS: string;
                        NPC_NAME_BENNI: string;
                        NPC_NAME_BLAZE: string;
                        NPC_NAME_BOARDY: string;
                        NPC_NAME_BOOMBOX: string;
                        NPC_NAME_BROCCOLINA: string;
                        NPC_NAME_CALEB_FORESTMASTER: string;
                        NPC_NAME_CEBOLLINI: string;
                        NPC_NAME_CHESTER_COPPERPAN: string;
                        NPC_NAME_CHILLY: string;
                        NPC_NAME_CLANKBOOT: string;
                        NPC_NAME_CRABBSY: string;
                        NPC_NAME_CRYSTAL_GOLEM: string;
                        NPC_NAME_CRYSTAL_THIEF: string;
                        NPC_NAME_CUMULO: string;
                        NPC_NAME_DON_ZORRO: string;
                        NPC_NAME_EGG_COLLECTOR: string;
                        NPC_NAME_EUGENE: string;
                        NPC_NAME_EVE: string;
                        NPC_NAME_FIRIA: string;
                        NPC_NAME_FLORA: string;
                        NPC_NAME_FLORIAN: string;
                        NPC_NAME_FOREST_THIEF: string;
                        NPC_NAME_FREEZY: string;
                        NPC_NAME_FROSTY: string;
                        NPC_NAME_FROSTY_STORM: string;
                        NPC_NAME_GALE: string;
                        NPC_NAME_GERALD: string;
                        NPC_NAME_GEROME: string;
                        NPC_NAME_GLACIAS: string;
                        NPC_NAME_GRUMPY_YETI: string;
                        NPC_NAME_GUARD: string;
                        NPC_NAME_GUARD_SLIME: string;
                        NPC_NAME_GUARDIAN: string;
                        NPC_NAME_HANK: string;
                        NPC_NAME_HARRIET_HOOD: string;
                        NPC_NAME_HARVEY: string;
                        NPC_NAME_HOWARD_CORNELIUS: string;
                        NPC_NAME_ICE_WORM: string;
                        NPC_NAME_IVIRA: string;
                        NPC_NAME_JELLY_JIM: string;
                        NPC_NAME_JULIA_GHOULIA: string;
                        NPC_NAME_KANDI_KORN: string;
                        NPC_NAME_KOI: string;
                        NPC_NAME_LOTNEY_CHUNK: string;
                        NPC_NAME_LUCKY_JACK: string;
                        NPC_NAME_LUMINITE: string;
                        NPC_NAME_MAMA_STAR: string;
                        NPC_NAME_MARY_FIRE: string;
                        NPC_NAME_MARY_MOSS: string;
                        NPC_NAME_MERCHANT: string;
                        NPC_NAME_MIKE: string;
                        NPC_NAME_MILLY: string;
                        NPC_NAME_MINER: string;
                        NPC_NAME_MIRA_SHADE: string;
                        NPC_NAME_MIST: string;
                        NPC_NAME_MIZU: string;
                        NPC_NAME_MOOG_ASSISTANT: string;
                        NPC_NAME_MOOGS_HENCHMAN: string;
                        NPC_NAME_MORRIS: string;
                        NPC_NAME_MOZZA_ELLE: string;
                        NPC_NAME_MUGS: string;
                        NPC_NAME_NOOT: string;
                        NPC_NAME_OLD_ONE: string;
                        NPC_NAME_PIPPET: string;
                        NPC_NAME_PRIMO_AND_MOOG: string;
                        NPC_NAME_PROFESSOR_SCOOG: string;
                        NPC_NAME_PUPPETMASTER: string;
                        NPC_NAME_QUEEN_GOO_LIA: string;
                        NPC_NAME_RAINY_STORM: string;
                        NPC_NAME_ROCKSY: string;
                        NPC_NAME_RUTHERFORD: string;
                        NPC_NAME_SANDY_STORM: string;
                        NPC_NAME_SCIENTIST_SLIME: string;
                        NPC_NAME_SCOOG: string;
                        NPC_NAME_SHADOW_WYRM: string;
                        NPC_NAME_SHOPKEEPER_FIGG: string;
                        NPC_NAME_SIR_VEY: string;
                        NPC_NAME_SLURPY: string;
                        NPC_NAME_SPINNER: string;
                        NPC_NAME_STACHE: string;
                        NPC_NAME_STAMPSY: string;
                        NPC_NAME_STORMY_STORM: string;
                        NPC_NAME_SWOOPY: string;
                        NPC_NAME_THIEF: string;
                        NPC_NAME_TITAN_BARRIER: string;
                        NPC_NAME_TOY_MERCHANT: string;
                        NPC_NAME_TRIPTROP_TAK: string;
                        NPC_NAME_TRIPTROP_TED: string;
                        NPC_NAME_TRIPTROP_TOM: string;
                        NPC_NAME_ULLA: string;
                        NPC_NAME_any: string;
                        NPC_NAME_VERNA: string;
                        NPC_NAME_WHEELER: string;
                        NPC_NAME_WINSTON: string;
                        NPC_NAME_WIZARD: string;
                        NPC_NAME_WOODSMAN_MIKE: string;
                        NPC_NAME_WORKER_SLIME: string;
                        NTH_TRIAL: string;
                        NTH_TRIAL_OF_THE_ANCIENT: string;
                        ONE_TIME_EVOLUTION: string;
                        OPEN_CHEST: string;
                        OPEN_URL_AT_HOME: string;
                        OPEN_URL_IN_APP: string;
                        OPEN_VIDEO_AT_HOME: string;
                        OPENING_A_VIDEO_DURING_SCHOOL: string;
                        PAGE_COUNT_PROGRESS: string;
                        PAGE_NUMBER: string;
                        PAINT_BALLOON_INSTRUCTIONS: string;
                        PARENT_ATTACH_AT_HOME_IS: string;
                        PARENT_ATTACH_BACK_TO_GAME: string;
                        PARENT_ATTACH_BIRTHDAY_DETAILS: string;
                        PARENT_ATTACH_BIRTHDAY_PROMPT: string;
                        PARENT_ATTACH_BUTTON_BACK: string;
                        PARENT_ATTACH_BUTTON_OKAY: string;
                        PARENT_ATTACH_BUTTON_PARENT: string;
                        PARENT_ATTACH_BUTTON_UNLOCK: string;
                        PARENT_ATTACH_BUTTON_USE_TICKET: string;
                        PARENT_ATTACH_CAN_PLAY: string;
                        PARENT_ATTACH_CHANCE: string;
                        PARENT_ATTACH_CHECK_LOGIN: string;
                        PARENT_ATTACH_CREATE_ACCOUNT: string;
                        PARENT_ATTACH_CREATE_FREE: string;
                        PARENT_ATTACH_CREATED: string;
                        PARENT_ATTACH_GET_PARENT: string;
                        PARENT_ATTACH_LEARN_HOME: string;
                        PARENT_ATTACH_LOCKED: string;
                        PARENT_ATTACH_LOGIN_DETAILS: string;
                        PARENT_ATTACH_LOOP: string;
                        PARENT_ATTACH_NAME_DETAILS: string;
                        PARENT_ATTACH_NAME_PROMPT: string;
                        PARENT_ATTACH_NEXT_STEPS: string;
                        PARENT_ATTACH_NOT_CREATED: string;
                        PARENT_ATTACH_PARENT_ACCOUNT: string;
                        PARENT_ATTACH_PARENT_UNLOCK_PROMPT: string;
                        PARENT_ATTACH_PASSWORD: string;
                        PARENT_ATTACH_PASSWORD_DETAILS: string;
                        PARENT_ATTACH_PLAY_ALL_AREAS: string;
                        PARENT_ATTACH_PLAYING_AT_HOME_IS: string;
                        PARENT_ATTACH_PROBLEM: string;
                        PARENT_ATTACH_SUCCESS_AT_HOME: string;
                        PARENT_ATTACH_TICKETS_LEFT: string;
                        PARENT_ATTACH_TICKETS_UNTIL_PLAYING: string;
                        PARENT_ATTACH_TO: string;
                        PARENT_ATTACH_TRY_AGAIN: string;
                        PARENT_ATTACH_UNLOCK_AT_HOME: string;
                        PARENT_ATTACH_UNSUCCESSFUL: string;
                        PARENT_ATTACH_USE_ONE_TICKET: string;
                        PARENT_ATTACH_USED_A_TICKET: string;
                        PARENT_ATTACH_USED_ALL: string;
                        PARENT_ATTACH_USERNAME: string;
                        PARENT_ATTACH_USERNAME_DETAILS: string;
                        PARENT_ATTACH_WORLDS: string;
                        PARENT_ATTACH_YOU_HAVE: string;
                        PARENT_ATTACH_YOU_NOW_HAVE: string;
                        PARENT_EMAIL_BUTTON: string;
                        PARENT_EMAIL_CONTENT: string;
                        PARENT_EMAIL_MSG_BUTTON: string;
                        PARENT_EMAIL_MSG_CONTENT: string;
                        PARENT_EMAIL_TEXT: string;
                        PARENT_LINK_AT_SCHOOL_BODY: string;
                        PARENT_LINK_INFO_BODY: string;
                        PARENT_LINK_MOBILE_MESSAGE: string;
                        PARENT_LINK_POST_CLICK: string;
                        PARENT_LINK_REPLAY: string;
                        PARENT_LINK_SCHOOL_HOURS: string;
                        PARENT_LINK_SUCCESS_BODY: string;
                        PARENT_LINK_TRIAL_BODY: string;
                        PARENT_LINK_TRIAL_HOME_TITLE: string;
                        PARENT_LINK_TRIAL_SCHOOL_TITLE: string;
                        PARENTAL_CONSENT_APPROVED: string;
                        PARENTAL_CONSENT_EXPLANATION: string;
                        PARENTAL_CONSENT_NOT_REQUESTED: string;
                        PARENTAL_CONSENT_NOT_REQUIRED: string;
                        PARENTAL_CONSENT_REQUESTED: string;
                        PARENTAL_LINK_BACK_TO_GAME: string;
                        PARENTAL_LINK_BIRTH: string;
                        PARENTAL_LINK_BIRTH_INFO: string;
                        PARENTAL_LINK_BUTTON: string;
                        PARENTAL_LINK_BUTTON_SUCCESS: string;
                        PARENTAL_LINK_CONFIRM_BODY_1: string;
                        PARENTAL_LINK_CONFIRM_BODY_2: string;
                        PARENTAL_LINK_CONFIRM_BODY_3: string;
                        PARENTAL_LINK_CONTENT: string;
                        PARENTAL_LINK_CONTENT_SCHOOL: string;
                        PARENTAL_LINK_CONTINUE: string;
                        PARENTAL_LINK_CREATE_ACCOUNT: string;
                        PARENTAL_LINK_EMAIL: string;
                        PARENTAL_LINK_EMAIL_INFO: string;
                        PARENTAL_LINK_FAILED_BODY_1: string;
                        PARENTAL_LINK_FAILED_BODY_2: string;
                        PARENTAL_LINK_FAILED_BODY_3: string;
                        PARENTAL_LINK_FULL_NAME_INFO: string;
                        PARENTAL_LINK_INFO_BODY_1: string;
                        PARENTAL_LINK_INFO_BODY_2: string;
                        PARENTAL_LINK_INFO_BODY_3: string;
                        PARENTAL_LINK_INFO_BODY_4: string;
                        PARENTAL_LINK_INVALID_BIRTH: string;
                        PARENTAL_LINK_INVALID_EMAIL: string;
                        PARENTAL_LINK_INVALID_PASSWORD: string;
                        PARENTAL_LINK_PARENT_NAME: string;
                        PARENTAL_LINK_PASSWORD: string;
                        PARENTAL_LINK_PASSWORD_INFO: string;
                        PARENTAL_LINK_PLAY: string;
                        PARENTAL_LINK_PRIVACY_BUTTON: string;
                        PARENTAL_LINK_SCHOOL_CONTENT: string;
                        PARENTAL_LINK_SIGNUP: string;
                        PARENTAL_LINK_SKIP: string;
                        PARENTAL_LINK_TERMS_BUTTON: string;
                        PARENTAL_LINK_TERMS_DESKTOP: string;
                        PARENTAL_LINK_TERMS_MOBILE: string;
                        PARENTAL_LINK_TERMS_MUST_ACCEPT: string;
                        PARENTAL_LINK_TITLE: string;
                        PARENTAL_LINK_TITLE_SUCCESS: string;
                        PARENTAL_LINK_TRIAL_ENDED_BODY_1: string;
                        PARENTAL_LINK_TRIAL_ENDED_BODY_2: string;
                        PARENTAL_LINK_TRIAL_ENDED_TITLE: string;
                        PARENTAL_LINK_TRIAL_LINK: string;
                        PARENTAL_LINK_TRIAL_SKIP: string;
                        PARENTAL_LINK_TRIAL_TITLE: string;
                        PARENTAL_LINK_USERNAME: string;
                        PARENTAL_LINK_USERNAME_INFO: string;
                        PARENTAL_LINK_VIDEO_CONTENT_1: string;
                        PARENTAL_LINK_VIDEO_CONTENT_2: string;
                        PARENTAL_POPUP_ATTACH_FAILED: string;
                        PARENTAL_POPUP_BACK: string;
                        PARENTAL_POPUP_LOGIN: string;
                        PARENTAL_POPUP_MESSAGE: string;
                        PARTY_FULL_ERROR: string;
                        PARTY_JOIN_FAILED_ERROR: string;
                        PARTY_WAS_CANCELLED: string;
                        PASSWORD_ERROR_MATCHES: string;
                        PASSWORD_ERROR_NO_MATCH: string;
                        PASSWORD_ERROR_NO_SPACES: string;
                        PASSWORD_ERROR_TOO_LONG: string;
                        PASSWORD_ERROR_TOO_SHORT: string;
                        PET_ADDED_TO_TEAM: string;
                        PET_ADVENTURES_TITLE: string;
                        PET_ALREADY_ON_TEAM: string;
                        PET_EVOLUTION: string;
                        PET_EVOLVED_INTO: string;
                        PET_EVOLVED_INTO_FREE_EVOLUTION: string;
                        PET_IS_EVOLVING: string;
                        PET_LORE_CHARFOAL_BODY: string;
                        PET_LORE_CHARFOAL_TITLE: string;
                        PET_LORE_MERMINA_BODY: string;
                        PET_LORE_MERMINA_TITLE: string;
                        PET_LORE_SNOWFLUFF_BODY: string;
                        PET_LORE_SNOWFLUFF_TITLE: string;
                        PET_LORE_SPROOT_BODY: string;
                        PET_LORE_SPROOT_TITLE: string;
                        PET_LORE_WOTT_BODY: string;
                        PET_LORE_WOTT_TITLE: string;
                        PET_MENU_BESTIARY: string;
                        PET_MENU_MY_TEAM: string;
                        PET_WAS_LET_GO: string;
                        PET_XP_BOOST_BATTLE_STARS_EARNED: string;
                        PET_XP_BOOST_RESULTS_MENU_SUB_TEXT: string;
                        PETS_BUTTON_SET_FREE: string;
                        PETS_CONFIRM_LEAVE: string;
                        PETS_DESCRIPTION: string;
                        PETS_DONT_OWN: string;
                        PETS_GROWTH: string;
                        PETS_I_OWN: string;
                        PETS_LIFE: string;
                        PETS_MY_TEAM: string;
                        PETS_POWER: string;
                        PETS_TYPE: string;
                        PLAY_AT_HOME_BUY_ITEM: string;
                        PLAY_AT_HOME_DANCE: string;
                        PLAY_AT_HOME_EVOLVE_PETS: string;
                        PLAY_AT_HOME_MEMBER_BOUNTY: string;
                        PLAY_AT_HOME_MEMBER_CHESTS: string;
                        PLAY_AT_HOME_MEMBER_HUD: string;
                        PLAY_AT_HOME_MEMBER_PETS: string;
                        PLAY_AT_HOME_MORE_EXP: string;
                        PLAY_AT_HOME_MORE_EXP_CLASS_LEADERS: string;
                        PLAY_AT_HOME_MORE_GOLD: string;
                        PLAY_AT_HOME_NICKNAME: string;
                        PLAY_AT_HOME_NOT_MEMBER_HUD: string;
                        PLAY_AT_HOME_PLACEHOLDER: string;
                        PLAY_AT_HOME_PREMIUM_ITEM: string;
                        PLAY_AT_HOME_TITLE: string;
                        PLAY_AT_HOME_TOWER: string;
                        PLAY_AT_HOME_TWILIGHT_WHEEL: string;
                        PLAY_AT_HOME_WHEEL_SPIN: string;
                        PLAY_HOME_CONTINUE_ADVENTURE: string;
                        PLAY_HOME_DISPLAY_PASSWORD: string;
                        PLAY_HOME_DISPLAY_USERNAME: string;
                        PLAY_HOME_ENJOY_EVERYWHERE: string;
                        PLAY_HOME_WRITE_DOWN_CREDENTIALS: string;
                        PLAYER_CARD_ADD_FRIEND_BOT: string;
                        PLAYER_CARD_ADD_FRIEND_TOP: string;
                        PLAYER_CARD_ARENA: string;
                        PLAYER_CARD_BATTLE_BUTTON_TOP: string;
                        PLAYER_CARD_CANCEL_FRIEND_BOT: string;
                        PLAYER_CARD_CANCEL_FRIEND_TOP: string;
                        PLAYER_CARD_CHANGE_STYLE_BUTTON_BOT: string;
                        PLAYER_CARD_CHANGE_STYLE_BUTTON_TOP: string;
                        PLAYER_CARD_CONFIRM_REMOVE_BODY: string;
                        PLAYER_CARD_CONFIRM_REMOVE_TITLE: string;
                        PLAYER_CARD_FLOOR: string;
                        PLAYER_CARD_GEAR_BUTTON_BOT: string;
                        PLAYER_CARD_GEAR_BUTTON_TOP: string;
                        PLAYER_CARD_GEMS_BUTTON_BOT: string;
                        PLAYER_CARD_GO_TO_HOUSE_BUTTON_BOT: string;
                        PLAYER_CARD_GO_TO_HOUSE_BUTTON_TOP: string;
                        PLAYER_CARD_GOLD: string;
                        PLAYER_CARD_HEARTS: string;
                        PLAYER_CARD_KEY_ITEMS_BUTTON_BOT: string;
                        PLAYER_CARD_KEY_ITEMS_BUTTON_TOP: string;
                        PLAYER_CARD_MAX: string;
                        PLAYER_CARD_REMOVE_FRIEND_BOT: string;
                        PLAYER_CARD_REMOVE_FRIEND_TOP: string;
                        PLAYER_CARD_REPORT_BUTTON_TEXT: string;
                        PLAYER_CARD_STARS: string;
                        PLAYER_CARD_STATS_BUTTON_BOT: string;
                        PLAYER_CARD_STATS_BUTTON_TOP: string;
                        PLAYER_CARD_TOWER: string;
                        PLAYER_CARD_VISIT_HOUSE_BUTTON_BOT: string;
                        PLAYER_CARD_VISIT_HOUSE_BUTTON_TOP: string;
                        PLAYER_CARD_WIN_LOSS: string;
                        PLAYER_LOADOUT_SCORE: string;
                        POTION_USE_ALREADY_ONE: string;
                        POTION_USE_ONLY_WILD: string;
                        POTION_USE_UNSPORTSMAN: string;
                        POUCH_BUTTON_SEARCH: string;
                        POUCH_CHOOSE_BOOTS: string;
                        POUCH_CHOOSE_FOLLOW: string;
                        POUCH_CHOOSE_HAT: string;
                        POUCH_CHOOSE_OUTFIT: string;
                        POUCH_CHOOSE_RING: string;
                        POUCH_CHOOSE_SPELL: string;
                        POUCH_CHOOSE_SPELLRELIC: string;
                        POUCH_CHOOSE_WEAPON: string;
                        POUCH_SEARCH_FAILED: string;
                        PROCEED_ANYWAY: string;
                        PROGRESS_BAR_COMPLETE: string;
                        PROJECTILE_INSTRUCTIONS: string;
                        PUMPKINFEST_AD_BODY: string;
                        PUMPKINFEST_AD_TITLE: string;
                        PUMPKINFEST_CONFIRM_TRAVEL: string;
                        PUMPKINFEST_SIGN_MESSAGE: string;
                        PUMPKINFEST_SIGN_TITLE: string;
                        PUMPKINFEST_TOOLTIP_BODY: string;
                        PUMPKIPUFF_INSTRUCTIONS: string;
                        PURCHASING_MESSAGE_ALREADY_LIVE_BODY: string;
                        PURCHASING_MESSAGE_ALREADY_LOOK_BODY: string;
                        PURCHASING_MESSAGE_HAVE_ITEM_BODY: string;
                        PURCHASING_MESSAGE_HAVE_PET_BODY: string;
                        PURCHASING_MESSAGE_NEED_MORE_CURRENCY_BODY: string;
                        PURCHASING_MESSAGE_NEED_MORE_GOLD_BODY: string;
                        PURCHASING_MESSAGE_TOO_MANY_ITEMS_BODY: string;
                        PURCHASING_MESSAGE_TOO_MANY_PETS_BODY: string;
                        PVP_ARENA_ANCIENT_POPUP_MESSAGE: string;
                        PVP_ARENA_BATTLES_LOST: string;
                        PVP_ARENA_BATTLES_WON: string;
                        PVP_ARENA_BELOW_REQUIREMENTS_REDIRECT: string;
                        PVP_ARENA_BELOW_REQUIREMENTS_TOOLTIP: string;
                        PVP_ARENA_BRONZE_TIER_1: string;
                        PVP_ARENA_BRONZE_TIER_2: string;
                        PVP_ARENA_BRONZE_TIER_3: string;
                        PVP_ARENA_BRONZE_TRIM: string;
                        PVP_ARENA_CHALLENGE_THE_ANCIENT: string;
                        PVP_ARENA_CHAMPION_TRIM: string;
                        PVP_ARENA_CHOOSE_CHALLENGER_TITLE: string;
                        PVP_ARENA_CUSTOMIZE_TEAM_TITLE: string;
                        PVP_ARENA_ENTER_BUTTON: string;
                        PVP_ARENA_ERROR_MESSAGE: string;
                        PVP_ARENA_GOLD_TIER_1: string;
                        PVP_ARENA_GOLD_TIER_2: string;
                        PVP_ARENA_GOLD_TIER_3: string;
                        PVP_ARENA_GOLD_TRIM: string;
                        PVP_ARENA_LEVEL_REACHED: string;
                        PVP_ARENA_LOADING_LEADERBOARD: string;
                        PVP_ARENA_LOADING_OPPONENTS: string;
                        PVP_ARENA_MASTER_BELOW_REQUIREMENTS: string;
                        PVP_ARENA_MASTER_CHALLENGER_1: string;
                        PVP_ARENA_MASTER_CHALLENGER_2: string;
                        PVP_ARENA_MASTER_ENCOUNTER_1: string;
                        PVP_ARENA_MASTER_ENCOUNTER_2: string;
                        PVP_ARENA_MASTER_ENCOUNTER_3: string;
                        PVP_ARENA_MASTER_ENCOUNTER_4: string;
                        PVP_ARENA_MASTER_ENCOUNTER_5: string;
                        PVP_ARENA_MASTER_LEADERBOARD_INTRO: string;
                        PVP_ARENA_MASTER_LEADERBOARD_INTRO_REWARD: string;
                        PVP_ARENA_MASTER_LEAGUE_PLACEMENT_1: string;
                        PVP_ARENA_MASTER_LEAGUE_PLACEMENT_2: string;
                        PVP_ARENA_MASTER_NO_RUNES_1: string;
                        PVP_ARENA_MASTER_NO_RUNES_2: string;
                        PVP_ARENA_MASTER_RETURNING_PLAYER_1: string;
                        PVP_ARENA_MASTER_RETURNING_PLAYER_2: string;
                        PVP_ARENA_MASTER_RUNES_GATHERED: string;
                        PVP_ARENA_MASTER_RUNES_GATHERED_PORTAL: string;
                        PVP_ARENA_MASTER_RUNES_INTRO_1: string;
                        PVP_ARENA_MASTER_RUNES_INTRO_2: string;
                        PVP_ARENA_MASTER_RUNES_INTRO_3: string;
                        PVP_ARENA_MASTER_SEASON_PROGRESS_1: string;
                        PVP_ARENA_MASTER_SEASON_PROGRESS_2: string;
                        PVP_ARENA_MASTER_SEASON_PROGRESS_3: string;
                        PVP_ARENA_NO_ACTIVE_SEASON: string;
                        PVP_ARENA_OPPONENT_REWARD: string;
                        PVP_ARENA_POINTS: string;
                        PVP_ARENA_SILVER_TIER_1: string;
                        PVP_ARENA_SILVER_TIER_2: string;
                        PVP_ARENA_SILVER_TIER_3: string;
                        PVP_ARENA_SILVER_TRIM: string;
                        PVP_ARENA_TELEPORTER_BELOW_REQUIREMENTS: string;
                        PVP_ARENA_TOOLTIP_CHOOSE_CHALLENGER: string;
                        PVP_ARENA_TOTAL_TROPHIES_EARNED: string;
                        PVP_ARENA_UNLOCKED_BUTTON: string;
                        PVP_ARENA_UNLOCKED_DIALOG: string;
                        PVP_CONNECTING_NOW: string;
                        PVP_DISCONNECT_WARNING_BODY: string;
                        PVP_DISCONNECT_WARNING_TITLE: string;
                        PVP_FINDING_MATCH_BODY: string;
                        PVP_FINDING_MATCH_TITLE: string;
                        PVP_INTRO: string;
                        PVP_OPPONENT_LOST: string;
                        PVP_OPPONENT_WIN: string;
                        PVP_PLAYERNAME: string;
                        PVP_PRIZE_ACHIEVED_POPUP_BUTTON_TEXT: string;
                        PVP_PRIZE_ACHIEVED_POPUP_MESSAGE: string;
                        PVP_PRIZES_DISCLAIMER: string;
                        PVP_PRIZES_POINTS_REQUIREMENT: string;
                        PVP_PRIZES_RANK_REQUIREMENT: string;
                        PVP_PRIZES_TITLE: string;
                        PVP_RANK_DOWN: string;
                        PVP_RANK_UP: string;
                        PVP_SELECT_ACTION: string;
                        PVP_TIME_REMAINING: string;
                        PVP_VERSUS_SHORT: string;
                        PVP_WAITING_ON_PLAYER: string;
                        PVP_WIN_LOSS: string;
                        QA_LENGTH_TEST: string;
                        QA_LENGTH_TEST_2: string;
                        QA_LENGTH_TEST_3: string;
                        QA_LENGTH_TEST_4: string;
                        QA_LENGTH_TEST_5: string;
                        QUEST_CLEAR: string;
                        QUEST_COMPLETE: string;
                        QUEST_FOLLOW_PATH: string;
                        QUEST_GOALS_DESC_TITLE: string;
                        QUEST_GOALS_FINAL_ZONE: string;
                        QUEST_GOALS_NEXT_ZONE: string;
                        QUEST_GOALS_NEXT_ZONE_TOWER: string;
                        QUEST_GOALS_QUEST_COMPLETE: string;
                        QUEST_GOALS_ZONE_TITLE: string;
                        QUEST_JOB_COMPLETE: string;
                        QUEST_PROGRESS_COLLECT_MORE: string;
                        QUEST_PROGRESS_DEFEAT_MORE: string;
                        QUEST_TODAY: string;
                        QUEST_ZONES_NEXT_GOAL: string;
                        QUEST_ZONES_PROGRESS: string;
                        QUESTS_ACTIVITY_ZONE_DAILY_PLURAL: string;
                        QUESTS_ACTIVITY_ZONE_DAILY_SINGLE: string;
                        QUESTS_BONFIRE_SPIRE_ADD_INGREDIENT: string;
                        QUESTS_BONFIRE_SPIRE_ATTEND_DINNER: string;
                        QUESTS_BONFIRE_SPIRE_DEFEAT_CHEF: string;
                        QUESTS_BONFIRE_SPIRE_FIND_KEY: string;
                        QUESTS_BONFIRE_SPIRE_OFFER_DISH: string;
                        QUESTS_BONFIRE_SPIRE_PULL_LEVER: string;
                        QUESTS_BONFIRE_SPIRE_SAVE_GATHERERS: string;
                        QUESTS_BONFIRE_SPIRE_TALK_TO_GUARDS: string;
                        QUESTS_BONFIRE_SPIRE_TALK_TO_QUEEN: string;
                        QUESTS_BONFIRE_SPIRE_UNLOCK_CHEST: string;
                        QUESTS_BUTTON_START_QUEST: string;
                        QUESTS_DINO_DESC_0: string;
                        QUESTS_DINO_DESC_1: string;
                        QUESTS_DINO_DESC_10: string;
                        QUESTS_DINO_DESC_11: string;
                        QUESTS_DINO_DESC_12: string;
                        QUESTS_DINO_DESC_13: string;
                        QUESTS_DINO_DESC_14: string;
                        QUESTS_DINO_DESC_2: string;
                        QUESTS_DINO_DESC_3: string;
                        QUESTS_DINO_DESC_4: string;
                        QUESTS_DINO_DESC_5: string;
                        QUESTS_DINO_DESC_6: string;
                        QUESTS_DINO_DESC_7: string;
                        QUESTS_DINO_DESC_8: string;
                        QUESTS_DINO_DESC_9: string;
                        QUESTS_DINO_NAME_0: string;
                        QUESTS_DINO_NAME_1: string;
                        QUESTS_DINO_NAME_10: string;
                        QUESTS_DINO_NAME_11: string;
                        QUESTS_DINO_NAME_12: string;
                        QUESTS_DINO_NAME_13: string;
                        QUESTS_DINO_NAME_14: string;
                        QUESTS_DINO_NAME_2: string;
                        QUESTS_DINO_NAME_3: string;
                        QUESTS_DINO_NAME_4: string;
                        QUESTS_DINO_NAME_5: string;
                        QUESTS_DINO_NAME_6: string;
                        QUESTS_DINO_NAME_7: string;
                        QUESTS_DINO_NAME_8: string;
                        QUESTS_DINO_NAME_9: string;
                        QUESTS_FOREST_DEFEAT_THE_TRIO: string;
                        QUESTS_FOREST_FIND_GERALD: string;
                        QUESTS_FOREST_FIX_FLUTE: string;
                        QUESTS_FOREST_TALK_TO_MERCHANT: string;
                        QUESTS_FOREST_WAKE_GERALD: string;
                        QUESTS_SHIPWRECK_CLEAR_INK: string;
                        QUESTS_SHIPWRECK_DEFEAT_BOSS: string;
                        QUESTS_SHIPWRECK_FIND_JIM: string;
                        QUESTS_SHIPWRECK_LOOK_AROUND: string;
                        QUESTS_SHIPWRECK_OPEN_DOOR: string;
                        QUESTS_SHIPWRECK_TAKE_PHOTO: string;
                        QUESTS_SHIVERCHILL_ACTIVATE_FURNACE: string;
                        QUESTS_SHIVERCHILL_CHECK_THRONE: string;
                        QUESTS_SHIVERCHILL_DEFEAT_ICE_WORM: string;
                        QUESTS_SHIVERCHILL_EXPLORE_CAVES: string;
                        QUESTS_SHIVERCHILL_FIND_SHOVEL: string;
                        QUESTS_SHIVERCHILL_HELP_MINER: string;
                        QUESTS_SHIVERCHILL_any: string;
                        QUESTS_SKYWATCH_DEFEAT_BOSS: string;
                        QUESTS_SKYWATCH_FIND_BROCCOLINA: string;
                        QUESTS_SKYWATCH_FIND_EUGENE: string;
                        QUESTS_SKYWATCH_GET_DEVICE: string;
                        QUESTS_SKYWATCH_GET_KEY: string;
                        QUESTS_SKYWATCH_INSPECT_MACHINE: string;
                        QUESTS_SKYWATCH_TRIM_VINES: string;
                        RANGE: string;
                        RANK_STORE_HIGHER_BOUNTY_MESSAGE: string;
                        RANK_STORE_HIGHER_RANK_MESSAGE: string;
                        RANK_STORE_NOT_REACHED: string;
                        RANK_STORE_THIS_RANK: string;
                        RANKS_BRONZE: string;
                        RANKS_DIAMOND: string;
                        RANKS_GOLD: string;
                        RANKS_PLATINUM: string;
                        RANKS_RANK_WRAPPER: string;
                        RANKS_SILVER: string;
                        RANKS_UNRANKED: string;
                        RARITY_COMMON: string;
                        RARITY_HEROIC: string;
                        RARITY_LEGENDARY: string;
                        RARITY_RARE: string;
                        RARITY_UNCOMMON: string;
                        RATING_PROMPT: string;
                        REDBUBBLE_AD_BODY: string;
                        REDBUBBLE_AD_TITLE: string;
                        REDEEM_VOUCHER_BUTTON: string;
                        REDEEM_VOUCHER_CONTENT: string;
                        REGISTRATION_CLASS: string;
                        REGISTRATION_CLASS_CODE_FIND: string;
                        REGISTRATION_CLASS_CODE_GET: string;
                        REGISTRATION_CLASS_CODE_NOT_FOUND: string;
                        REGISTRATION_CLASS_TITLE: string;
                        REGISTRATION_CLICK_HERE: string;
                        REGISTRATION_GRADE: string;
                        REGISTRATION_GRADE_TITLE: string;
                        REGISTRATION_LEARN_MORE: string;
                        REGISTRATION_LEVEL: string;
                        REGISTRATION_LEVEL_TITLE: string;
                        REGISTRATION_LOCATION_DIALOG_BODY: string;
                        REGISTRATION_LOCATION_DIALOG_TITLE: string;
                        REGISTRATION_LOCATION_TITLE: string;
                        REGISTRATION_SUB_OTHER: string;
                        REGISTRATION_WHY_NEED_GRADE: string;
                        REGISTRATION_WHY_NEED_GRADE_REASON: string;
                        REGISTRATION_WHY_NEED_INFO: string;
                        REGISTRATION_WHY_NEED_NAME: string;
                        REGISTRATION_WHY_NEED_NAME_REASON: string;
                        REGISTRATION_YEAR: string;
                        REGISTRATION_YEAR_TITLE: string;
                        REPORT_FAILED_BODY: string;
                        REPORT_FAILED_TITLE: string;
                        REPORT_MODAL_DISCRIPTION: string;
                        REPORT_MODAL_OPTION_A: string;
                        REPORT_MODAL_OPTION_B: string;
                        REPORT_MODAL_OPTION_C: string;
                        REPORT_MODAL_TITLE: string;
                        REPORT_SUCCESS_BODY: string;
                        REPORT_SUCCESS_TITLE: string;
                        RESCUE_PET_PROMPT: string;
                        RESTART: string;
                        REWARDS_BATTLE_PROGRESS: string;
                        REWARDS_LOCKED_BATTLE_PROGRESS: string;
                        ROOF_BLOCKED_FLOOR: string;
                        ROOF_COMPLETE_FLOOR: string;
                        ROOF_DUEL: string;
                        ROOF_FAST: string;
                        ROOF_LUCK: string;
                        ROOF_MASTER: string;
                        ROOF_ONEWAY: string;
                        ROOF_WON: string;
                        RUNE_RUN_FTUE_NOOT_0: string;
                        RUNE_RUN_FTUE_NOOT_1: string;
                        RUNE_RUN_FTUE_NOOT_2: string;
                        RUNE_RUN_MEMBER_LOCKED_BODY: string;
                        RUNE_RUN_MEMBER_LOCKED_TITLE: string;
                        RUNE_RUN_START_ERROR: string;
                        RUNE_RUN_UNAVAILABLE_ERROR: string;
                        SCREEN_SIZE_TITLE: string;
                        SEASON_COMPLETED: string;
                        SEASON_COMPLETED_TITLE: string;
                        SEASON_DETAILS_ARENA_BUTTON: string;
                        SEASON_DETAILS_BUTTON_HEADER: string;
                        SEASON_DETAILS_BUTTON_SUBTEXT: string;
                        SEASON_DETAILS_CHALLENGE_BUTTON_CHALLENGER: string;
                        SEASON_DETAILS_CHALLENGE_BUTTON_FIND: string;
                        SEASON_DETAILS_EARN_BONUS: string;
                        SEASON_DETAILS_NEXT_PRIZE: string;
                        SEASON_DETAILS_POINTS: string;
                        SEASON_DETAILS_POINTS_TITLE: string;
                        SEASON_DETAILS_PRIZE_BUTTON: string;
                        SEASON_DETAILS_REACH_TOP: string;
                        SEASON_DETAILS_SEASON_ENDS: string;
                        SEASON_DETAILS_TAB_BOTTOM: string;
                        SEASON_DETAILS_TAB_TOP: string;
                        SEASON_DETAILS_WEEKLY_EARNED: string;
                        SEASON_NEXT_RANK: string;
                        SEASON_PROGRESS_HEADER: string;
                        SEASON_PROGRESS_LEADERBOARD_BUTTON_CAPITAL: string;
                        SEASON_PROGRESS_REWARDS_BUTTON_CAPITAL: string;
                        SEASON_REWARDS_INFO_TEXT: string;
                        SEASON_REWARDS_TITLE_TEXT: string;
                        SEASON_TO_TOP: string;
                        SEASON_TOP_PLAYERS: string;
                        SEASON_YOUR_POINTS: string;
                        SEASON_YOUR_RANK: string;
                        SEASON_YOUR_RANK_TITLE: string;
                        SECURE_BATTLE_WAITING_CAST_SPELL: string;
                        SECURE_BATTLE_WAITING_GENERIC: string;
                        SECURE_BATTLE_WAITING_SWITCHING: string;
                        SECURE_BATTLE_WAITING_USE_ITEM: string;
                        SEND_GIFT_FEATURE_SOON_MESSAGE_BODY: string;
                        SEND_GIFT_FEATURE_SOON_MESSAGE_TITLE: string;
                        SERVER_CHOOSE_WORLD_TITLE: string;
                        SERVER_CONNECTING_MESSAGE: string;
                        SERVER_ERROR_FAILED_LOAD: string;
                        SERVER_ERROR_FALLBACK: string;
                        SERVER_ERROR_WORLD_FULL: string;
                        SERVER_ERROR_WORLD_SELECTED_FULL: string;
                        SERVER_LOADING_LIST: string;
                        SERVER_PICK_SAME_WORLD: string;
                        SERVER_WIZARDS_ONLINE: string;
                        SERVERS_BUTTON_BACK_TO_WORLDS: string;
                        SERVERS_BUTTON_MORE_WORLDS: string;
                        SERVERS_BUTTON_MY_WORLDS: string;
                        SERVERS_BUTTON_PLAY_OFFLINE: string;
                        SETTINGS_ACCOUNT: string;
                        SETTINGS_GRAPHICS: string;
                        SETTINGS_LOGOUT: string;
                        SETTINGS_MUSIC_VOLUME: string;
                        SETTINGS_NETWORK: string;
                        SETTINGS_OFFLINE: string;
                        SETTINGS_PARENT: string;
                        SETTINGS_RESTORE_DEFAULTS: string;
                        SETTINGS_SOUND: string;
                        SETTINGS_SOUND_VOLUME: string;
                        SETTINGS_TITLE: string;
                        SETTINGS_VOICE_VOLUME: string;
                        SETTINGS_YOUR_WORLD: string;
                        SHIPWRECK_GUARDIAN: string;
                        SHIVERCHILL_FURNACE_FUEL: string;
                        SHIVERCHILL_FURNACE_IN_ORDER: string;
                        SHIVERCHILL_FURNACE_LIT: string;
                        SHIVERCHILL_GUARDIAN: string;
                        SHUFFLE_BUTTON_CAPITAL: string;
                        SIGN_OUT_BUTTON: string;
                        SIGN_OUT_MESSAGE: string;
                        SIGN_OUT_TITLE: string;
                        SIR_VEY_QUESTION_FOR_YOU: string;
                        SKYWATCH_GUARDIAN: string;
                        SKYWATCH_REQUIRE_FACTORY_KEY: string;
                        SKYWATCH_REQUIRE_MASTER_KEY: string;
                        SLOT_MACHINE_BONUS_DAMAGE: string;
                        SLOT_MACHINE_BONUS_GOLD: string;
                        SLOT_MACHINE_BONUS_STARS: string;
                        SLOT_MACHINE_DRAIN: string;
                        SLOT_MACHINE_EVASION_UP: string;
                        SLOT_MACHINE_HEAL_HP: string;
                        SLOT_MACHINE_REDUCE_DAMAGE: string;
                        SNOWBALL_INSTRUCTIONS: string;
                        SO_SLEEPY: string;
                        SOCIAL_MENU_AWARDS_BUTTON_BOT: string;
                        SOCIAL_MENU_BADGES_BUTTON_BOT: string;
                        SOCIAL_MENU_BATTLE_REQUESTS_BUTTON_BOT: string;
                        SOCIAL_MENU_BATTLE_REQUESTS_BUTTON_TOP: string;
                        SOCIAL_MENU_BOUNTIES_BUTTON_BOT: string;
                        SOCIAL_MENU_SEASON_CLASS_LEADERS_BOT: string;
                        SOCIAL_MENU_SEASON_CLASS_LEADERS_TOP: string;
                        SOCIAL_MENU_SEASON_DETAILS_BOT: string;
                        SOCIAL_MENU_SEASON_DETAILS_TOP: string;
                        SOCIAL_MENU_SEASON_LEADERS_BOT: string;
                        SOCIAL_MENU_SEASON_LEADERS_TOP: string;
                        SOUND_TITLE: string;
                        SPELL: string;
                        SPELLBOOK_DESCRIPTION: string;
                        SPELLBOOK_TITLE: string;
                        SPELLS: string;
                        SPRINGFEST: string;
                        SPRINGFEST_CONFIRM_TRAVEL: string;
                        SPRINGFEST_SIGN_MESSAGE: string;
                        SPRINGFEST_SIGN_TITLE: string;
                        SS_APPEARS: string;
                        SS_GOOD_AS_NEW: string;
                        SS_LASTTHING: string;
                        STARLIGHT_AD_BODY: string;
                        STARLIGHT_AD_TITLE: string;
                        STARLIGHT_CONFIRM_TRAVEL: string;
                        STARLIGHT_MESSAGE_RETURN_LATER: string;
                        STARLIGHT_ON_NOW: string;
                        STARLIGHT_SIGN_MESSAGE: string;
                        STARLIGHT_SIGN_TITLE: string;
                        STARS: string;
                        STARS_IN_JAR_COUNT: string;
                        START_TRIAL: string;
                        STARTUP_TITLE: string;
                        STATS: string;
                        Steve_Test_1: string;
                        STORE_CLOSE_TIMER: string;
                        STORE_CURRENCY_LOCKED: string;
                        STORE_ELEMENT: string;
                        STORE_HOT_HOT_THREADS: string;
                        STORE_MACHINE_SHOP: string;
                        STORE_NAME_CRYSTAL_CAFE: string;
                        STORE_NAME_DYNO: string;
                        STORE_NAME_FIREFLY: string;
                        STORE_OCEAN_OUTFITTERS: string;
                        STORE_OPEN_FAILED_MESSAGE: string;
                        STORE_OPEN_FAILED_TITLE: string;
                        STORE_OWN_ITEM: string;
                        STORE_OWN_MULTIPLE: string;
                        STORE_PROMPT_NEED_GOLD: string;
                        STORE_PROMPT_UNLOCK_ALL: string;
                        STORE_PROMPT_WELCOME: string;
                        STORE_PROMPT_WELCOME_API: string;
                        STORE_SKY_HIGH: string;
                        STORE_SNOWDAY_SALES: string;
                        STORE_SPELL_NAME: string;
                        STORE_TOOLTIP_HEADER_3: string;
                        STORE_TOOLTIP_HEADER_4: string;
                        STORE_TOOLTIP_MESSAGE_0: string;
                        STORE_TOOLTIP_MESSAGE_1: string;
                        STORE_TOOLTIP_MESSAGE_2: string;
                        STORE_TOOLTIP_MESSAGE_3: string;
                        STORE_TOOLTIP_MESSAGE_4: string;
                        STORE_TOOLTIP_MESSAGE_5: string;
                        STORE_TOOLTIP_MESSAGE_6: string;
                        STYLIST_BUY_LOOK: string;
                        STYLIST_CHOOSE_EYE_COLOR: string;
                        STYLIST_CHOOSE_HAIR_COLOR: string;
                        STYLIST_CHOOSE_HAIR_STYLE: string;
                        STYLIST_CONFIRM_MESSAGE_BODY: string;
                        STYLIST_HAIR_COLOR: string;
                        STYLIST_MESSAGE_NEED_MORE_GOLD_BODY: string;
                        STYLIST_TITLE: string;
                        SUBSPACE_ULTIMATES_POPUP_BODY: string;
                        SUBSPACE_ULTIMATES_POPUP_BUTTON: string;
                        SUBSPACE_ULTIMATES_POPUP_TITLE: string;
                        SUMMARY_BATTLE_STARS_EARNED: string;
                        SUMMARY_BATTLE_STARS_EARNED_SINGULAR: string;
                        SUMMARY_POPUP_EVOLUTION: string;
                        SUMMARY_POPUP_HEARTS_EARNED: string;
                        SUMMARY_POPUP_NEW_HEARTS: string;
                        SUMMARY_POPUP_NEW_SPELL: string;
                        SUMMARY_POPUP_SPELL_EVOLVED: string;
                        SUMMARY_POPUP_SPELL_UNLOCKED: string;
                        SUMMERFEST_AD_BODY: string;
                        SUMMERFEST_AD_TITLE: string;
                        SUMMERFEST_CONFIRM_TRAVEL: string;
                        SUMMERFEST_SIGN_MESSAGE: string;
                        SUMMERFEST_SIGN_TITLE: string;
                        SUN_WHEEL_PROMPT_SPIN: string;
                        SURVEY_AT_HOME_QUESTION: string;
                        SURVEY_BUTTON_DONE: string;
                        SURVEY_COMPUTER_ANSWER: string;
                        SURVEY_COMPUTER_TABLET_QUESTION: string;
                        SURVEY_CREATIVE_1: string;
                        SURVEY_CREATIVE_2: string;
                        SURVEY_CREATIVE_3: string;
                        SURVEY_CREATIVE_4: string;
                        SURVEY_CREATIVE_Q: string;
                        SURVEY_DEMO_A1: string;
                        SURVEY_DEMO_A2: string;
                        SURVEY_DEMO_QS: string;
                        SURVEY_ENJOY_COLLECTING: string;
                        SURVEY_ENJOY_CREATIVE: string;
                        SURVEY_ENJOY_EVENTS: string;
                        SURVEY_ENJOY_FRIENDS: string;
                        SURVEY_ENJOY_HERO: string;
                        SURVEY_ENJOY_Q: string;
                        SURVEY_ENJOY_RARE: string;
                        SURVEY_ENJOY_STORY: string;
                        SURVEY_ENJOY_WINNING: string;
                        SURVEY_GAME_1: string;
                        SURVEY_GAME_2: string;
                        SURVEY_GAME_3: string;
                        SURVEY_GAME_4: string;
                        SURVEY_GAME_Q: string;
                        SURVEY_LIKE_TO_SEE_0_A0: string;
                        SURVEY_LIKE_TO_SEE_0_A1: string;
                        SURVEY_LIKE_TO_SEE_0_A2: string;
                        SURVEY_LIKE_TO_SEE_0_A3: string;
                        SURVEY_LIKE_TO_SEE_0_Q: string;
                        SURVEY_MEMBERSHIP_ANSWER_1: string;
                        SURVEY_MEMBERSHIP_ANSWER_2: string;
                        SURVEY_MEMBERSHIP_ANSWER_3: string;
                        SURVEY_MEMBERSHIP_ANSWER_MORE: string;
                        SURVEY_MORE_OF_ANSWER_1: string;
                        SURVEY_MORE_OF_ANSWER_2: string;
                        SURVEY_MORE_OF_ANSWER_3: string;
                        SURVEY_MORE_OF_ANSWER_4: string;
                        SURVEY_MOTIVATIONS_1: string;
                        SURVEY_MOTIVATIONS_2: string;
                        SURVEY_MOTIVATIONS_3: string;
                        SURVEY_MOTIVATIONS_4: string;
                        SURVEY_MOTIVATIONS_5: string;
                        SURVEY_NO: string;
                        SURVEY_TABLET_ANSWER: string;
                        SURVEY_WANT_MORE_OF: string;
                        SURVEY_WIZARD_QUESTION: string;
                        SURVEY_YES: string;
                        SURVEY_YES_EXCLAMATION: string;
                        SYSTEM_BUTTON_FULLSCREEN: string;
                        SYSTEM_BUTTON_FULLSCREEN_ENTER: string;
                        SYSTEM_BUTTON_FULLSCREEN_EXIT: string;
                        SYSTEM_BUTTON_FULLSCREEN_SHORT: string;
                        SYSTEM_BUTTON_LARGE_SCREEN: string;
                        SYSTEM_BUTTON_MEDIUM_SCREEN: string;
                        SYSTEM_BUTTON_SMALL_SCREEN: string;
                        SYSTEM_LOCKED_HOUSE: string;
                        TAMED_PETS: string;
                        TAMING_METER: string;
                        TASK_STEP_COMPLETE: string;
                        TASK_STEP_TAME: string;
                        TASK_STEP_TRADE: string;
                        TASKS_TAB_ABANDON: string;
                        TASKS_TAB_FIND: string;
                        TASKS_TAB_TITLE: string;
                        TASKS_TAB_TRACK: string;
                        TASKS_TAB_TRADE: string;
                        TEAM_MUST_HAVE_A_LEADER: string;
                        TEAM_TITAN_BATTLE: string;
                        TECH_COMPLETED: string;
                        TECH_START_0: string;
                        TECH_START_1: string;
                        TEXTAREA_CHARACTERS: string;
                        TEXTBOX_TITLE_CLASS_CODE: string;
                        TEXTBOX_TITLE_FIRST_NAME: string;
                        TEXTBOX_TITLE_LAST_NAME: string;
                        TEXTBOX_TITLE_LAST_NAME_INITIAL: string;
                        TEXTBOX_TITLE_PARENT_EMAIL: string;
                        TEXTBOX_TITLE_PASSWORD: string;
                        TEXTBOX_TITLE_REENTER_PASSWORD: string;
                        TEXTBOX_TITLE_USERNAME: string;
                        THE_ANCIENT: string;
                        THE_PUMPKIN_FESTIVAL: string;
                        THE_STARLIGHT_FESTIVAL: string;
                        THE_SUMMERFEST_FESTIVAL: string;
                        TIMER_FORMAT: string;
                        TIMER_FORMAT_DAYS: string;
                        TIMER_TITLE: string;
                        TITAN_DEFEATED_MESSAGE: string;
                        TITAN_DEFEATED_SHORT: string;
                        TITAN_DEFEATED_TITLE: string;
                        TITAN_HEALTH_AD_BODY_100: string;
                        TITAN_HEALTH_AD_BODY_25: string;
                        TITAN_HEALTH_AD_BODY_50: string;
                        TITAN_HEALTH_AD_BODY_75: string;
                        TITAN_HEALTH_AD_TITLE_100: string;
                        TITAN_HEALTH_AD_TITLE_25: string;
                        TITAN_HEALTH_AD_TITLE_50: string;
                        TITAN_HEALTH_AD_TITLE_75: string;
                        TITAN_HEARTS: string;
                        TITAN_INACTIVE: string;
                        TITAN_NAME: string;
                        TITAN_NAME_BONFIRE: string;
                        TITAN_NAME_FIREFLY: string;
                        TITAN_NAME_SHIPWRECK: string;
                        TITAN_NAME_SKYWATCH: string;
                        TITAN_REWARDS_BATTLE_PROGRESS: string;
                        TITAN_REWARDS_LOCKED_BATTLE_PROGRESS: string;
                        TITAN_TRAVEL_CONFIRM_MESSAGE: string;
                        TITLE_LOGIN: string;
                        TOKEN_EXPIRE_MESSAGE: string;
                        TOWER_ALL_DEFEATED: string;
                        TOWER_CHANCE_DAMAGE_INCREASED: string;
                        TOWER_CHANCE_DAMAGE_REDUCED: string;
                        TOWER_CHANCE_DISABLE_SWITCHING: string;
                        TOWER_CHANCE_DOUBLE_STARS: string;
                        TOWER_CHANCE_GAIN_HEARTS: string;
                        TOWER_CHANCE_LOSE_HEARTS: string;
                        TOWER_CHANCE_WHEEL: string;
                        TOWER_ENTRANCE_LOCKOUT_TITLE: string;
                        TOWER_ENTRANCE_WELCOME: string;
                        TOWER_EXIT_ADA: string;
                        TOWER_EXIT_BATTLES_WON_TEXT: string;
                        TOWER_EXIT_CONTENT: string;
                        TOWER_EXIT_DESCRIPTION_TEXT: string;
                        TOWER_EXIT_FLORIAN: string;
                        TOWER_EXIT_PAGES: string;
                        TOWER_EXIT_TITLE: string;
                        TOWER_EXIT_TITLE_TEXT: string;
                        TOWER_EXIT_TO_CR: string;
                        TOWER_EXIT_TO_CR_TEXT: string;
                        TOWER_EXIT_TO_CR_TITLE: string;
                        TOWER_EXIT_TO_FLOOR: string;
                        TOWER_EXIT_WARNING: string;
                        TOWER_EXIT_WARNING_COLLECTED: string;
                        TOWER_GOTO_NEXT_FLOOR_TEXT: string;
                        TOWER_GOTO_NEXT_FLOOR_TITLE: string;
                        TOWER_NEXT_CHALLENGER: string;
                        TOWER_PRIZES_MESSAGE: string;
                        TOWER_PRIZES_TITLE: string;
                        TOWER_PROMPT_COMPLETE_LEAVE: string;
                        TOWER_PROMPT_LEAVE: string;
                        TOWER_PROMPT_MUST_DEFEAT: string;
                        TOWER_PROMPT_START: string;
                        TOWER_PROMPT_START_GOLD: string;
                        TOWER_TOWN_AD_BODY: string;
                        TOWER_TOWN_AD_TITLE: string;
                        TOWER_TOWN_GO_BUTTON: string;
                        TOWER_TOWN_GO_POPUP: string;
                        TOWER_TOWN_MAP: string;
                        TOWER_TOWN_MAP_DESC: string;
                        TOWER_TOWN_REDIRECT: string;
                        TOWER_TOWN_TUTORIAL_MAP: string;
                        TOWER_WARDEN_LOCKED: string;
                        TOY_UNLOCK_JOINED: string;
                        TOY_UNLOCK_USE: string;
                        TRADE_WITH_ULLA_CAPITAL: string;
                        TRAVEL_CONFIRM_MESSAGE: string;
                        TRAVEL_TO_CRYSTAL_CAVERNS: string;
                        TRAVEL_TO_HARMONY_ISLAND: string;
                        TRAVEL_TO_TOWER_TOWN: string;
                        TRIAL_MEMBERSHIP_AUTO_BODY: string;
                        TRIAL_MEMBERSHIP_AUTO_FOOTER: string;
                        TRIAL_MEMBERSHIP_AUTO_LEVEL: string;
                        TRIAL_MEMBERSHIP_AUTO_TITLE: string;
                        TRIAL_MEMBERSHIP_SUCESS_BODY: string;
                        TRIAL_MEMBERSHIP_SUCESS_TITLE: string;
                        TRY_LUCKY_LOOT_AGAIN: string;
                        TT_BUSTLING_VILLAGE: string;
                        TT_CHOOSE_FLOOR_QUIT_BODY: string;
                        TT_CHOOSE_FLOOR_TITLE: string;
                        TT_FINISH_TOWER_FIRST: string;
                        TT_FINISH_TOWER_ON_ADD: string;
                        TT_FLOATLINGS_NEED_REST: string;
                        TT_FTUE_BLOCK_PLACED: string;
                        TT_FTUE_CAST_SPELLS: string;
                        TT_FTUE_CHOOSE_FLOOR: string;
                        TT_FTUE_CLICK_BUTTON: string;
                        TT_FTUE_FLOATLINGS_RETURNING: string;
                        TT_FTUE_LOOK_FLOOR: string;
                        TT_FTUE_PM_WELCOME: string;
                        TT_FTUE_PM_WELCOME_2: string;
                        TT_FTUE_PM_WELCOME_3: string;
                        TT_FTUE_START_BUILDING: string;
                        TT_FTUE_SW_CAN_BUILD_NEXT_FLOOR: string;
                        TT_FTUE_SW_SHOW: string;
                        TT_FTUE_SW_THANK_GOODNESS: string;
                        TT_FTUE_SW_WELCOME: string;
                        TT_FTUE_SWOOPY_BUILDING_BASICS: string;
                        TT_FTUE_SWOOPY_DONE: string;
                        TT_FTUE_SWOOPY_FLOATLING_TYPES: string;
                        TT_FTUE_SWOOPY_HELP: string;
                        TT_FTUE_SWOOPY_LUMIN_TREES: string;
                        TT_FTUE_SWOOPY_SHOW: string;
                        TT_FTUE_SWOOPY_TRAVELS: string;
                        TT_FTUE_SWOOPY_WEAKENED_PUPPETMASTER: string;
                        TT_FTUE_TUTORIAL: string;
                        TT_FTUE_WORK_BUILDING: string;
                        TT_I_ALMOST_FORGOT: string;
                        TT_INFINITY_TOWER_CLOSED: string;
                        TT_INFINITY_TOWER_OPEN: string;
                        TT_INFINITY_TOWER_OPEN_BODY: string;
                        TT_MOVE_FIRST_FLOOR: string;
                        TT_MOVE_FLOOR_BLOCKED: string;
                        TT_MOVE_FLOOR_BOTTOM_ONLY_BACK: string;
                        TT_MOVE_FLOOR_HEADER: string;
                        TT_MOVE_FLOOR_MINIMUM_WARNING: string;
                        TT_MOVE_FLOOR_NEXT_TALL: string;
                        TT_MOVE_FLOOR_PREV_TALL: string;
                        TT_MOVE_FLOOR_TOP_BOTTOM_ONLY: string;
                        TT_MOVE_FLOOR_TOP_ONLY_FORWARD: string;
                        TT_NEW_DESIGN: string;
                        TT_NEXT_TIME_YOU_BUILD: string;
                        TT_ROOFTOP_ASSIGNMENT: string;
                        TT_ROOMMATES: string;
                        TT_SHROUD_QUIT_CONFIRM_BODY: string;
                        TT_SHROUD_TUTORIAL_DIALOGUE_1: string;
                        TT_SHROUD_TUTORIAL_DIALOGUE_2: string;
                        TT_SHROUD_TUTORIAL_DIALOGUE_3: string;
                        TT_SHROUD_TUTORIAL_DIALOGUE_4: string;
                        TT_START_BUILDING: string;
                        TT_STUBBORN_SHADOW_QUIT_BODY: string;
                        TT_SW_THINGS_CHANGED: string;
                        TT_TOOLTIP_FLOOR_COMPLETE: string;
                        TT_TOWER_CLOSED_BODY: string;
                        TT_TOWER_CLOSED_FOOTER: string;
                        TT_TOWER_CLOSED_LINK: string;
                        TT_TOWER_CLOSED_LINKTXT: string;
                        TT_TOWER_TOWN_OPEN: string;
                        TT_TOWER_WORK_DONE: string;
                        TT_UPDATE_BLOCKS_BUILT: string;
                        TT_UPDATE_FLOORS_MADE: string;
                        TT_UPDATE_SHROUDS_CLEARED: string;
                        TWILIGHT_WHEEL: string;
                        TWILIGHT_WHEEL_COME_BACK_LATER: string;
                        TWILIGHT_WHEEL_COME_BACK_TOMORROW: string;
                        TWILIGHT_WHEEL_POPUP_BODY: string;
                        TWILIGHT_WHEEL_POPUP_TITLE: string;
                        TWILIGHT_WHEEL_SPIN: string;
                        TWILIGHT_WHEEL_SPIN_AGAIN: string;
                        TWILIGHT_WHEEL_WATCH_SPIN: string;
                        UH_OH_TITLE: string;
                        UI_FEED_All: string;
                        UI_FEED_BECOME_A_MEMBER: string;
                        UI_FEED_CAUGHT_UP: string;
                        UI_FEED_CHECK_OUT: string;
                        UI_FEED_EVENTS: string;
                        UI_FEED_FRIEND: string;
                        UI_FEED_LASTNIGHT: string;
                        UI_FEED_ME: string;
                        UI_FEED_MY_SHARES: string;
                        UI_FEED_NAME_AT_LOCATION: string;
                        UI_FEED_NO_SHARES: string;
                        UI_FEED_NO_TODAY: string;
                        UI_FEED_OLD: string;
                        UI_FEED_SHARE: string;
                        UI_FEED_SHARE_FRIENDS: string;
                        UI_FEED_SHARED: string;
                        UI_FEED_TITLE: string;
                        UI_FEED_TODAY: string;
                        UI_MAIL_CHECK_IT_OUT: string;
                        UI_MAIL_NO_MAIL: string;
                        UI_MAIL_WELCOME: string;
                        UI_MAIL_YOUR_MAIL: string;
                        UI_NO_FEED_ALL: string;
                        UI_NO_FEED_FRIENDS: string;
                        UI_NO_FEED_ME: string;
                        UI_PVP_1000_POINTS: string;
                        UI_PVP_COOL_ARMOR: string;
                        UI_PVP_GRAND_PRIZE: string;
                        UI_PVP_PRIZES: string;
                        UI_PVP_PRIZES_DESC: string;
                        UI_RESULTS_TITLE: string;
                        UI_TAXI_PAY_HALF: string;
                        UI_TAXI_REGULAR_FARE: string;
                        UI_TITAN_APPEAR_INFO: string;
                        UI_TITAN_BATTLES_INFO: string;
                        UI_TITAN_REWARDS_TITLE: string;
                        UI_TITAN_SHARDS_INFO: string;
                        UI_TITAN_SHARDS_INFO_TO2: string;
                        UI_ZONE_BONFIRE_SPIRE: string;
                        UI_ZONE_CHECK_BACK: string;
                        UI_ZONE_FIREFLY_FOREST: string;
                        UI_ZONE_NO_CLASSMATES: string;
                        UI_ZONE_NO_FRIENDS: string;
                        UI_ZONE_PLAY: string;
                        UI_ZONE_SHIPWRECK_SHORE: string;
                        UI_ZONE_SHIVERCHILL: string;
                        UI_ZONE_SKYWATCH: string;
                        UI_ZONE_TAME: string;
                        UI_ZONE_TRADE: string;
                        ULLA_FOUND: string;
                        ULLA_PLINTH: string;
                        ULTIMATE_UNLOCKED: string;
                        ULTIMATES_CHOOSE_A_MYTHIC: string;
                        ULTIMATES_FEW_DAYS_LEFT: string;
                        ULTIMATES_FTUE_TOOLTIP: string;
                        ULTIMATES_LEAVING_SOON: string;
                        ULTIMATES_MEMBER_LOCKED: string;
                        ULTIMATES_NAME_TEASER: string;
                        ULTIMATES_NOT_STARTED: string;
                        ULTIMATES_PACKAGE_UPSELL: string;
                        ULTIMATES_PACKAGE_UPSELL_VARIANT: string;
                        ULTIMATES_QUEST_COMPLETE: string;
                        ULTIMATES_QUEST_STATUS: string;
                        ULTIMATES_RENEW_MEMBERSHIP: string;
                        ULTIMATES_RETRY_BATTLE: string;
                        ULTIMATES_TAMED: string;
                        ULTIMATES_TASK_ABANDON: string;
                        ULTIMATES_TASK_BUTTON: string;
                        ULTIMATES_TASK_FIND: string;
                        ULTIMATES_TASK_TOOLTIP_BODY: string;
                        ULTIMATES_TRACK_NPC_DESCRIPTION: string;
                        ULTIMATES_TRACK_NPC_TITLE: string;
                        ULTIMATES_TRACKING: string;
                        ULTIMATES_TRIAL_BATTLE_DESC_DEFEAT: string;
                        ULTIMATES_TRIAL_BATTLE_DESC_VICTORY: string;
                        ULTIMATES_TRIAL_BATTLE_TITLE: string;
                        ULTIMATES_TRIAL_BATTLE_TITLE_DEFEAT: string;
                        ULTIMATES_TRIAL_BATTLE_TITLE_VICTORY: string;
                        ULTIMATES_TRY_BATTLE: string;
                        ULTIMATES_UNTAMED_NEXT_TIME: string;
                        ULTIMATES_UPGRADE_DESCRIPTION: string;
                        ULTIMATES_UPGRADE_YOUR_MEMBERSHIP: string;
                        ULTIMATES_UPSELL_DESCRIPTION: string;
                        ULTIMATES_V2_ADD_TO_TEAM: string;
                        ULTIMATES_V2_DAYS_LEFT: string;
                        ULTIMATES_V2_REMOVE: string;
                        ULTIMATES_V2_TRY_BATTLE: string;
                        ULTIMATES_WHO_AM_I: string;
                        UNLOCKS_AT_LEVEL: string;
                        UNTAMED_PETS: string;
                        UPGRADE_NOW: string;
                        UPGRADE_YOUR_MEMBERSHIP: string;
                        USE_FREE_EVOLUTION_TEXT: string;
                        VOICE_VOLUME_LABEL: string;
                        VOLUME_OFF: string;
                        WARNING: string;
                        WARNING_DEVICE_PERFORMANCE: string;
                        WARNING_DEVICE_PERFORMANCE_CRYSTAL_CAVERNS: string;
                        WATCH: string;
                        WATCH_VIDEO: string;
                        WATER_BALLOON_INSTRUCTIONS: string;
                        WEEK_N_REWARDS: string;
                        WEEKDAY_NAME_0: string;
                        WEEKDAY_NAME_1: string;
                        WEEKDAY_NAME_2: string;
                        WEEKDAY_NAME_3: string;
                        WEEKDAY_NAME_4: string;
                        WEEKDAY_NAME_5: string;
                        WEEKDAY_NAME_6: string;
                        WEEKDAY_NAME_TODAY: string;
                        WEEKDAY_NAME_TOMORROW: string;
                        WEEKLY_CHALLENGE_BATTLE_PROGRESS: string;
                        WEEKLY_CHALLENGE_CLAIM_REWARD: string;
                        WEEKLY_CHALLENGE_DIALOG_REWARD: string;
                        WEEKLY_CHALLENGE_ENDS_IN: string;
                        WEEKLY_CHALLENGE_NEXT_CHALLENGE: string;
                        WEEKLY_CHALLENGE_REWARD_DIALOGUE: string;
                        WEEKLY_CHALLENGE_TIME_LEFT: string;
                        WELCOME_BACK: string;
                        WHEEL: string;
                        WHEEL_OF_SUN: string;
                        WHEEL_OF_WONDER: string;
                        WHEN_MOST_ENJOY: string;
                        WINNER_TITLE_CAPITAL: string;
                        WINTERFEST: string;
                        WINTERFEST_AD_BODY: string;
                        WINTERFEST_AD_TITLE: string;
                        WINTERFEST_CONFIRM_TRAVEL: string;
                        WINTERFEST_REWARDS: string;
                        WINTERFEST_SIGN_MESSAGE: string;
                        WINTERFEST_SIGN_TITLE: string;
                        WIZARD_LEVEL: string;
                        WIZARD_LEVELS: string;
                        WONDER_WHEEL_PROMPT_SPIN: string;
                        WONDER_WHEEL_SPIN: string;
                        WONDER_WHEEL_SPIN_AGAIN: string;
                        WONDER_WHEEL_SPIN_TOMORROW: string;
                        WONDER_WHEEL_TICKET: string;
                        WORLD_BONFIRE_SPIRE: string;
                        WORLD_BONFIRE_SPIRE_DESC: string;
                        WORLD_DARK_TOWER: string;
                        WORLD_DARK_TOWER_DESC: string;
                        WORLD_DYNO_DIG_OASIS: string;
                        WORLD_DYNO_DIG_OASIS_CLASS_MODE: string;
                        WORLD_DYNO_DIG_OASIS_DESC: string;
                        WORLD_ELEMENTAL_GUARDIAN: string;
                        WORLD_ELEMENTAL_GUARDIAN_DESC: string;
                        WORLD_EPICS_SUBSPACE: string;
                        WORLD_EPICS_SUBSPACE_DESC: string;
                        WORLD_FIREFLY_FOREST: string;
                        WORLD_FIREFLY_FOREST_DESC: string;
                        WORLD_INFO_PLAY_TOGETHER: string;
                        WORLD_INFO_TITLE: string;
                        WORLD_INFO_YOU_ARE_IN: string;
                        WORLD_LABEL: string;
                        WORLD_LAMPLIGHT_TOWN: string;
                        WORLD_LAMPLIGHT_TOWN_CLASS_MODE: string;
                        WORLD_LAMPLIGHT_TOWN_DESC: string;
                        WORLD_LOST_ISLAND: string;
                        WORLD_LOST_ISLAND_DESC: string;
                        WORLD_MAP_ACADEMY_LEVEL_LOCKED: string;
                        WORLD_MAP_BONFIRE_QUEST_0: string;
                        WORLD_MAP_BONFIRE_QUEST_1: string;
                        WORLD_MAP_BONFIRE_QUEST_10: string;
                        WORLD_MAP_BONFIRE_QUEST_11: string;
                        WORLD_MAP_BONFIRE_QUEST_12: string;
                        WORLD_MAP_BONFIRE_QUEST_13: string;
                        WORLD_MAP_BONFIRE_QUEST_2: string;
                        WORLD_MAP_BONFIRE_QUEST_3: string;
                        WORLD_MAP_BONFIRE_QUEST_4: string;
                        WORLD_MAP_BONFIRE_QUEST_5: string;
                        WORLD_MAP_BONFIRE_QUEST_6: string;
                        WORLD_MAP_BONFIRE_QUEST_7: string;
                        WORLD_MAP_BONFIRE_QUEST_8: string;
                        WORLD_MAP_BONFIRE_QUEST_9: string;
                        WORLD_MAP_CONFIRM_TRAVEL: string;
                        WORLD_MAP_DARK_TOWER_LEVEL_LOCKED: string;
                        WORLD_MAP_FOREST_QUEST_0: string;
                        WORLD_MAP_FOREST_QUEST_1: string;
                        WORLD_MAP_FOREST_QUEST_10: string;
                        WORLD_MAP_FOREST_QUEST_11: string;
                        WORLD_MAP_FOREST_QUEST_2: string;
                        WORLD_MAP_FOREST_QUEST_3: string;
                        WORLD_MAP_FOREST_QUEST_4: string;
                        WORLD_MAP_FOREST_QUEST_5: string;
                        WORLD_MAP_FOREST_QUEST_6: string;
                        WORLD_MAP_FOREST_QUEST_7: string;
                        WORLD_MAP_FOREST_QUEST_8: string;
                        WORLD_MAP_FOREST_QUEST_9: string;
                        WORLD_MAP_SHIPWRECK_QUEST_0: string;
                        WORLD_MAP_SHIPWRECK_QUEST_1: string;
                        WORLD_MAP_SHIPWRECK_QUEST_10: string;
                        WORLD_MAP_SHIPWRECK_QUEST_2: string;
                        WORLD_MAP_SHIPWRECK_QUEST_3: string;
                        WORLD_MAP_SHIPWRECK_QUEST_4: string;
                        WORLD_MAP_SHIPWRECK_QUEST_5: string;
                        WORLD_MAP_SHIPWRECK_QUEST_6: string;
                        WORLD_MAP_SHIPWRECK_QUEST_7: string;
                        WORLD_MAP_SHIPWRECK_QUEST_8: string;
                        WORLD_MAP_SHIPWRECK_QUEST_9: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_0: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_1: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_10: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_11: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_12: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_13: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_14: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_2: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_3: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_4: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_5: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_6: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_7: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_8: string;
                        WORLD_MAP_SHIVERCHILL_QUEST_9: string;
                        WORLD_MAP_SKYWATCH_QUEST_0: string;
                        WORLD_MAP_SKYWATCH_QUEST_1: string;
                        WORLD_MAP_SKYWATCH_QUEST_10: string;
                        WORLD_MAP_SKYWATCH_QUEST_11: string;
                        WORLD_MAP_SKYWATCH_QUEST_12: string;
                        WORLD_MAP_SKYWATCH_QUEST_2: string;
                        WORLD_MAP_SKYWATCH_QUEST_3: string;
                        WORLD_MAP_SKYWATCH_QUEST_4: string;
                        WORLD_MAP_SKYWATCH_QUEST_5: string;
                        WORLD_MAP_SKYWATCH_QUEST_6: string;
                        WORLD_MAP_SKYWATCH_QUEST_7: string;
                        WORLD_MAP_SKYWATCH_QUEST_8: string;
                        WORLD_MAP_SKYWATCH_QUEST_9: string;
                        WORLD_MAP_TITLE: string;
                        WORLD_MAP_ZONE_LEVEL_LOCKED: string;
                        WORLD_MAP_ZONE_LOCKED: string;
                        WORLD_OFFLINE_TEXT_1: string;
                        WORLD_OFFLINE_TEXT_2: string;
                        WORLD_SHIPWRECK_SHORE: string;
                        WORLD_SHIPWRECK_SHORE_DESC: string;
                        WORLD_SHIVERCHILL_MOUNTAINS: string;
                        WORLD_SHIVERCHILL_MOUNTAINS_DESC: string;
                        WORLD_SKYWATCH: string;
                        WORLD_SKYWATCH_DESC: string;
                        WORLD_SPRINGFEST_CLASS_MODE: string;
                        WORLD_THE_ACADEMY: string;
                        WORLD_THE_ACADEMY_DESC: string;
                        WORLD_YOUR_HOUSE: string;
                        WORLD_YOUR_HOUSE_CLASS_MODE: string;
                        WORLD_YOUR_HOUSE_DESC: string;
                        WORLDMAP_HARMONY_GO_BUTTON: string;
                        WORLDMAP_HARMONY_LOCK_TITLE: string;
                        WORLDMAP_HARMONY_LOCKED: string;
                        WORLDMAP_HARMONY_UNLOCKED: string;
                        WORTH: string;
                        WRONG_USERNAME_PASSWORD: string;
                        YOU_EARNED: string;
                        YOU_GOT_A_REWARD: string;
                        YOU_GOT_AN_REWARD: string;
                        YOUR_ACCOUNT_LABEL: string;
                        YOUR_MAIL_TITLE: string;
                        YOUR_PET_WANTS_TO_EVOLVE: string;
                        YOUR_TEAM: string;
                        YOUTUBE_DISABLED_MESSAGE: string;
                        ZONE_GOALS_NOT_STARTED: string;
                        ZONE_GOALS_RESUME_QUEST: string;
                        ZONE_GOALS_SPEECH_BUBBLE_OVERVIEW: string;
                        ZONE_GOALS_SPEECH_BUBBLE_PROGRESS_0: string;
                        ZONE_GOALS_SPEECH_BUBBLE_PROGRESS_1: string;
                        ZONE_GOALS_SPEECH_BUBBLE_PROGRESS_2: string;
                        ZONE_GOALS_SPEECH_BUBBLE_PROGRESS_3: string;
                        ZONE_GOALS_SPEECH_BUBBLE_PROGRESS_4: string;
                        ZONE_GOALS_SPEECH_BUBBLE_PROGRESS_5: string;
                        ZONE_GOALS_SPEECH_BUBBLE_PROGRESS_6: string;
                        ZONE_GOALS_SPEECH_BUBBLE_PROGRESS_7: string;
                        ZONE_LEVEL_REQUIREMENT: string;
                        ZONE_LOCKED_FOR_EXPERIMENT: string;
                    };
                };
            };
            et: string[];
        };
        anchor: {
            x: number;
            y: number;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
        };
        bootsMetadata: {
            vIcon: number;
        };
        bounds: {
            bottom: number;
            height: number;
            left: number;
            right: number;
            top: number;
            type: number;
            width: number;
            x: number;
            y: number;
            ceil(t: any, e: any): any;
            clone(): any;
            contains(t: any, e: any): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            enlarge(t: any): any;
            fit(t: any): any;
            pad(t: any, e: any): any;
        };
        chatText: {
            _isCreated: boolean;
            Active: boolean;
            isActive: boolean;
            IsActiveInHierarchy: boolean;
            isCreated: boolean;
            alignment: number;
            Alignment: number;
            BlendMode: number;
            FontSize: number;
            FontStyle: number;
            LineSpacing: number;
            ShadowAlpha: number;
            ShadowAngle: number;
            ShadowBlur: number;
            ShadowDistance: number;
            StrokeThickness: number;
            TextHeight: number;
            TextWidth: number;
            FillColor: string;
            Font: string;
            ShadowColor: string;
            StrokeColor: string;
            TextConfig: undefined;
            create(): any;
            customDeserialize(c: any): void;
            destroy(): void;
            firstUpdate(): void;
            getInjectedValue(c: any): any;
            isValidColor(c: any): any;
            onDisable(): void;
            onEnable(): void;
            postCreate(): void;
            postDeserialize(): void;
            preDeserialize(c: any): void;
            setText(c: any): void;
            update(): void;
            updateAlignment(): void;
            updateFunction(): void;
            updateText(): void;
            gameObject: {
                _destroyed: boolean;
                _isActive: boolean;
                _isActiveInHierarchy: boolean;
                active: boolean;
                activeInHierarchy: boolean;
                isDestroyed: boolean;
                _name: string;
                layer: string;
                name: string;
                _parent: null;
                _transform: null;
                parent: null;
                transform: null;
                activeInHierarchyChanged(): void;
                addChild(c: any): void;
                addChildAt(c: any, u: any): void;
                addComponent(c: any, u: any): any;
                bringToFront(): void;
                destroy(): void;
                destroyDeferred(): void;
                dispatchComponentAddedInHierarchy(c: any, u: any): void;
                findChildByName(c: any): any;
                findComponent(c: any): any;
                findComponentInChildren(c: any, u: any): any;
                findComponentInParent(c: any, u: any): any;
                findComponents(c: any): any;
                findComponentsInChildren(c: any, u: any): any;
                firstUpdate(): void;
                getRenderOrder(): any;
                hasComponent(c: any): any;
                isActiveInHierarchy(): any;
                isInBack(): any;
                isInFront(): any;
                removeComponent(c: any): void;
                removeFromParent(): any;
                sendToBack(): void;
                setLayer(c: any, u: any): void;
                setParent(c: any, u: any): any;
                setRenderOrder(c: any): void;
                update(): void;
                updateFunction(): void;
                _children: never[];
                _components: ({ _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(u: any): void; destroy(): void; firstUpdate(): void; getInjectedValue(c: any): any; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; preDeserialize(c: any): void; reapplyChildRelativeValues(): void; update(): void; updateFunction(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: any /* too deep */; anchor: any /* too deep */; gameObject: Player["_playerContainer"]["chatText"]["gameObject"]; GameObject: Player["_playerContainer"]["chatText"]["gameObject"]; group: any /* too deep */; onActiveChanged: any /* too deep */; OnActiveChanged: any /* too deep */; onDestroy: any /* too deep */; OnDestroy: any /* too deep */; } | Player["_playerContainer"]["chatText"])[];
                _legacyTransform: {
                    _isCreated: boolean;
                    Active: boolean;
                    isActive: boolean;
                    IsActiveInHierarchy: boolean;
                    isCreated: boolean;
                    roundRelativeValues: boolean;
                    RoundRelativeValues: boolean;
                    anchorX: number;
                    anchorY: number;
                    height: number;
                    relativeHeight: number;
                    relativeWidth: number;
                    relativeX: number;
                    relativeY: number;
                    roundedHeight: number;
                    roundedWidth: number;
                    roundedX: number;
                    roundedY: number;
                    scaleX: number;
                    scaleY: number;
                    width: number;
                    x: number;
                    y: number;
                    cachedRelativeHeight: null;
                    cachedRelativeWidth: null;
                    cachedRelativeX: null;
                    cachedRelativeY: null;
                    dimensionPlaceholder: null;
                    create(): void;
                    customDeserialize(u: any): void;
                    destroy(): void;
                    firstUpdate(): void;
                    getInjectedValue(c: any): any;
                    onDisable(): void;
                    onEnable(): void;
                    postCreate(): void;
                    postDeserialize(): void;
                    preDeserialize(c: any): void;
                    reapplyChildRelativeValues(): void;
                    update(): void;
                    updateFunction(): void;
                    updateGroupVisibility(): void;
                    updateParentGroup(): void;
                    updatePivotXFromAnchorX(): void;
                    updatePivotYFromAnchorY(): void;
                    _group: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: any /* too deep */[];
                        gameObjectRef: Player["_playerContainer"]["chatText"]["gameObject"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"]["localTransform"];
                            pivot: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"]["pivot"];
                            position: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"]["position"];
                            scale: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"]["scale"];
                            skew: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    anchor: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    gameObject: Player["_playerContainer"]["chatText"]["gameObject"];
                    GameObject: Player["_playerContainer"]["chatText"]["gameObject"];
                    group: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"];
                    onActiveChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    OnActiveChanged: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["onActiveChanged"];
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    OnDestroy: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["onDestroy"];
                };
                children: Player["_playerContainer"]["chatText"]["gameObject"]["_children"];
                components: Player["_playerContainer"]["chatText"]["gameObject"]["_components"];
                legacyTransform: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onActiveInHierarchyChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onChildAdded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onChildRemoved: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onComponentAdded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onComponentAddedToHierarchy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onComponentRemoved: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onHierarchyChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onLayerChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
            };
            GameObject: Player["_playerContainer"]["chatText"]["gameObject"];
            onActiveChanged: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _context: null; context: null; _listener(): any; destroy(): void; execute(c: any): any; isBound(): any; listener(): any; toString(): any; _args: any /* too deep */; }[];
            };
            OnActiveChanged: Player["_playerContainer"]["chatText"]["onActiveChanged"];
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _context: null; context: null; _listener(arg0: any): void; destroy(): void; execute(c: any): any; isBound(): any; listener(arg0: any): void; toString(): any; _args: any /* too deep */; }[];
            };
            OnDestroy: Player["_playerContainer"]["chatText"]["onDestroy"];
            Source: {
                source: string;
                cleanUp(): void;
                getText(): any;
                setText(c: any): void;
                onTextChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                OnTextChanged: Player["_playerContainer"]["chatText"]["Source"]["onTextChanged"];
            };
            textObject: {
                _isCreated: boolean;
                _underline: boolean;
                Active: boolean;
                isActive: boolean;
                IsActiveInHierarchy: boolean;
                isCreated: boolean;
                resizeRectTransform: boolean;
                underline: boolean;
                wordWrap: boolean;
                _paddingX: number;
                _paddingY: number;
                blendMode: number;
                dropShadowAlpha: number;
                dropShadowAngle: number;
                dropShadowBlur: number;
                dropShadowDistance: number;
                fontSize: number;
                lineSpacing: number;
                paddingX: number;
                paddingY: number;
                strokeThickness: number;
                tint: number;
                wordWrapWidth: number;
                _boundsAlignH: string;
                _boundsAlignV: string;
                align: string;
                boundsAlignH: string;
                boundsAlignV: string;
                dropShadowColor: string;
                fill: string;
                font: string;
                fontStyle: string;
                fontWeight: string;
                stroke: string;
                text: string;
                _filter: null;
                _parentRenderComponent: null;
                _underlineEndIndex: null;
                _underlineStartIndex: null;
                underlineEndIndex: null;
                underlineStartIndex: null;
                applyScalingToTransform(c: any, u: any, h: any): void;
                applyTextPivot(): void;
                applyToMatrix(c: any, u: any): void;
                attachRootContainer(): void;
                attachRootToCurrentLayer(): void;
                attachRootToRenderComponentParent(): void;
                buildRenderComponentOrder(c: any): any;
                clearListeners(): void;
                clearParentRenderComponent(): void;
                componentAddedToHierarchy(c: any, u: any): void;
                create(): any;
                createPixiTransformOverride(): any;
                createTextObject(): void;
                customDeserialize(c: any): void;
                destroy(): void;
                drawUnderline(c: any, u: any): void;
                findChildIndex(): any;
                firstUpdate(): void;
                gameObjectHierarchyChanged(): void;
                getDimensions(): any;
                getInjectedValue(c: any): any;
                getOverriddenTransform(): any;
                getParentContainer(): any;
                getRootContainer(): any;
                isValidColor(c: any): any;
                onDisable(): void;
                onEnable(): void;
                onLegacyTransformDestroyed(): void;
                onOverrideTransformDestroyed(): void;
                onParentRenderComponentDestroyed(): void;
                onRenderComponentContainerWasSet(): void;
                overridePIXIUpdateFunction(): void;
                postCreate(): void;
                postDeserialize(): void;
                preDeserialize(c: any): void;
                resetPIXIUpdateFunction(): void;
                resizeRectTransformUponTextChange(): void;
                setFilter(c: any): void;
                setRootContainer(c: any): void;
                setUpDisplayObject(c: any): void;
                trackTransformAddingToOverride(c: any): void;
                update(): void;
                updateFunction(): void;
                updateText(): void;
                updateTextSize(): void;
                updateVisibility(): void;
                _rootContainer: {
                    _accessibleActive: boolean;
                    _autoResolution: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _ownCanvas: boolean;
                    _roundPixels: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    dirty: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    roundPixels: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _cachedTint: number;
                    _eventsCount: number;
                    _height: number;
                    _lastSortedIndex: number;
                    _resolution: number;
                    _textureID: number;
                    _textureTrimmedID: number;
                    _tint: number;
                    _tintRGB: number;
                    _transformID: number;
                    _transformTrimmedID: number;
                    _width: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    blendMode: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    localStyleID: number;
                    renderId: number;
                    resolution: number;
                    rotation: number;
                    tabIndex: number;
                    tint: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    _font: string;
                    _text: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    pluginName: string;
                    text: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    _styleListener: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    vertexTrimmedData: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _generateFillStyle(e: any, r: any, i: any): any;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _onAnchorUpdate(): void;
                    _onTextureUpdate(): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    calculateTrimmedVertices(): any;
                    calculateVertices(): void;
                    containerUpdateTransform(): void;
                    containsPoint(t: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    drawLetterSpacing(t: any, e: any, r: any, i: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateText(t: any): void;
                    updateTexture(): void;
                    updateTransform(): void;
                    canvas: HTMLCanvasElement;
                    context: CanvasRenderingContext2D;
                    indices: Uint16Array;
                    uvs: Float32Array;
                    vertexData: Float32Array;
                    _anchor: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"];
                    };
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _style: {
                        _breakWords: boolean;
                        _dropShadow: boolean;
                        _trim: boolean;
                        _wordWrap: boolean;
                        breakWords: boolean;
                        dropShadow: boolean;
                        trim: boolean;
                        wordWrap: boolean;
                        _dropShadowAlpha: number;
                        _dropShadowAngle: number;
                        _dropShadowBlur: number;
                        _dropShadowDistance: number;
                        _fillGradientType: number;
                        _fontSize: number;
                        _leading: number;
                        _letterSpacing: number;
                        _lineHeight: number;
                        _miterLimit: number;
                        _padding: number;
                        _strokeThickness: number;
                        _wordWrapWidth: number;
                        dropShadowAlpha: number;
                        dropShadowAngle: number;
                        dropShadowBlur: number;
                        dropShadowDistance: number;
                        fillGradientType: number;
                        fontSize: number;
                        leading: number;
                        letterSpacing: number;
                        lineHeight: number;
                        miterLimit: number;
                        padding: number;
                        strokeThickness: number;
                        styleID: number;
                        wordWrapWidth: number;
                        _align: string;
                        _dropShadowColor: string;
                        _fill: string;
                        _fontFamily: string;
                        _fontStyle: string;
                        _fontVariant: string;
                        _fontWeight: string;
                        _lineJoin: string;
                        _stroke: string;
                        _textBaseline: string;
                        _whiteSpace: string;
                        align: string;
                        dropShadowColor: string;
                        fill: string;
                        fontFamily: string;
                        fontStyle: string;
                        fontVariant: string;
                        fontWeight: string;
                        lineJoin: string;
                        stroke: string;
                        textBaseline: string;
                        whiteSpace: string;
                        clone(): any;
                        reset(): void;
                        toFontString(): any;
                        _fillGradientStops: never[];
                        fillGradientStops: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_style"]["_fillGradientStops"];
                    };
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _texture: {
                        noFrame: boolean;
                        valid: boolean;
                        _eventsCount: number;
                        _rotate: number;
                        _updateID: number;
                        height: number;
                        resolution: number;
                        rotate: number;
                        width: number;
                        uvMatrix: null;
                        addListener(t: any, e: any, r: any): any;
                        castToBaseTexture(): any;
                        clone(): any;
                        destroy(t: any): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        eventNames(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        onBaseTextureUpdated(t: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        update(): void;
                        updateUvs(): void;
                        _events: {};
                        _frame: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _uvs: {
                            x0: number;
                            x1: number;
                            x2: number;
                            x3: number;
                            y0: number;
                            y1: number;
                            y2: number;
                            y3: number;
                            set(t: any, e: any, r: any): void;
                            uvsFloat32: Float32Array;
                        };
                        baseTexture: {
                            destroyed: boolean;
                            isPowerOfTwo: boolean;
                            valid: boolean;
                            _batchEnabled: number;
                            _batchLocation: number;
                            _eventsCount: number;
                            _mipmap: number;
                            _scaleMode: number;
                            _wrapMode: number;
                            alphaMode: number;
                            anisotropicLevel: number;
                            dirtyId: number;
                            dirtyStyleId: number;
                            format: number;
                            height: number;
                            mipmap: number;
                            realHeight: number;
                            realWidth: number;
                            resolution: number;
                            scaleMode: number;
                            target: number;
                            touched: number;
                            type: number;
                            uid: number;
                            width: number;
                            wrapMode: number;
                            cacheId: string;
                            parentTextureArray: null;
                            _refreshPOT(): void;
                            addListener(t: any, e: any, r: any): any;
                            castToBaseTexture(): any;
                            destroy(): void;
                            dispose(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            eventNames(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onError(t: any): void;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setRealSize(t: any, e: any, r: any): any;
                            setResolution(t: any): any;
                            setResource(t: any): any;
                            setSize(t: any, e: any, r: any): any;
                            setStyle(t: any, e: any): any;
                            update(): void;
                            _events: any /* too deep */;
                            _glTextures: any /* too deep */;
                            resource: any /* too deep */;
                            textureCacheIds: any /* too deep */;
                        };
                        defaultAnchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        frame: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_texture"]["_frame"];
                        orig: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        textureCacheIds: never[];
                        trim: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    anchor: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_anchor"];
                    children: never[];
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    parent: Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"];
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["localTransform"];
                            pivot: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["pivot"]["scope"];
                    };
                    style: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_style"];
                    tempDisplayObjectParent: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"];
                    texture: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_texture"];
                    trackedPointers: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _textBounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _textSize: {
                    _halfHeight: number;
                    _halfWidth: number;
                    _height: number;
                    _width: number;
                    height: number;
                    width: number;
                    copyFrom(c: any): void;
                    getHalfHeight(): any;
                    getHalfWidth(): any;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    setTo(c: any, u: any): void;
                };
                _underlines: never[];
                gameObject: Player["_playerContainer"]["chatText"]["gameObject"];
                GameObject: Player["_playerContainer"]["chatText"]["gameObject"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                OnActiveChanged: Player["_playerContainer"]["chatText"]["textObject"]["onActiveChanged"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                OnDestroy: Player["_playerContainer"]["chatText"]["textObject"]["onDestroy"];
                onRootContainerSet: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                Source: {
                    source: string;
                    cleanUp(): void;
                    getText(): any;
                    setText(c: any): void;
                    onTextChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    OnTextChanged: Player["_playerContainer"]["chatText"]["textObject"]["Source"]["onTextChanged"];
                };
                textObject: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"];
                TextObject: Player["_playerContainer"]["chatText"]["textObject"]["_rootContainer"];
                textSource: Player["_playerContainer"]["chatText"]["textObject"]["Source"];
            };
            TextObject: Player["_playerContainer"]["chatText"]["textObject"];
            textSource: Player["_playerContainer"]["chatText"]["Source"];
        };
        children: ({ _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isModalWithTransparency: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isModalWithTransparency: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; add(c: any, u: any): any; addAt(c: any, u: any): any; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; callAll(c: any, u: any): void; callbackFromArray(c: any, u: any): any; containerUpdateTransform(): void; destroy(u: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getAt(c: any): any; getBounds(t: any, e: any): any; getByName(c: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getIndex(c: any): any; getInjectedValue(c: any): any; getLocalBounds(e: any, r: any): any; hasTooltip(): any; highlight(c: any, u: any, h: any, a: any): void; isHighlighted(): any; listenerCount(t: any): any; listeners(t: any): any; moveDown(c: any): any; moveUp(c: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; remove(c: any, u: any): any; removeAll(c: any): void; removeAllListeners(t: any): any; removeBetween(c: any, u: any, h: any, a: any): void; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; sendChildToBack(c: any): void; setChildIndex(t: any, e: any): void; setElementAsModal(c: any): void; setParent(t: any): any; setRenderState(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; showTooltip(c: any, u: any): void; sortChildren(): void; swap(c: any, u: any): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _game: Player["_playerContainer"]["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: any, e: any): any; clone(): any; contains(t: any, e: any): any; copyFrom(t: any): any; copyTo(t: any): any; enlarge(t: any): any; fit(t: any): any; pad(t: any, e: any): any; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; _trackedPointers: {}; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: any, e: any): any; clone(): any; contains(t: any, e: any): any; copyFrom(t: any): any; copyTo(t: any): any; enlarge(t: any): any; fit(t: any): any; pad(t: any, e: any): any; }; children: ({ _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; onTextureLoaded(arg0: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; frameName: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; key: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; onTextureLoaded(arg0: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isModalWithTransparency: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isModalWithTransparency: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; add(c: any, u: any): any; addAt(c: any, u: any): any; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; callAll(c: any, u: any): void; callbackFromArray(c: any, u: any): any; containerUpdateTransform(): void; containsPoint(arg0: any): void; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getAt(c: any): any; getBounds(t: any, e: any): any; getByName(c: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getIndex(c: any): any; getInjectedValue(c: any): any; getLocalBounds(): any; hasTooltip(): any; highlight(c: any, u: any, h: any, a: any): void; isHighlighted(): any; listenerCount(t: any): any; listeners(t: any): any; moveDown(c: any): any; moveUp(c: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; remove(c: any, u: any): any; removeAll(c: any): void; removeAllListeners(t: any): any; removeBetween(c: any, u: any, h: any, a: any): void; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; renderCanvas(t: any): void; sendChildToBack(c: any): void; setChildIndex(t: any, e: any): void; setElementAsModal(c: any): void; setParent(t: any): any; setRenderState(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; showTooltip(c: any, u: any): void; sortChildren(): void; swap(c: any, u: any): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; updateZ(): void; _bounds: any /* too deep */; _cacheData: any /* too deep */; _events: any /* too deep */; _game: Player["_playerContainer"]["_game"]; _localBounds: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; bounds: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"]; onDestroy: any /* too deep */; parent: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; world: any /* too deep */; worldGamePosition: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; uvs: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; input: any /* too deep */; localTransform: any /* too deep */; parent: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; })[]; events: { destroy(): void; onAddedToGroup: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onAnimationComplete: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onAnimationLoop: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onAnimationStart: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDragStart: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDragStop: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDragUpdate: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onEnterBounds: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onInputDown: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onInputOut: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onInputOver: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onInputUp: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onOutOfBounds: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onRemovedFromGroup: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onRemovedFromWorld: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isModalWithTransparency: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isModalWithTransparency: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; add(c: any, u: any): any; addAt(c: any, u: any): any; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; callAll(c: any, u: any): void; callbackFromArray(c: any, u: any): any; containerUpdateTransform(): void; destroy(u: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getAt(c: any): any; getBounds(t: any, e: any): any; getByName(c: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getIndex(c: any): any; getInjectedValue(c: any): any; getLocalBounds(e: any, r: any): any; hasTooltip(): any; highlight(c: any, u: any, h: any, a: any): void; isHighlighted(): any; listenerCount(t: any): any; listeners(t: any): any; moveDown(c: any): any; moveUp(c: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; remove(c: any, u: any): any; removeAll(c: any): void; removeAllListeners(t: any): any; removeBetween(c: any, u: any, h: any, a: any): void; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; sendChildToBack(c: any): void; setChildIndex(t: any, e: any): void; setElementAsModal(c: any): void; setParent(t: any): any; setRenderState(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; showTooltip(c: any, u: any): void; sortChildren(): void; swap(c: any, u: any): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; updateZ(): void; _bounds: any /* too deep */; _events: any /* too deep */; _game: Player["_playerContainer"]["_game"]; _localBounds: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; bounds: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"]; onDestroy: any /* too deep */; parent: Player["_playerContainer"]; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; world: any /* too deep */; worldGamePosition: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; }; }; game: Player["_playerContainer"]["_game"]; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"]; onDestroy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: never[]; }; parent: Player["_playerContainer"]; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; _trackedPointers: {}; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; world: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldGamePosition: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldPosition: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isModalWithTransparency: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isModalWithTransparency: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; add(c: any, u: any): any; addAt(c: any, u: any): any; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; callAll(c: any, u: any): void; callbackFromArray(c: any, u: any): any; containerUpdateTransform(): void; destroy(u: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getAt(c: any): any; getBounds(t: any, e: any): any; getByName(c: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getIndex(c: any): any; getInjectedValue(c: any): any; getLocalBounds(e: any, r: any): any; hasTooltip(): any; highlight(c: any, u: any, h: any, a: any): void; isHighlighted(): any; listenerCount(t: any): any; listeners(t: any): any; moveDown(c: any): any; moveUp(c: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; remove(c: any, u: any): any; removeAll(c: any): void; removeAllListeners(t: any): any; removeBetween(c: any, u: any, h: any, a: any): void; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; sendChildToBack(c: any): void; setChildIndex(t: any, e: any): void; setElementAsModal(c: any): void; setParent(t: any): any; setRenderState(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; showTooltip(c: any, u: any): void; sortChildren(): void; swap(c: any, u: any): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _game: Player["_playerContainer"]["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: any, e: any): any; clone(): any; contains(t: any, e: any): any; copyFrom(t: any): any; copyTo(t: any): any; enlarge(t: any): any; fit(t: any): any; pad(t: any, e: any): any; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; _trackedPointers: {}; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: any, e: any): any; clone(): any; contains(t: any, e: any): any; copyFrom(t: any): any; copyTo(t: any): any; enlarge(t: any): any; fit(t: any): any; pad(t: any, e: any): any; }; children: never[]; events: { destroy(): void; onAddedToGroup: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onAnimationComplete: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onAnimationLoop: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onAnimationStart: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDragStart: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDragStop: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDragUpdate: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onEnterBounds: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onInputDown: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onInputOut: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onInputOver: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onInputUp: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onOutOfBounds: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onRemovedFromGroup: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onRemovedFromWorld: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isModalWithTransparency: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isModalWithTransparency: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; add(c: any, u: any): any; addAt(c: any, u: any): any; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; callAll(c: any, u: any): void; callbackFromArray(c: any, u: any): any; containerUpdateTransform(): void; destroy(u: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getAt(c: any): any; getBounds(t: any, e: any): any; getByName(c: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getIndex(c: any): any; getInjectedValue(c: any): any; getLocalBounds(e: any, r: any): any; hasTooltip(): any; highlight(c: any, u: any, h: any, a: any): void; isHighlighted(): any; listenerCount(t: any): any; listeners(t: any): any; moveDown(c: any): any; moveUp(c: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; remove(c: any, u: any): any; removeAll(c: any): void; removeAllListeners(t: any): any; removeBetween(c: any, u: any, h: any, a: any): void; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; sendChildToBack(c: any): void; setChildIndex(t: any, e: any): void; setElementAsModal(c: any): void; setParent(t: any): any; setRenderState(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; showTooltip(c: any, u: any): void; sortChildren(): void; swap(c: any, u: any): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; updateZ(): void; _bounds: any /* too deep */; _events: any /* too deep */; _game: Player["_playerContainer"]["_game"]; _localBounds: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; bounds: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"]; onDestroy: any /* too deep */; parent: Player["_playerContainer"]; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; world: any /* too deep */; worldGamePosition: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; }; }; game: Player["_playerContainer"]["_game"]; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"]; onDestroy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: never[]; }; parent: Player["_playerContainer"]; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; _trackedPointers: {}; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; world: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldGamePosition: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldPosition: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; height: number; renderId: number; rotation: number; tabIndex: number; width: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; calculateBounds(): void; containerUpdateTransform(): void; destroy(u: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(e: any, r: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; setChildIndex(t: any, e: any): void; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: any, e: any): any; clone(): any; contains(t: any, e: any): any; copyFrom(t: any): any; copyTo(t: any): any; enlarge(t: any): any; fit(t: any): any; pad(t: any, e: any): any; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; _trackedPointers: {}; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; _trackedPointers: {}; children: { _accessibleActive: boolean; _autoResolution: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _ownCanvas: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; dirty: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; roundPixels: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _resolution: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; cacheAsBitmapMultisample: number; height: number; localStyleID: number; renderId: number; resolution: number; rotation: number; tabIndex: number; tint: number; width: number; worldAlpha: number; x: number; y: number; zIndex: number; _font: string; _text: string; accessiblePointerEvents: string; accessibleType: string; pluginName: string; text: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; _styleListener: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; vertexTrimmedData: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _generateFillStyle(e: any, r: any, i: any): any; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; drawLetterSpacing(t: any, e: any, r: any, i: any): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; setChildIndex(t: any, e: any): void; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateText(t: any): void; updateTexture(): void; updateTransform(): void; canvas: HTMLCanvasElement; context: CanvasRenderingContext2D; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _style: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; children: any /* too deep */; localTransform: any /* too deep */; parent: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; style: any /* too deep */; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }[]; gameObjectRef: { _destroyed: boolean; _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; isDestroyed: boolean; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(c: any): void; addChildAt(c: any, u: any): void; addComponent(c: any, u: any): any; bringToFront(): void; destroy(): void; destroyDeferred(): void; dispatchComponentAddedInHierarchy(c: any, u: any): void; findChildByName(c: any): any; findComponent(c: any): any; findComponentInChildren(c: any, u: any): any; findComponentInParent(c: any, u: any): any; findComponents(c: any): any; findComponentsInChildren(c: any, u: any): any; firstUpdate(): void; getRenderOrder(): any; hasComponent(c: any): any; isActiveInHierarchy(): any; isInBack(): any; isInFront(): any; removeComponent(c: any): void; removeFromParent(): any; sendToBack(): void; setLayer(c: any, u: any): void; setParent(c: any, u: any): any; setRenderOrder(c: any): void; update(): void; updateFunction(): void; _children: never[]; _components: any /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(u: any): void; destroy(): void; firstUpdate(): void; getInjectedValue(c: any): any; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; preDeserialize(c: any): void; reapplyChildRelativeValues(): void; update(): void; updateFunction(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: any /* too deep */; anchor: any /* too deep */; gameObject: any /* too deep */; GameObject: any /* too deep */; group: any /* too deep */; onActiveChanged: any /* too deep */; OnActiveChanged: any /* too deep */; onDestroy: any /* too deep */; OnDestroy: any /* too deep */; }; children: never[]; components: any /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(u: any): void; destroy(): void; firstUpdate(): void; getInjectedValue(c: any): any; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; preDeserialize(c: any): void; reapplyChildRelativeValues(): void; update(): void; updateFunction(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: any /* too deep */; anchor: any /* too deep */; gameObject: any /* too deep */; GameObject: any /* too deep */; group: any /* too deep */; onActiveChanged: any /* too deep */; OnActiveChanged: any /* too deep */; onDestroy: any /* too deep */; OnDestroy: any /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; onDestroy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: never[]; }; parent: Player["_playerContainer"]; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; _trackedPointers: {}; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; } | Player["_playerContainer"]["chatText"]["gameObject"]["_legacyTransform"]["_group"])[];
        collisionBody: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            uvs: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionBody"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: {
                        dispose: {
                            once: boolean;
                            fn(t: any, e: any): void;
                            context: Player["_playerContainer"]["_game"]["_app"]["renderer"]["texture"];
                        };
                        update: {
                            once: boolean;
                            fn(t: any): any;
                            context: any /* too deep */;
                        };
                    };
                    _glTextures: {
                        "1": {
                            mipmap: boolean;
                            dirtyId: number;
                            dirtyStyleId: number;
                            height: number;
                            internalFormat: number;
                            samplerType: number;
                            type: number;
                            width: number;
                            wrapMode: number;
                            texture: WebGLTexture;
                        };
                    };
                    resource: {
                        createBitmap: boolean;
                        destroyed: boolean;
                        internal: boolean;
                        noSubImage: boolean;
                        preserveBitmap: boolean;
                        valid: boolean;
                        _height: number;
                        _width: number;
                        height: number;
                        width: number;
                        url: string;
                        _process: null;
                        alphaMode: null;
                        bitmap: null;
                        bind(t: any): void;
                        destroy(): void;
                        dispose(): void;
                        load(t: any): any;
                        process(): any;
                        resize(t: any, e: any): void;
                        style(t: any, e: any, r: any): any;
                        unbind(t: any): void;
                        update(): void;
                        upload(t: any, r: any, i: any): any;
                        _load: Promise<any>;
                        source: HTMLImageElement;
                        onError: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        onResize: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        onUpdate: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                    };
                    textureCacheIds: never[];
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["collisionBody"]["_texture"]["_frame"];
                orig: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                textureCacheIds: never[];
                trim: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["collisionBody"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: number;
                frameTotal: number;
                frameName: string;
                name: null;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _frameData: {
                    _destroyed: boolean;
                    destroyed: boolean;
                    total: number;
                    addFrame(c: any): any;
                    checkFrameName(c: any): any;
                    clone(): any;
                    destroy(): void;
                    getFrame(c: any): any;
                    getFrameByName(c: any): any;
                    getFrameIndexes(c: any, u: any, h: any): any;
                    getFrameRange(c: any, u: any, h: any): any;
                    getFrames(c: any, u: any, h: any): any;
                    _frameNames: Map<never, never>;
                    _frames: any /* too deep */[];
                };
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                currentFrame: {
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    distance: number;
                    height: number;
                    index: number;
                    left: number;
                    right: number;
                    sourceSizeH: number;
                    sourceSizeW: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    name: string;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    getRect(c: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): void;
                    setTrim(c: any, u: any, h: any, a: any, f: any, l: any, b: any): void;
                };
                frameData: Player["_playerContainer"]["collisionBody"]["animations"]["_frameData"];
                onLoaded: Player["_playerContainer"]["collisionBody"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["collisionBody"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["collisionBody"];
            };
            game: Player["_playerContainer"]["_game"];
            input: {
                _dragDistancePass: boolean;
                _dragPhase: boolean;
                _dragTimePass: boolean;
                _pendingDrag: boolean;
                _setHandCursor: boolean;
                _wasEnabled: boolean;
                allowHorizontalDrag: boolean;
                allowVerticalDrag: boolean;
                attachToCamera: boolean;
                bringToTop: boolean;
                checked: boolean;
                dragFromCenter: boolean;
                draggable: boolean;
                dragStopBlocksInputUp: boolean;
                enabled: boolean;
                isDragged: boolean;
                snapOnDrag: boolean;
                snapOnRelease: boolean;
                useHandCursor: boolean;
                dragDistanceThreshold: number;
                dragTimeThreshold: number;
                priorityID: number;
                snapOffsetX: number;
                snapOffsetY: number;
                snapX: number;
                snapY: number;
                boundsRect: null;
                boundsSprite: null;
                _pointerOutHandler(c: any, u: any): void;
                _pointerOverHandler(c: any, u: any): void;
                _releasedHandler(c: any): void;
                _touchedHandler(c: any): any;
                addedToGroup(): void;
                checkBoundsRect(): void;
                checkBoundsSprite(): void;
                checkPointerDown(c: any): any;
                checkPointerOver(c: any): any;
                destroy(): void;
                disableDrag(): void;
                disableSnap(): void;
                downDuration(c: any): any;
                dragTimeElapsed(c: any): void;
                enableDrag(c: any, u: any, h: any, f: any, l: any): void;
                enableSnap(c: any, u: any, h: any, a: any, f: any, l: any): void;
                globalToLocal(c: any): any;
                justOut(c: any, u: any): any;
                justOver(c: any, u: any): any;
                justPressed(c: any, u: any): any;
                justReleased(c: any, u: any): any;
                overDuration(c: any): any;
                pointerDown(c: any): any;
                pointerDragged(c: any): any;
                pointerOut(c: any): any;
                pointerOver(c: any): any;
                pointerTimeDown(c: any): any;
                pointerTimeOut(c: any): any;
                pointerTimeOver(c: any): any;
                pointerTimeUp(c: any): any;
                pointerUp(c: any): any;
                pointerX(c: any): any;
                pointerY(c: any): any;
                removedFromGroup(): void;
                reset(): void;
                setDragLock(c: any, u: any): void;
                start(c: any, u: any): any;
                startDrag(c: any): void;
                stop(): void;
                stopDrag(c: any): void;
                update(c: any): any;
                updateDrag(c: any, u: any): any;
                validForInput(c: any): any;
                _dragPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                _pointerData: { isDown: boolean; isDragged: boolean; isOut: boolean; isOver: boolean; isUp: boolean; downDuration: number; id: number; timeDown: number; timeOut: number; timeOver: number; timeUp: number; x: number; y: number; }[];
                downPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                dragOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                dragStartPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                game: Player["_playerContainer"]["_game"];
                snapOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                snapPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                sprite: Player["_playerContainer"]["collisionBody"];
            };
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _isModalWithTransparency: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isModalWithTransparency: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                length: number;
                offsetX: number;
                offsetY: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                _sortProperty: string;
                accessiblePointerEvents: string;
                accessibleType: string;
                name: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                add(c: any, u: any): any;
                addAt(c: any, u: any): any;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(c: any): void;
                calculateBounds(): void;
                callAll(c: any, u: any): void;
                callbackFromArray(c: any, u: any): any;
                containerUpdateTransform(): void;
                destroy(u: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getAt(c: any): any;
                getBounds(t: any, e: any): any;
                getByName(c: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getIndex(c: any): any;
                getInjectedValue(c: any): any;
                getLocalBounds(e: any, r: any): any;
                hasTooltip(): any;
                highlight(c: any, u: any, h: any, a: any): void;
                isHighlighted(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                moveDown(c: any): any;
                moveUp(c: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                remove(c: any, u: any): any;
                removeAll(c: any): void;
                removeAllListeners(t: any): any;
                removeBetween(c: any, u: any, h: any, a: any): void;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                sendChildToBack(c: any): void;
                setChildIndex(t: any, e: any): void;
                setElementAsModal(c: any): void;
                setParent(t: any): any;
                setRenderState(c: any, u: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                showTooltip(c: any, u: any): void;
                sortChildren(): void;
                swap(c: any, u: any): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateTransform(): void;
                updateZ(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _game: Player["_playerContainer"]["_game"];
                _localBounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                anchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                children: ({ _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; onTextureLoaded(arg0: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: Player["_playerContainer"]["collisionBody"]["parent"]; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; frameName: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; key: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: Player["_playerContainer"]["collisionBody"]["parent"]; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; onTextureLoaded(arg0: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: Player["_playerContainer"]["collisionBody"]["parent"]; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isModalWithTransparency: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isModalWithTransparency: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; add(c: any, u: any): any; addAt(c: any, u: any): any; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; callAll(c: any, u: any): void; callbackFromArray(c: any, u: any): any; containerUpdateTransform(): void; containsPoint(arg0: any): void; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getAt(c: any): any; getBounds(t: any, e: any): any; getByName(c: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getIndex(c: any): any; getInjectedValue(c: any): any; getLocalBounds(): any; hasTooltip(): any; highlight(c: any, u: any, h: any, a: any): void; isHighlighted(): any; listenerCount(t: any): any; listeners(t: any): any; moveDown(c: any): any; moveUp(c: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; remove(c: any, u: any): any; removeAll(c: any): void; removeAllListeners(t: any): any; removeBetween(c: any, u: any, h: any, a: any): void; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; renderCanvas(t: any): void; sendChildToBack(c: any): void; setChildIndex(t: any, e: any): void; setElementAsModal(c: any): void; setParent(t: any): any; setRenderState(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; showTooltip(c: any, u: any): void; sortChildren(): void; swap(c: any, u: any): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; updateZ(): void; _bounds: any /* too deep */; _cacheData: any /* too deep */; _events: any /* too deep */; _game: Player["_playerContainer"]["_game"]; _localBounds: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; bounds: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"]; onDestroy: any /* too deep */; parent: Player["_playerContainer"]["collisionBody"]["parent"]; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; world: any /* too deep */; worldGamePosition: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; uvs: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: Player["_playerContainer"]["collisionBody"]["_texture"]; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; input: any /* too deep */; localTransform: any /* too deep */; parent: Player["_playerContainer"]["collisionBody"]["parent"]; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: Player["_playerContainer"]["collisionBody"]["_texture"]; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | Player["_playerContainer"]["collisionBody"])[];
                events: {
                    destroy(): void;
                    onAddedToGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationComplete: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationLoop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragUpdate: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onEnterBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputDown: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOut: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOver: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputUp: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onOutOfBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromWorld: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: Player["_playerContainer"]["collisionBody"]["parent"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["collisionBody"]["parent"]["localTransform"];
                        pivot: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["skew"];
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["parent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["collisionBody"]["parent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"];
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldGamePosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["scale"];
                worldTransform: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["worldTransform"];
            };
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["collisionBody"]["localTransform"];
                    pivot: Player["_playerContainer"]["collisionBody"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["collisionBody"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["collisionBody"]["_texture"];
            trackedPointers: Player["_playerContainer"]["collisionBody"]["_trackedPointers"];
            transform: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["collisionBody"]["pivot"]["scope"]["worldTransform"];
        };
        collisionHead: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            uvs: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["collisionHead"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: Player["_playerContainer"]["collisionBody"]["_texture"];
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["collisionHead"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: number;
                frameTotal: number;
                frameName: string;
                name: null;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _frameData: Player["_playerContainer"]["collisionBody"]["animations"]["_frameData"];
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                currentFrame: Player["_playerContainer"]["collisionBody"]["animations"]["currentFrame"];
                frameData: Player["_playerContainer"]["collisionBody"]["animations"]["_frameData"];
                onLoaded: Player["_playerContainer"]["collisionHead"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["collisionHead"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["collisionHead"];
            };
            game: Player["_playerContainer"]["_game"];
            input: {
                _dragDistancePass: boolean;
                _dragPhase: boolean;
                _dragTimePass: boolean;
                _pendingDrag: boolean;
                _setHandCursor: boolean;
                _wasEnabled: boolean;
                allowHorizontalDrag: boolean;
                allowVerticalDrag: boolean;
                attachToCamera: boolean;
                bringToTop: boolean;
                checked: boolean;
                dragFromCenter: boolean;
                draggable: boolean;
                dragStopBlocksInputUp: boolean;
                enabled: boolean;
                isDragged: boolean;
                snapOnDrag: boolean;
                snapOnRelease: boolean;
                useHandCursor: boolean;
                dragDistanceThreshold: number;
                dragTimeThreshold: number;
                priorityID: number;
                snapOffsetX: number;
                snapOffsetY: number;
                snapX: number;
                snapY: number;
                boundsRect: null;
                boundsSprite: null;
                _pointerOutHandler(c: any, u: any): void;
                _pointerOverHandler(c: any, u: any): void;
                _releasedHandler(c: any): void;
                _touchedHandler(c: any): any;
                addedToGroup(): void;
                checkBoundsRect(): void;
                checkBoundsSprite(): void;
                checkPointerDown(c: any): any;
                checkPointerOver(c: any): any;
                destroy(): void;
                disableDrag(): void;
                disableSnap(): void;
                downDuration(c: any): any;
                dragTimeElapsed(c: any): void;
                enableDrag(c: any, u: any, h: any, f: any, l: any): void;
                enableSnap(c: any, u: any, h: any, a: any, f: any, l: any): void;
                globalToLocal(c: any): any;
                justOut(c: any, u: any): any;
                justOver(c: any, u: any): any;
                justPressed(c: any, u: any): any;
                justReleased(c: any, u: any): any;
                overDuration(c: any): any;
                pointerDown(c: any): any;
                pointerDragged(c: any): any;
                pointerOut(c: any): any;
                pointerOver(c: any): any;
                pointerTimeDown(c: any): any;
                pointerTimeOut(c: any): any;
                pointerTimeOver(c: any): any;
                pointerTimeUp(c: any): any;
                pointerUp(c: any): any;
                pointerX(c: any): any;
                pointerY(c: any): any;
                removedFromGroup(): void;
                reset(): void;
                setDragLock(c: any, u: any): void;
                start(c: any, u: any): any;
                startDrag(c: any): void;
                stop(): void;
                stopDrag(c: any): void;
                update(c: any): any;
                updateDrag(c: any, u: any): any;
                validForInput(c: any): any;
                _dragPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                _pointerData: { isDown: boolean; isDragged: boolean; isOut: boolean; isOver: boolean; isUp: boolean; downDuration: number; id: number; timeDown: number; timeOut: number; timeOver: number; timeUp: number; x: number; y: number; }[];
                downPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                dragOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                dragStartPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                game: Player["_playerContainer"]["_game"];
                snapOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                snapPoint: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(c: any): void;
                    angle(c: any): any;
                    ceil(): void;
                    clamp(c: any, u: any, h: any): void;
                    clip(c: any): void;
                    copyFrom(c: any): any;
                    copyTo(c: any): any;
                    cross(c: any): any;
                    divide(c: any): void;
                    dot(c: any): any;
                    equals(c: any): any;
                    floor(): void;
                    getDistance(c: any): any;
                    getDistanceSq(c: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(c: any, u: any): void;
                    invert(): void;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    isZero(): any;
                    multiply(c: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(c: any): void;
                    print(c: any): void;
                    project(c: any, u: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(c: any, u: any, h: any): void;
                    round(): void;
                    set(c: any, u: any): void;
                    setTo(c: any, u: any): void;
                    setToPolar(c: any, u: any): void;
                    subtract(c: any): void;
                    toString(): any;
                    trunc(): void;
                };
                sprite: Player["_playerContainer"]["collisionHead"];
            };
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["collisionHead"]["localTransform"];
                    pivot: Player["_playerContainer"]["collisionHead"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["collisionHead"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["collisionBody"]["_texture"];
            trackedPointers: Player["_playerContainer"]["collisionHead"]["_trackedPointers"];
            transform: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["collisionHead"]["pivot"]["scope"]["worldTransform"];
        };
        data: {
            boots: number;
            eyeColor: number;
            face: number;
            faceColor: number;
            hat: number;
            outfit: number;
            skinColor: number;
            weapon: number;
            mount: undefined;
            hair: {
                color: number;
                style: number;
            };
        };
        events: {
            destroy(): void;
            onAddedToGroup: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onAnimationComplete: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onAnimationLoop: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onAnimationStart: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onDragStart: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onDragStop: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onDragUpdate: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onEnterBounds: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onInputDown: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onInputOut: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onInputOver: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onInputUp: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onOutOfBounds: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onRemovedFromGroup: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onRemovedFromWorld: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            parent: Player["_playerContainer"];
        };
        eyes: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            frameName: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            key: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["eyes"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                multisample: number;
                resolution: number;
                rotate: number;
                width: number;
                filterFrame: null;
                filterPoolKey: null;
                uvMatrix: null;
                trim: undefined;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                resize(t: any, e: any, r: any): void;
                setResolution(t: any): void;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    resource: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    resize(t: any, e: any): void;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: {
                        dispose: {
                            once: boolean;
                            fn(t: any, e: any): void;
                            context: Player["_playerContainer"]["_game"]["_app"]["renderer"]["texture"];
                        };
                        update: {
                            once: boolean;
                            fn(t: any): any;
                            context: Player["_playerContainer"]["eyes"]["_texture"];
                        };
                    };
                    _glTextures: {
                        "1": {
                            mipmap: boolean;
                            dirtyId: number;
                            dirtyStyleId: number;
                            height: number;
                            internalFormat: number;
                            samplerType: number;
                            type: number;
                            width: number;
                            wrapMode: number;
                            texture: WebGLTexture;
                        };
                    };
                    clearColor: number[];
                    filterStack: any /* too deep */[];
                    framebuffer: {
                        depth: boolean;
                        stencil: boolean;
                        dirtyFormat: number;
                        dirtyId: number;
                        dirtySize: number;
                        height: number;
                        multisample: number;
                        width: number;
                        depthTexture: null;
                        addColorTexture(e: any, r: any): any;
                        addDepthTexture(e: any): any;
                        destroyDepthTexture(): void;
                        dispose(): void;
                        enableDepth(): any;
                        enableStencil(): any;
                        resize(t: any, e: any): void;
                        colorTexture: Player["_playerContainer"]["eyes"]["_texture"]["baseTexture"];
                        colorTextures: Player["_playerContainer"]["eyes"]["_texture"]["baseTexture"][];
                        disposeRunner: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        glFramebuffers: {
                            "1": any /* too deep */;
                        };
                    };
                    maskStack: never[];
                    textureCacheIds: never[];
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["eyes"]["_texture"]["_frame"];
                framebuffer: Player["_playerContainer"]["eyes"]["_texture"]["baseTexture"]["framebuffer"];
                orig: Player["_playerContainer"]["eyes"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["eyes"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: null;
                frameName: null;
                name: null;
                frameData: undefined;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onLoaded: Player["_playerContainer"]["eyes"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["eyes"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["eyes"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _roundPixels: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                inputEnabled: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isLoaded: boolean;
                isMask: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                roundPixels: boolean;
                smoothed: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _cachedTint: number;
                _eventsCount: number;
                _height: number;
                _lastSortedIndex: number;
                _textureID: number;
                _textureTrimmedID: number;
                _tint: number;
                _tintRGB: number;
                _transformID: number;
                _transformTrimmedID: number;
                _width: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                blendMode: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                tint: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                pluginName: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                frameName: null;
                hitArea: null;
                loadingTween: null;
                mask: null;
                name: null;
                scaleMax: null;
                scaleMin: null;
                transformCallbackContext: null;
                vertexTrimmedData: null;
                forcedHeight: undefined;
                forcedWidth: undefined;
                frame: undefined;
                key: undefined;
                onTextureLoaded: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _onAnchorUpdate(): void;
                _onTextureUpdate(): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(c: any): void;
                calculateBounds(): void;
                calculateTrimmedVertices(): any;
                calculateVertices(): void;
                checkCallback(): void;
                checkSpriteDimension(): void;
                containerUpdateTransform(): void;
                containsPoint(t: any): any;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                getOffsetX(): any;
                getOffsetY(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                loadNewTexture(c: any, u: any, h: any, a: any): void;
                loadTexture(c: any, u: any): void;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                rotateMiddleBased(c: any): void;
                sendChildToBack(c: any): void;
                setActive(c: any): void;
                setChildIndex(t: any, e: any): void;
                setFrame(c: any): void;
                setParent(t: any): any;
                setTexture(c: any, u: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateFrame(u: any): void;
                updateTexture(c: any): void;
                updateTransform(): void;
                indices: Uint16Array;
                uvs: Float32Array;
                vertexData: Float32Array;
                _anchor: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["eyes"]["parent"];
                };
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _localBounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _texture: {
                    noFrame: boolean;
                    valid: boolean;
                    _eventsCount: number;
                    _rotate: number;
                    _updateID: number;
                    height: number;
                    multisample: number;
                    resolution: number;
                    rotate: number;
                    width: number;
                    filterFrame: null;
                    filterPoolKey: null;
                    uvMatrix: null;
                    trim: undefined;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    clone(): any;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    onBaseTextureUpdated(t: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    resize(t: any, e: any, r: any): void;
                    setResolution(t: any): void;
                    update(): void;
                    updateUvs(): void;
                    _events: {};
                    _frame: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    _uvs: {
                        x0: number;
                        x1: number;
                        x2: number;
                        x3: number;
                        y0: number;
                        y1: number;
                        y2: number;
                        y3: number;
                        set(t: any, e: any, r: any): void;
                        uvsFloat32: Float32Array;
                    };
                    baseTexture: {
                        destroyed: boolean;
                        isPowerOfTwo: boolean;
                        valid: boolean;
                        _batchEnabled: number;
                        _batchLocation: number;
                        _eventsCount: number;
                        _mipmap: number;
                        _scaleMode: number;
                        _wrapMode: number;
                        alphaMode: number;
                        anisotropicLevel: number;
                        dirtyId: number;
                        dirtyStyleId: number;
                        format: number;
                        height: number;
                        mipmap: number;
                        realHeight: number;
                        realWidth: number;
                        resolution: number;
                        scaleMode: number;
                        target: number;
                        touched: number;
                        type: number;
                        uid: number;
                        width: number;
                        wrapMode: number;
                        cacheId: null;
                        parentTextureArray: null;
                        resource: null;
                        _refreshPOT(): void;
                        addListener(t: any, e: any, r: any): any;
                        castToBaseTexture(): any;
                        destroy(): void;
                        dispose(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        eventNames(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onError(t: any): void;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        resize(t: any, e: any): void;
                        setRealSize(t: any, e: any, r: any): any;
                        setResolution(t: any): any;
                        setResource(t: any): any;
                        setSize(t: any, e: any, r: any): any;
                        setStyle(t: any, e: any): any;
                        update(): void;
                        _events: {
                            dispose: any /* too deep */;
                            update: any /* too deep */;
                        };
                        _glTextures: {
                            "1": any /* too deep */;
                        };
                        clearColor: number[];
                        filterStack: any /* too deep */[];
                        framebuffer: {
                            depth: boolean;
                            stencil: boolean;
                            dirtyFormat: number;
                            dirtyId: number;
                            dirtySize: number;
                            height: number;
                            multisample: number;
                            width: number;
                            depthTexture: null;
                            addColorTexture(e: any, r: any): any;
                            addDepthTexture(e: any): any;
                            destroyDepthTexture(): void;
                            dispose(): void;
                            enableDepth(): any;
                            enableStencil(): any;
                            resize(t: any, e: any): void;
                            colorTexture: Player["_playerContainer"]["eyes"]["parent"]["_texture"]["baseTexture"];
                            colorTextures: any /* too deep */;
                            disposeRunner: any /* too deep */;
                            glFramebuffers: any /* too deep */;
                        };
                        maskStack: never[];
                        textureCacheIds: never[];
                    };
                    defaultAnchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    frame: Player["_playerContainer"]["eyes"]["parent"]["_texture"]["_frame"];
                    framebuffer: Player["_playerContainer"]["eyes"]["parent"]["_texture"]["baseTexture"]["framebuffer"];
                    orig: Player["_playerContainer"]["eyes"]["parent"]["_texture"]["_frame"];
                    textureCacheIds: never[];
                };
                _trackedPointers: {};
                anchor: Player["_playerContainer"]["eyes"]["parent"]["_anchor"];
                animations: {
                    isLoaded: boolean;
                    updateIfVisible: boolean;
                    frame: null;
                    frameName: null;
                    name: null;
                    frameData: undefined;
                    add(c: any, u: any, h: any, a: any, l: any): any;
                    addIfFound(c: any, u: any, h: any, a: any): any;
                    copyFrameData(c: any, u: any): any;
                    destroy(): void;
                    getAnimation(c: any): any;
                    loadFrameData(c: any, u: any): any;
                    next(c: any): void;
                    onFrameLoaded(c: any): void;
                    play(c: any, u: any, h: any): any;
                    previous(c: any): void;
                    stop(c: any, u: any): void;
                    update(): any;
                    validateFrames(c: any, u: any): any;
                    _animations: Map<never, never>;
                    _onLoaded: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onLoaded: Player["_playerContainer"]["eyes"]["parent"]["animations"]["_onLoaded"];
                    sprite: Player["_playerContainer"]["eyes"]["parent"];
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                cameraOffset: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                children: (Player["_playerContainer"]["eyes"] | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; frameName: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; key: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: Player["_playerContainer"]["eyes"]["parent"]; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; frameName: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; onTextureLoaded(arg0: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: Player["_playerContainer"]["eyes"]["parent"]; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; })[];
                events: {
                    destroy(): void;
                    onAddedToGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationComplete: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationLoop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragUpdate: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onEnterBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputDown: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOut: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOver: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputUp: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onOutOfBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromWorld: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: Player["_playerContainer"]["eyes"]["parent"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                parent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _isModalWithTransparency: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    exists: boolean;
                    fixedToCamera: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isModalWithTransparency: boolean;
                    isSprite: boolean;
                    pendingDestroy: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    bottom: number;
                    cacheAsBitmapMultisample: number;
                    centerX: number;
                    centerY: number;
                    height: number;
                    left: number;
                    length: number;
                    offsetX: number;
                    offsetY: number;
                    renderId: number;
                    right: number;
                    rotation: number;
                    tabIndex: number;
                    top: number;
                    width: number;
                    worldAlpha: number;
                    worldRotation: number;
                    x: number;
                    y: number;
                    z: number;
                    zIndex: number;
                    _sortProperty: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    name: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    add(c: any, u: any): any;
                    addAt(c: any, u: any): any;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    bringChildToTop(c: any): void;
                    calculateBounds(): void;
                    callAll(c: any, u: any): void;
                    callbackFromArray(c: any, u: any): any;
                    containerUpdateTransform(): void;
                    destroy(u: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getAt(c: any): any;
                    getBounds(t: any, e: any): any;
                    getByName(c: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getIndex(c: any): any;
                    getInjectedValue(c: any): any;
                    getLocalBounds(e: any, r: any): any;
                    hasTooltip(): any;
                    highlight(c: any, u: any, h: any, a: any): void;
                    isHighlighted(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    moveDown(c: any): any;
                    moveUp(c: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    remove(c: any, u: any): any;
                    removeAll(c: any): void;
                    removeAllListeners(t: any): any;
                    removeBetween(c: any, u: any, h: any, a: any): void;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    sendChildToBack(c: any): void;
                    setChildIndex(t: any, e: any): void;
                    setElementAsModal(c: any): void;
                    setParent(t: any): any;
                    setRenderState(c: any, u: any): void;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    showTooltip(c: any, u: any): void;
                    sortChildren(): void;
                    swap(c: any, u: any): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    update(): void;
                    updateTransform(): void;
                    updateZ(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _game: Player["_playerContainer"]["_game"];
                    _localBounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _localBoundsRect: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    anchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bounds: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    children: Player["_playerContainer"]["eyes"]["parent"][];
                    events: {
                        destroy(): void;
                        onAddedToGroup: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onAnimationComplete: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onAnimationLoop: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onAnimationStart: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDragStart: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDragStop: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDragUpdate: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onEnterBounds: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onInputDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onInputOut: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onInputOver: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onInputUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onOutOfBounds: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onRemovedFromGroup: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onRemovedFromWorld: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["eyes"]["parent"]["parent"];
                    };
                    game: Player["_playerContainer"]["_game"];
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        _isModalWithTransparency: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isModalWithTransparency: boolean;
                        isSprite: boolean;
                        pendingDestroy: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        bottom: number;
                        cacheAsBitmapMultisample: number;
                        centerX: number;
                        centerY: number;
                        height: number;
                        left: number;
                        length: number;
                        offsetX: number;
                        offsetY: number;
                        renderId: number;
                        right: number;
                        rotation: number;
                        tabIndex: number;
                        top: number;
                        width: number;
                        worldAlpha: number;
                        worldRotation: number;
                        x: number;
                        y: number;
                        z: number;
                        zIndex: number;
                        _sortProperty: string;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        add(c: any, u: any): any;
                        addAt(c: any, u: any): any;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        bringChildToTop(c: any): void;
                        calculateBounds(): void;
                        callAll(c: any, u: any): void;
                        callbackFromArray(c: any, u: any): any;
                        containerUpdateTransform(): void;
                        containsPoint(arg0: any): void;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getAt(c: any): any;
                        getBounds(t: any, e: any): any;
                        getByName(c: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getIndex(c: any): any;
                        getInjectedValue(c: any): any;
                        getLocalBounds(): any;
                        hasTooltip(): any;
                        highlight(c: any, u: any, h: any, a: any): void;
                        isHighlighted(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        moveDown(c: any): any;
                        moveUp(c: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        remove(c: any, u: any): any;
                        removeAll(c: any): void;
                        removeAllListeners(t: any): any;
                        removeBetween(c: any, u: any, h: any, a: any): void;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        renderCanvas(t: any): void;
                        sendChildToBack(c: any): void;
                        setChildIndex(t: any, e: any): void;
                        setElementAsModal(c: any): void;
                        setParent(t: any): any;
                        setRenderState(c: any, u: any): void;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        showTooltip(c: any, u: any): void;
                        sortChildren(): void;
                        swap(c: any, u: any): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        updateZ(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _cacheData: {
                            textureCacheId: string;
                            originalFilterArea: null;
                            originalMask: null;
                            originalContainsPoint: undefined;
                            originalRenderCanvas: undefined;
                            originalCalculateBounds(): void;
                            originalDestroy(u: any): void;
                            originalGetLocalBounds(e: any, r: any): any;
                            originalRender(t: any): void;
                            originalUpdateTransform(): void;
                            sprite: any /* too deep */;
                        };
                        _events: {};
                        _game: Player["_playerContainer"]["_game"];
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        anchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        bounds: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        children: Player["_playerContainer"]["eyes"]["parent"]["parent"][];
                        events: {
                            destroy(): void;
                            onAddedToGroup: any /* too deep */;
                            onAnimationComplete: any /* too deep */;
                            onAnimationLoop: any /* too deep */;
                            onAnimationStart: any /* too deep */;
                            onDestroy: any /* too deep */;
                            onDragStart: any /* too deep */;
                            onDragStop: any /* too deep */;
                            onDragUpdate: any /* too deep */;
                            onEnterBounds: any /* too deep */;
                            onInputDown: any /* too deep */;
                            onInputOut: any /* too deep */;
                            onInputOver: any /* too deep */;
                            onInputUp: any /* too deep */;
                            onOutOfBounds: any /* too deep */;
                            onRemovedFromGroup: any /* too deep */;
                            onRemovedFromWorld: any /* too deep */;
                            parent: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"];
                        };
                        game: Player["_playerContainer"]["_game"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["collisionBody"]["parent"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                        tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["localTransform"];
                            pivot: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["pivot"];
                            position: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["position"];
                            scale: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"];
                            skew: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        world: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldGamePosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldPosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldScale: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"];
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["eyes"]["parent"]["parent"]["localTransform"];
                            pivot: Player["_playerContainer"]["eyes"]["parent"]["parent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["parent"]["parent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["parent"]["parent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["parent"]["parent"]["pivot"]["scope"];
                    };
                    stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                    tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["eyes"]["parent"]["parent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["eyes"]["parent"]["parent"]["pivot"]["scope"];
                    world: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    worldGamePosition: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    worldPosition: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    worldScale: Player["_playerContainer"]["eyes"]["parent"]["parent"]["scale"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["eyes"]["parent"]["localTransform"];
                        pivot: Player["_playerContainer"]["eyes"]["parent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["position"];
                previousPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                scale: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["skew"];
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["parent"]["_tempDisplayObjectParent"];
                texture: Player["_playerContainer"]["eyes"]["parent"]["_texture"];
                trackedPointers: Player["_playerContainer"]["eyes"]["parent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"];
                transformCallback: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"];
                worldTransform: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["worldTransform"];
            };
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["eyes"]["localTransform"];
                    pivot: Player["_playerContainer"]["eyes"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["eyes"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["eyes"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["eyes"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["eyes"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["eyes"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["eyes"]["_texture"];
            trackedPointers: Player["_playerContainer"]["eyes"]["_trackedPointers"];
            transform: Player["_playerContainer"]["eyes"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["eyes"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["eyes"]["pivot"]["scope"]["worldTransform"];
        };
        faceMetadata: {
            v: number;
            vIcon: number;
            type: string;
        };
        fixedIKPositions: {
            head: {
                x: number;
                y: number;
            };
            neck: {
                x: number;
                y: number;
            };
        };
        follow: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _isModalWithTransparency: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            battleShy: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            complete: boolean;
            destroyed: boolean;
            evtProc: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isMask: boolean;
            isModalWithTransparency: boolean;
            isSprite: boolean;
            loading: boolean;
            outOfDate: boolean;
            pendingDestroy: boolean;
            ran: boolean;
            renderable: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            walkIntoBattle: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _eventsCount: number;
            _lastSortedIndex: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            castDelay: number;
            centerX: number;
            centerY: number;
            fxQueue: number;
            height: number;
            left: number;
            length: number;
            mode: number;
            offsetX: number;
            offsetY: number;
            renderId: number;
            right: number;
            rotation: number;
            setScale: number;
            speed: number;
            tabIndex: number;
            top: number;
            walkSpeed: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            _sortProperty: string;
            accessiblePointerEvents: string;
            accessibleType: string;
            name: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            captured: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            locomotion: null;
            mask: null;
            pairs: null;
            potencyIcon: null;
            potionIcon: null;
            statusEffects: null;
            loadedCallback: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            add(c: any, u: any): any;
            addAt(c: any, u: any): any;
            addBarrierSpritesheet(c: any, u: any, h: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            addOnClick(c: any): void;
            attack(c: any): void;
            bringChildToTop(c: any): void;
            cacheAssets(): void;
            calculateBounds(): void;
            callAll(c: any, u: any): void;
            callbackFromArray(c: any, u: any): any;
            chat(c: any, u: any, h: any): void;
            containerUpdateTransform(): void;
            createBird(c: any): void;
            createCactus(c: any): void;
            createCat(c: any, u: any): void;
            createDog(c: any): void;
            createFox(c: any): void;
            createHealthBar(c: any): any;
            createLizard(c: any): void;
            createPanda(c: any): void;
            createPenguin(c: any): void;
            createReindeer(c: any): void;
            createRodent(c: any): void;
            createSheep(c: any): void;
            createSnowman(c: any): void;
            createSparkleCat(c: any, u: any): void;
            createSparkleDog(c: any): void;
            createSparkleRodent(c: any): void;
            createTurtle(c: any, u: any): void;
            damaged(): void;
            defeated(): void;
            destroy(): void;
            disableTempParent(t: any): void;
            displayDamage(c: any, u: any, h: any, a: any): void;
            displayHeal(c: any, u: any): void;
            displayObjectUpdateTransform(): void;
            doBarrierAnimation(): void;
            doBarrierBreakAnimation(): void;
            doPuppetBreakAnimation(c: any): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            emote(c: any, u: any, h: any): any;
            enableLocomotion(c: any, u: any): void;
            enableTempParent(): any;
            endChat(): void;
            eventNames(): any;
            faceToward(c: any): void;
            flip(): void;
            float(c: any): void;
            getAt(c: any): any;
            getBounds(t: any, e: any): any;
            getByName(c: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getHitboxHeight(): any;
            getHitboxLeft(): any;
            getHitboxTop(): any;
            getHitboxWidth(): any;
            getIndex(c: any): any;
            getInjectedValue(c: any): any;
            getLocalBounds(e: any, r: any): any;
            getPosition(): any;
            getSource(): any;
            getTargetingOffset(): any;
            hasTooltip(): any;
            hideName(): void;
            highlight(c: any, u: any, h: any, a: any): void;
            hop(c: any, u: any, h: any, a: any): void;
            initListeners(): void;
            isDefeated(): any;
            isFacingLeft(): any;
            isHighlighted(): any;
            isMoving(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadPrefabs(): any;
            lockOpponentSpell(): void;
            moonwalk(): void;
            moveDown(c: any): any;
            moveUp(c: any): any;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onCreatureLevelUp(c: any, u: any): void;
            onFxAnimationDone(): void;
            onStarsAdded(): void;
            pathTo(c: any): void;
            patrol(c: any, u: any): void;
            play(c: any, u: any): void;
            playAll(c: any): void;
            reload(c: any): void;
            remove(c: any, u: any): any;
            removeAll(c: any): void;
            removeAllListeners(t: any): any;
            removeBetween(c: any, u: any, h: any, a: any): void;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            retreat(c: any): void;
            sendChildToBack(c: any): void;
            sendNpcClickedEvent(): void;
            setChildIndex(t: any, e: any): void;
            setElementAsModal(c: any): void;
            setHitbox(c: any): void;
            setNewTarget(c: any, u: any): void;
            setParent(t: any): any;
            setPath(c: any, u: any, h: any): void;
            setRenderState(c: any, u: any): void;
            setSpriteDefaults(c: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            setup(c: any, u: any): any;
            setupStand(c: any): void;
            setupWalk(c: any): void;
            setValidPath(c: any, u: any, h: any, a: any, f: any): void;
            shouldPlayRetreatOnDefeat(): any;
            showChat(c: any): void;
            showName(c: any): void;
            showTooltip(c: any, u: any): void;
            sortChildren(): void;
            stand(): void;
            startChat(c: any): void;
            startLoad(): void;
            stopAllAnimations(): void;
            stopAnimation(c: any): void;
            stopListeners(): void;
            stopMoveTween(): void;
            stopMoving(): void;
            stopTweens(): void;
            swap(c: any, u: any): void;
            swapChildren(t: any, e: any): void;
            switchOpponent(c: any): void;
            targetStopped(): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateTransform(): void;
            updateZ(): void;
            walk(): void;
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _game: Player["_playerContainer"]["_game"];
            _localBounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _onLoad: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _trackedPointers: {};
            $: Player["_playerContainer"]["$"];
            anchor: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            assets: string[];
            body: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _roundPixels: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                inputEnabled: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isLoaded: boolean;
                isMask: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                roundPixels: boolean;
                smoothed: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _cachedTint: number;
                _eventsCount: number;
                _height: number;
                _lastSortedIndex: number;
                _textureID: number;
                _textureTrimmedID: number;
                _tint: number;
                _tintRGB: number;
                _transformID: number;
                _transformTrimmedID: number;
                _width: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                blendMode: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                tint: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                frameName: string;
                key: string;
                pluginName: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                loadingTween: null;
                mask: null;
                name: null;
                scaleMax: null;
                scaleMin: null;
                transformCallbackContext: null;
                vertexTrimmedData: null;
                forcedHeight: undefined;
                forcedWidth: undefined;
                frame: undefined;
                onTextureLoaded: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _onAnchorUpdate(): void;
                _onTextureUpdate(): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(c: any): void;
                calculateBounds(): void;
                calculateTrimmedVertices(): any;
                calculateVertices(): void;
                checkCallback(): void;
                checkSpriteDimension(): void;
                containerUpdateTransform(): void;
                containsPoint(t: any): any;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                getOffsetX(): any;
                getOffsetY(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                loadNewTexture(c: any, u: any, h: any, a: any): void;
                loadTexture(c: any, u: any): void;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                rotateMiddleBased(c: any): void;
                sendChildToBack(c: any): void;
                setActive(c: any): void;
                setChildIndex(t: any, e: any): void;
                setFrame(c: any): void;
                setParent(t: any): any;
                setTexture(c: any, u: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateFrame(u: any): void;
                updateTexture(c: any): void;
                updateTransform(): void;
                indices: Uint16Array;
                uvs: Float32Array;
                vertexData: Float32Array;
                _anchor: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["follow"]["body"];
                };
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _texture: {
                    noFrame: boolean;
                    valid: boolean;
                    _eventsCount: number;
                    _rotate: number;
                    _updateID: number;
                    height: number;
                    resolution: number;
                    rotate: number;
                    width: number;
                    trim: null;
                    uvMatrix: null;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    clone(): any;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    onBaseTextureUpdated(t: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    update(): void;
                    updateUvs(): void;
                    _events: {};
                    _frame: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    _uvs: {
                        x0: number;
                        x1: number;
                        x2: number;
                        x3: number;
                        y0: number;
                        y1: number;
                        y2: number;
                        y3: number;
                        set(t: any, e: any, r: any): void;
                        uvsFloat32: Float32Array;
                    };
                    baseTexture: {
                        destroyed: boolean;
                        isPowerOfTwo: boolean;
                        valid: boolean;
                        _batchEnabled: number;
                        _batchLocation: number;
                        _eventsCount: number;
                        _mipmap: number;
                        _scaleMode: number;
                        _wrapMode: number;
                        alphaMode: number;
                        anisotropicLevel: number;
                        dirtyId: number;
                        dirtyStyleId: number;
                        format: number;
                        height: number;
                        mipmap: number;
                        realHeight: number;
                        realWidth: number;
                        resolution: number;
                        scaleMode: number;
                        target: number;
                        touched: number;
                        type: number;
                        uid: number;
                        width: number;
                        wrapMode: number;
                        cacheId: null;
                        parentTextureArray: null;
                        _refreshPOT(): void;
                        addListener(t: any, e: any, r: any): any;
                        castToBaseTexture(): any;
                        destroy(): void;
                        dispose(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        eventNames(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onError(t: any): void;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setRealSize(t: any, e: any, r: any): any;
                        setResolution(t: any): any;
                        setResource(t: any): any;
                        setSize(t: any, e: any, r: any): any;
                        setStyle(t: any, e: any): any;
                        update(): void;
                        _events: {
                            dispose: any /* too deep */;
                            update: any /* too deep */;
                        };
                        _glTextures: {
                            "1": any /* too deep */;
                        };
                        resource: {
                            createBitmap: boolean;
                            destroyed: boolean;
                            internal: boolean;
                            noSubImage: boolean;
                            preserveBitmap: boolean;
                            valid: boolean;
                            _height: number;
                            _width: number;
                            height: number;
                            width: number;
                            url: string;
                            _process: null;
                            alphaMode: null;
                            bitmap: null;
                            bind(t: any): void;
                            destroy(): void;
                            dispose(): void;
                            load(t: any): any;
                            process(): any;
                            resize(t: any, e: any): void;
                            style(t: any, e: any, r: any): any;
                            unbind(t: any): void;
                            update(): void;
                            upload(t: any, r: any, i: any): any;
                            _load: Promise<any>;
                            source: HTMLImageElement;
                            onError: any /* too deep */;
                            onResize: any /* too deep */;
                            onUpdate: any /* too deep */;
                        };
                        textureCacheIds: never[];
                    };
                    defaultAnchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    frame: Player["_playerContainer"]["follow"]["body"]["_texture"]["_frame"];
                    orig: Player["_playerContainer"]["follow"]["body"]["_texture"]["_frame"];
                    textureCacheIds: never[];
                };
                _trackedPointers: {};
                anchor: Player["_playerContainer"]["follow"]["body"]["_anchor"];
                animations: {
                    isLoaded: boolean;
                    updateIfVisible: boolean;
                    frame: number;
                    frameTotal: number;
                    frameName: string;
                    name: null;
                    add(c: any, u: any, h: any, a: any, l: any): any;
                    addIfFound(c: any, u: any, h: any, a: any): any;
                    copyFrameData(c: any, u: any): any;
                    destroy(): void;
                    getAnimation(c: any): any;
                    loadFrameData(c: any, u: any): any;
                    next(c: any): void;
                    onFrameLoaded(c: any): void;
                    play(c: any, u: any, h: any): any;
                    previous(c: any): void;
                    stop(c: any, u: any): void;
                    update(): any;
                    validateFrames(c: any, u: any): any;
                    _animations: Map<never, never>;
                    _frameData: {
                        _destroyed: boolean;
                        destroyed: boolean;
                        total: number;
                        addFrame(c: any): any;
                        checkFrameName(c: any): any;
                        clone(): any;
                        destroy(): void;
                        getFrame(c: any): any;
                        getFrameByName(c: any): any;
                        getFrameIndexes(c: any, u: any, h: any): any;
                        getFrameRange(c: any, u: any, h: any): any;
                        getFrames(c: any, u: any, h: any): any;
                        _frameNames: Map<never, never>;
                        _frames: any /* too deep */[];
                    };
                    _onLoaded: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    currentFrame: {
                        bottom: number;
                        centerX: number;
                        centerY: number;
                        distance: number;
                        height: number;
                        index: number;
                        left: number;
                        right: number;
                        sourceSizeH: number;
                        sourceSizeW: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        name: string;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        getRect(c: any): any;
                        pad(t: any, e: any): any;
                        resize(c: any, u: any): void;
                        setTrim(c: any, u: any, h: any, a: any, f: any, l: any, b: any): void;
                    };
                    frameData: Player["_playerContainer"]["follow"]["body"]["animations"]["_frameData"];
                    onLoaded: Player["_playerContainer"]["follow"]["body"]["animations"]["_onLoaded"];
                    sprite: Player["_playerContainer"]["follow"]["body"];
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                cameraOffset: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                children: never[];
                events: {
                    destroy(): void;
                    onAddedToGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationComplete: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationLoop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragUpdate: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onEnterBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputDown: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOut: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOver: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputUp: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onOutOfBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromWorld: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: Player["_playerContainer"]["follow"]["body"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                parent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _isModalWithTransparency: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    exists: boolean;
                    fixedToCamera: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isModalWithTransparency: boolean;
                    isSprite: boolean;
                    pendingDestroy: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    bottom: number;
                    cacheAsBitmapMultisample: number;
                    centerX: number;
                    centerY: number;
                    height: number;
                    left: number;
                    length: number;
                    offsetX: number;
                    offsetY: number;
                    renderId: number;
                    right: number;
                    rotation: number;
                    tabIndex: number;
                    top: number;
                    width: number;
                    worldAlpha: number;
                    worldRotation: number;
                    x: number;
                    y: number;
                    z: number;
                    zIndex: number;
                    _sortProperty: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    name: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    add(c: any, u: any): any;
                    addAt(c: any, u: any): any;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    bringChildToTop(c: any): void;
                    calculateBounds(): void;
                    callAll(c: any, u: any): void;
                    callbackFromArray(c: any, u: any): any;
                    containerUpdateTransform(): void;
                    destroy(u: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getAt(c: any): any;
                    getBounds(t: any, e: any): any;
                    getByName(c: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getIndex(c: any): any;
                    getInjectedValue(c: any): any;
                    getLocalBounds(e: any, r: any): any;
                    hasTooltip(): any;
                    highlight(c: any, u: any, h: any, a: any): void;
                    isHighlighted(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    moveDown(c: any): any;
                    moveUp(c: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    remove(c: any, u: any): any;
                    removeAll(c: any): void;
                    removeAllListeners(t: any): any;
                    removeBetween(c: any, u: any, h: any, a: any): void;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    sendChildToBack(c: any): void;
                    setChildIndex(t: any, e: any): void;
                    setElementAsModal(c: any): void;
                    setParent(t: any): any;
                    setRenderState(c: any, u: any): void;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    showTooltip(c: any, u: any): void;
                    sortChildren(): void;
                    swap(c: any, u: any): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    update(): void;
                    updateTransform(): void;
                    updateZ(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _game: Player["_playerContainer"]["_game"];
                    _localBounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _localBoundsRect: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["body"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["follow"]["body"]["parent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["body"]["parent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["body"]["parent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["body"]["parent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["follow"]["body"]["parent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["body"]["parent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    anchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    bounds: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    children: (any /* too deep */ | Player["_playerContainer"]["follow"]["body"])[];
                    events: {
                        destroy(): void;
                        onAddedToGroup: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onAnimationComplete: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onAnimationLoop: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onAnimationStart: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDragStart: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDragStop: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onDragUpdate: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onEnterBounds: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onInputDown: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onInputOut: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onInputOver: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onInputUp: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onOutOfBounds: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onRemovedFromGroup: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        onRemovedFromWorld: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["follow"]["body"]["parent"];
                    };
                    game: Player["_playerContainer"]["_game"];
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        _isModalWithTransparency: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isModalWithTransparency: boolean;
                        isSprite: boolean;
                        pendingDestroy: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        bottom: number;
                        cacheAsBitmapMultisample: number;
                        centerX: number;
                        centerY: number;
                        height: number;
                        left: number;
                        length: number;
                        offsetX: number;
                        offsetY: number;
                        renderId: number;
                        right: number;
                        rotation: number;
                        tabIndex: number;
                        top: number;
                        width: number;
                        worldAlpha: number;
                        worldRotation: number;
                        x: number;
                        y: number;
                        z: number;
                        zIndex: number;
                        _sortProperty: string;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        add(c: any, u: any): any;
                        addAt(c: any, u: any): any;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        bringChildToTop(c: any): void;
                        calculateBounds(): void;
                        callAll(c: any, u: any): void;
                        callbackFromArray(c: any, u: any): any;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getAt(c: any): any;
                        getBounds(t: any, e: any): any;
                        getByName(c: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getIndex(c: any): any;
                        getInjectedValue(c: any): any;
                        getLocalBounds(e: any, r: any): any;
                        hasTooltip(): any;
                        highlight(c: any, u: any, h: any, a: any): void;
                        isHighlighted(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        moveDown(c: any): any;
                        moveUp(c: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        remove(c: any, u: any): any;
                        removeAll(c: any): void;
                        removeAllListeners(t: any): any;
                        removeBetween(c: any, u: any, h: any, a: any): void;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        sendChildToBack(c: any): void;
                        setChildIndex(t: any, e: any): void;
                        setElementAsModal(c: any): void;
                        setParent(t: any): any;
                        setRenderState(c: any, u: any): void;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        showTooltip(c: any, u: any): void;
                        sortChildren(): void;
                        swap(c: any, u: any): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        updateZ(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _game: Player["_playerContainer"]["_game"];
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        anchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        bounds: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        children: Player["_playerContainer"]["follow"]["body"]["parent"][];
                        events: {
                            destroy(): void;
                            onAddedToGroup: any /* too deep */;
                            onAnimationComplete: any /* too deep */;
                            onAnimationLoop: any /* too deep */;
                            onAnimationStart: any /* too deep */;
                            onDestroy: any /* too deep */;
                            onDragStart: any /* too deep */;
                            onDragStop: any /* too deep */;
                            onDragUpdate: any /* too deep */;
                            onEnterBounds: any /* too deep */;
                            onInputDown: any /* too deep */;
                            onInputOut: any /* too deep */;
                            onInputOver: any /* too deep */;
                            onInputUp: any /* too deep */;
                            onOutOfBounds: any /* too deep */;
                            onRemovedFromGroup: any /* too deep */;
                            onRemovedFromWorld: any /* too deep */;
                            parent: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"];
                        };
                        game: Player["_playerContainer"]["_game"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"]["follow"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"]["position"];
                            scale: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        world: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldGamePosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldPosition: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        worldScale: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"]["scale"];
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["body"]["parent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["body"]["parent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["body"]["parent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["body"]["parent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["body"]["parent"]["pivot"]["scope"];
                    };
                    stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                    tempDisplayObjectParent: Player["_playerContainer"]["follow"]["body"]["parent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["follow"]["body"]["parent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["follow"]["body"]["parent"]["pivot"]["scope"];
                    world: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    worldGamePosition: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    worldPosition: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    worldScale: Player["_playerContainer"]["follow"]["body"]["parent"]["scale"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["follow"]["body"]["localTransform"];
                        pivot: Player["_playerContainer"]["follow"]["body"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"]["position"];
                previousPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                scale: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"]["skew"];
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                tempDisplayObjectParent: Player["_playerContainer"]["follow"]["body"]["_tempDisplayObjectParent"];
                texture: Player["_playerContainer"]["follow"]["body"]["_texture"];
                trackedPointers: Player["_playerContainer"]["follow"]["body"]["_trackedPointers"];
                transform: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"];
                transformCallback: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"]["scale"];
                worldTransform: Player["_playerContainer"]["follow"]["body"]["pivot"]["scope"]["worldTransform"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            chatText: {
                _isCreated: boolean;
                Active: boolean;
                isActive: boolean;
                IsActiveInHierarchy: boolean;
                isCreated: boolean;
                alignment: number;
                Alignment: number;
                BlendMode: number;
                FontSize: number;
                FontStyle: number;
                LineSpacing: number;
                ShadowAlpha: number;
                ShadowAngle: number;
                ShadowBlur: number;
                ShadowDistance: number;
                StrokeThickness: number;
                TextHeight: number;
                TextWidth: number;
                FillColor: string;
                Font: string;
                ShadowColor: string;
                StrokeColor: string;
                TextConfig: undefined;
                create(): any;
                customDeserialize(c: any): void;
                destroy(): void;
                firstUpdate(): void;
                getInjectedValue(c: any): any;
                isValidColor(c: any): any;
                onDisable(): void;
                onEnable(): void;
                postCreate(): void;
                postDeserialize(): void;
                preDeserialize(c: any): void;
                setText(c: any): void;
                update(): void;
                updateAlignment(): void;
                updateFunction(): void;
                updateText(): void;
                gameObject: {
                    _destroyed: boolean;
                    _isActive: boolean;
                    _isActiveInHierarchy: boolean;
                    active: boolean;
                    activeInHierarchy: boolean;
                    isDestroyed: boolean;
                    _name: string;
                    layer: string;
                    name: string;
                    _parent: null;
                    _transform: null;
                    parent: null;
                    transform: null;
                    activeInHierarchyChanged(): void;
                    addChild(c: any): void;
                    addChildAt(c: any, u: any): void;
                    addComponent(c: any, u: any): any;
                    bringToFront(): void;
                    destroy(): void;
                    destroyDeferred(): void;
                    dispatchComponentAddedInHierarchy(c: any, u: any): void;
                    findChildByName(c: any): any;
                    findComponent(c: any): any;
                    findComponentInChildren(c: any, u: any): any;
                    findComponentInParent(c: any, u: any): any;
                    findComponents(c: any): any;
                    findComponentsInChildren(c: any, u: any): any;
                    firstUpdate(): void;
                    getRenderOrder(): any;
                    hasComponent(c: any): any;
                    isActiveInHierarchy(): any;
                    isInBack(): any;
                    isInFront(): any;
                    removeComponent(c: any): void;
                    removeFromParent(): any;
                    sendToBack(): void;
                    setLayer(c: any, u: any): void;
                    setParent(c: any, u: any): any;
                    setRenderOrder(c: any): void;
                    update(): void;
                    updateFunction(): void;
                    _children: never[];
                    _components: (any /* too deep */ | Player["_playerContainer"]["follow"]["chatText"])[];
                    _legacyTransform: {
                        _isCreated: boolean;
                        Active: boolean;
                        isActive: boolean;
                        IsActiveInHierarchy: boolean;
                        isCreated: boolean;
                        roundRelativeValues: boolean;
                        RoundRelativeValues: boolean;
                        anchorX: number;
                        anchorY: number;
                        height: number;
                        relativeHeight: number;
                        relativeWidth: number;
                        relativeX: number;
                        relativeY: number;
                        roundedHeight: number;
                        roundedWidth: number;
                        roundedX: number;
                        roundedY: number;
                        scaleX: number;
                        scaleY: number;
                        width: number;
                        x: number;
                        y: number;
                        cachedRelativeHeight: null;
                        cachedRelativeWidth: null;
                        cachedRelativeX: null;
                        cachedRelativeY: null;
                        dimensionPlaceholder: null;
                        create(): void;
                        customDeserialize(u: any): void;
                        destroy(): void;
                        firstUpdate(): void;
                        getInjectedValue(c: any): any;
                        onDisable(): void;
                        onEnable(): void;
                        postCreate(): void;
                        postDeserialize(): void;
                        preDeserialize(c: any): void;
                        reapplyChildRelativeValues(): void;
                        update(): void;
                        updateFunction(): void;
                        updateGroupVisibility(): void;
                        updateParentGroup(): void;
                        updatePivotXFromAnchorX(): void;
                        updatePivotYFromAnchorY(): void;
                        _group: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            height: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            width: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            name: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            calculateBounds(): void;
                            containerUpdateTransform(): void;
                            destroy(u: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(e: any, r: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            setChildIndex(t: any, e: any): void;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _localBounds: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            children: any /* too deep */;
                            gameObjectRef: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                            localTransform: any /* too deep */;
                            onDestroy: any /* too deep */;
                            parent: Player["_playerContainer"]["follow"];
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        anchor: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        gameObject: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                        GameObject: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                        group: Player["_playerContainer"]["follow"]["chatText"]["gameObject"]["_legacyTransform"]["_group"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        OnActiveChanged: Player["_playerContainer"]["follow"]["chatText"]["gameObject"]["_legacyTransform"]["onActiveChanged"];
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        OnDestroy: Player["_playerContainer"]["follow"]["chatText"]["gameObject"]["_legacyTransform"]["onDestroy"];
                    };
                    children: Player["_playerContainer"]["follow"]["chatText"]["gameObject"]["_children"];
                    components: Player["_playerContainer"]["follow"]["chatText"]["gameObject"]["_components"];
                    legacyTransform: Player["_playerContainer"]["follow"]["chatText"]["gameObject"]["_legacyTransform"];
                    onActiveChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onActiveInHierarchyChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    onChildAdded: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onChildRemoved: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onComponentAdded: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onComponentAddedToHierarchy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onComponentRemoved: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    onHierarchyChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    onLayerChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                };
                GameObject: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                OnActiveChanged: Player["_playerContainer"]["follow"]["chatText"]["onActiveChanged"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                OnDestroy: Player["_playerContainer"]["follow"]["chatText"]["onDestroy"];
                Source: {
                    source: string;
                    cleanUp(): void;
                    getText(): any;
                    setText(c: any): void;
                    onTextChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    OnTextChanged: Player["_playerContainer"]["follow"]["chatText"]["Source"]["onTextChanged"];
                };
                textObject: {
                    _isCreated: boolean;
                    _underline: boolean;
                    Active: boolean;
                    isActive: boolean;
                    IsActiveInHierarchy: boolean;
                    isCreated: boolean;
                    resizeRectTransform: boolean;
                    underline: boolean;
                    wordWrap: boolean;
                    _paddingX: number;
                    _paddingY: number;
                    blendMode: number;
                    dropShadowAlpha: number;
                    dropShadowAngle: number;
                    dropShadowBlur: number;
                    dropShadowDistance: number;
                    fontSize: number;
                    lineSpacing: number;
                    paddingX: number;
                    paddingY: number;
                    strokeThickness: number;
                    tint: number;
                    wordWrapWidth: number;
                    _boundsAlignH: string;
                    _boundsAlignV: string;
                    align: string;
                    boundsAlignH: string;
                    boundsAlignV: string;
                    dropShadowColor: string;
                    fill: string;
                    font: string;
                    fontStyle: string;
                    fontWeight: string;
                    stroke: string;
                    text: string;
                    _filter: null;
                    _parentRenderComponent: null;
                    _underlineEndIndex: null;
                    _underlineStartIndex: null;
                    underlineEndIndex: null;
                    underlineStartIndex: null;
                    applyScalingToTransform(c: any, u: any, h: any): void;
                    applyTextPivot(): void;
                    applyToMatrix(c: any, u: any): void;
                    attachRootContainer(): void;
                    attachRootToCurrentLayer(): void;
                    attachRootToRenderComponentParent(): void;
                    buildRenderComponentOrder(c: any): any;
                    clearListeners(): void;
                    clearParentRenderComponent(): void;
                    componentAddedToHierarchy(c: any, u: any): void;
                    create(): any;
                    createPixiTransformOverride(): any;
                    createTextObject(): void;
                    customDeserialize(c: any): void;
                    destroy(): void;
                    drawUnderline(c: any, u: any): void;
                    findChildIndex(): any;
                    firstUpdate(): void;
                    gameObjectHierarchyChanged(): void;
                    getDimensions(): any;
                    getInjectedValue(c: any): any;
                    getOverriddenTransform(): any;
                    getParentContainer(): any;
                    getRootContainer(): any;
                    isValidColor(c: any): any;
                    onDisable(): void;
                    onEnable(): void;
                    onLegacyTransformDestroyed(): void;
                    onOverrideTransformDestroyed(): void;
                    onParentRenderComponentDestroyed(): void;
                    onRenderComponentContainerWasSet(): void;
                    overridePIXIUpdateFunction(): void;
                    postCreate(): void;
                    postDeserialize(): void;
                    preDeserialize(c: any): void;
                    resetPIXIUpdateFunction(): void;
                    resizeRectTransformUponTextChange(): void;
                    setFilter(c: any): void;
                    setRootContainer(c: any): void;
                    setUpDisplayObject(c: any): void;
                    trackTransformAddingToOverride(c: any): void;
                    update(): void;
                    updateFunction(): void;
                    updateText(): void;
                    updateTextSize(): void;
                    updateVisibility(): void;
                    _rootContainer: {
                        _accessibleActive: boolean;
                        _autoResolution: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        _ownCanvas: boolean;
                        _roundPixels: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        dirty: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        roundPixels: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _cachedTint: number;
                        _eventsCount: number;
                        _height: number;
                        _lastSortedIndex: number;
                        _resolution: number;
                        _textureID: number;
                        _textureTrimmedID: number;
                        _tint: number;
                        _tintRGB: number;
                        _transformID: number;
                        _transformTrimmedID: number;
                        _width: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        blendMode: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        localStyleID: number;
                        renderId: number;
                        resolution: number;
                        rotation: number;
                        tabIndex: number;
                        tint: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        _font: string;
                        _text: string;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        pluginName: string;
                        text: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        _styleListener: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        vertexTrimmedData: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _generateFillStyle(e: any, r: any, i: any): any;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _onAnchorUpdate(): void;
                        _onTextureUpdate(): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        calculateTrimmedVertices(): any;
                        calculateVertices(): void;
                        containerUpdateTransform(): void;
                        containsPoint(t: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        drawLetterSpacing(t: any, e: any, r: any, i: any): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateText(t: any): void;
                        updateTexture(): void;
                        updateTransform(): void;
                        canvas: HTMLCanvasElement;
                        context: CanvasRenderingContext2D;
                        indices: Uint16Array;
                        uvs: Float32Array;
                        vertexData: Float32Array;
                        _anchor: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"];
                        };
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _style: {
                            _breakWords: boolean;
                            _dropShadow: boolean;
                            _trim: boolean;
                            _wordWrap: boolean;
                            breakWords: boolean;
                            dropShadow: boolean;
                            trim: boolean;
                            wordWrap: boolean;
                            _dropShadowAlpha: number;
                            _dropShadowAngle: number;
                            _dropShadowBlur: number;
                            _dropShadowDistance: number;
                            _fillGradientType: number;
                            _fontSize: number;
                            _leading: number;
                            _letterSpacing: number;
                            _lineHeight: number;
                            _miterLimit: number;
                            _padding: number;
                            _strokeThickness: number;
                            _wordWrapWidth: number;
                            dropShadowAlpha: number;
                            dropShadowAngle: number;
                            dropShadowBlur: number;
                            dropShadowDistance: number;
                            fillGradientType: number;
                            fontSize: number;
                            leading: number;
                            letterSpacing: number;
                            lineHeight: number;
                            miterLimit: number;
                            padding: number;
                            strokeThickness: number;
                            styleID: number;
                            wordWrapWidth: number;
                            _align: string;
                            _dropShadowColor: string;
                            _fill: string;
                            _fontFamily: string;
                            _fontStyle: string;
                            _fontVariant: string;
                            _fontWeight: string;
                            _lineJoin: string;
                            _stroke: string;
                            _textBaseline: string;
                            _whiteSpace: string;
                            align: string;
                            dropShadowColor: string;
                            fill: string;
                            fontFamily: string;
                            fontStyle: string;
                            fontVariant: string;
                            fontWeight: string;
                            lineJoin: string;
                            stroke: string;
                            textBaseline: string;
                            whiteSpace: string;
                            clone(): any;
                            reset(): void;
                            toFontString(): any;
                            _fillGradientStops: any /* too deep */;
                            fillGradientStops: any /* too deep */;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _texture: {
                            noFrame: boolean;
                            valid: boolean;
                            _eventsCount: number;
                            _rotate: number;
                            _updateID: number;
                            height: number;
                            resolution: number;
                            rotate: number;
                            width: number;
                            uvMatrix: null;
                            addListener(t: any, e: any, r: any): any;
                            castToBaseTexture(): any;
                            clone(): any;
                            destroy(t: any): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            eventNames(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            onBaseTextureUpdated(t: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            update(): void;
                            updateUvs(): void;
                            _events: any /* too deep */;
                            _frame: any /* too deep */;
                            _uvs: any /* too deep */;
                            baseTexture: any /* too deep */;
                            defaultAnchor: any /* too deep */;
                            frame: any /* too deep */;
                            orig: any /* too deep */;
                            textureCacheIds: any /* too deep */;
                            trim: any /* too deep */;
                        };
                        _trackedPointers: {};
                        anchor: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["_anchor"];
                        children: never[];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        parent: Player["_playerContainer"]["follow"]["chatText"]["gameObject"]["_legacyTransform"]["_group"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        style: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["_style"];
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"];
                        texture: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["_texture"];
                        trackedPointers: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["position"];
                            scale: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _textBounds: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    _textSize: {
                        _halfHeight: number;
                        _halfWidth: number;
                        _height: number;
                        _width: number;
                        height: number;
                        width: number;
                        copyFrom(c: any): void;
                        getHalfHeight(): any;
                        getHalfWidth(): any;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        setTo(c: any, u: any): void;
                    };
                    _underlines: never[];
                    gameObject: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                    GameObject: Player["_playerContainer"]["follow"]["chatText"]["gameObject"];
                    onActiveChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    OnActiveChanged: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["onActiveChanged"];
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    OnDestroy: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["onDestroy"];
                    onRootContainerSet: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    Source: {
                        source: string;
                        cleanUp(): void;
                        getText(): any;
                        setText(c: any): void;
                        onTextChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        OnTextChanged: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["Source"]["onTextChanged"];
                    };
                    textObject: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"];
                    TextObject: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["_rootContainer"];
                    textSource: Player["_playerContainer"]["follow"]["chatText"]["textObject"]["Source"];
                };
                TextObject: Player["_playerContainer"]["follow"]["chatText"]["textObject"];
                textSource: Player["_playerContainer"]["follow"]["chatText"]["Source"];
            };
            children: (Player["_playerContainer"]["follow"]["body"]["parent"]["parent"] | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isModalWithTransparency: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isModalWithTransparency: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; add(c: any, u: any): any; addAt(c: any, u: any): any; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; callAll(c: any, u: any): void; callbackFromArray(c: any, u: any): any; containerUpdateTransform(): void; destroy(u: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getAt(c: any): any; getBounds(t: any, e: any): any; getByName(c: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getIndex(c: any): any; getInjectedValue(c: any): any; getLocalBounds(e: any, r: any): any; hasTooltip(): any; highlight(c: any, u: any, h: any, a: any): void; isHighlighted(): any; listenerCount(t: any): any; listeners(t: any): any; moveDown(c: any): any; moveUp(c: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; remove(c: any, u: any): any; removeAll(c: any): void; removeAllListeners(t: any): any; removeBetween(c: any, u: any, h: any, a: any): void; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; sendChildToBack(c: any): void; setChildIndex(t: any, e: any): void; setElementAsModal(c: any): void; setParent(t: any): any; setRenderState(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; showTooltip(c: any, u: any): void; sortChildren(): void; swap(c: any, u: any): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _game: Player["_playerContainer"]["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: any, e: any): any; clone(): any; contains(t: any, e: any): any; copyFrom(t: any): any; copyTo(t: any): any; enlarge(t: any): any; fit(t: any): any; pad(t: any, e: any): any; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: any, e: any): any; clone(): any; contains(t: any, e: any): any; copyFrom(t: any): any; copyTo(t: any): any; enlarge(t: any): any; fit(t: any): any; pad(t: any, e: any): any; }; children: never[]; events: { destroy(): void; onAddedToGroup: any /* too deep */; onAnimationComplete: any /* too deep */; onAnimationLoop: any /* too deep */; onAnimationStart: any /* too deep */; onDestroy: any /* too deep */; onDragStart: any /* too deep */; onDragStop: any /* too deep */; onDragUpdate: any /* too deep */; onEnterBounds: any /* too deep */; onInputDown: any /* too deep */; onInputOut: any /* too deep */; onInputOver: any /* too deep */; onInputUp: any /* too deep */; onOutOfBounds: any /* too deep */; onRemovedFromGroup: any /* too deep */; onRemovedFromWorld: any /* too deep */; parent: any /* too deep */; }; game: Player["_playerContainer"]["_game"]; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"]; onDestroy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; parent: Player["_playerContainer"]["follow"]; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; world: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldGamePosition: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldPosition: { x: number; y: number; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; } | { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; height: number; renderId: number; rotation: number; tabIndex: number; width: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; calculateBounds(): void; containerUpdateTransform(): void; destroy(u: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(e: any, r: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; setChildIndex(t: any, e: any): void; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _events: {}; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: any): void; addBoundsArea(t: any, e: any): void; addBoundsMask(t: any, e: any): void; addBoundsMatrix(t: any, e: any): void; addFrame(t: any, e: any, r: any, i: any, n: any): void; addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void; addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void; addPoint(t: any): void; addPointMatrix(t: any, e: any): void; addQuad(t: any): void; addVertexData(t: any, e: any, r: any): void; addVertices(t: any, e: any, r: any, i: any): void; addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void; clear(): void; getRectangle(t: any): any; isEmpty(): any; pad(t: any, e: any): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: any, e: any): any; clone(): any; contains(t: any, e: any): any; copyFrom(t: any): any; copyTo(t: any): any; enlarge(t: any): any; fit(t: any): any; pad(t: any, e: any): any; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; _trackedPointers: {}; children: any /* too deep */[]; gameObjectRef: { _destroyed: boolean; _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; isDestroyed: boolean; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(c: any): void; addChildAt(c: any, u: any): void; addComponent(c: any, u: any): any; bringToFront(): void; destroy(): void; destroyDeferred(): void; dispatchComponentAddedInHierarchy(c: any, u: any): void; findChildByName(c: any): any; findComponent(c: any): any; findComponentInChildren(c: any, u: any): any; findComponentInParent(c: any, u: any): any; findComponents(c: any): any; findComponentsInChildren(c: any, u: any): any; firstUpdate(): void; getRenderOrder(): any; hasComponent(c: any): any; isActiveInHierarchy(): any; isInBack(): any; isInFront(): any; removeComponent(c: any): void; removeFromParent(): any; sendToBack(): void; setLayer(c: any, u: any): void; setParent(c: any, u: any): any; setRenderOrder(c: any): void; update(): void; updateFunction(): void; _children: any /* too deep */; _components: any /* too deep */; _legacyTransform: any /* too deep */; children: any /* too deep */; components: any /* too deep */; legacyTransform: any /* too deep */; onActiveChanged: any /* too deep */; onActiveInHierarchyChanged: any /* too deep */; onChildAdded: any /* too deep */; onChildRemoved: any /* too deep */; onComponentAdded: any /* too deep */; onComponentAddedToHierarchy: any /* too deep */; onComponentRemoved: any /* too deep */; onDestroy: any /* too deep */; onHierarchyChanged: any /* too deep */; onLayerChanged: any /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; onDestroy: { _shouldPropagate: boolean; active: boolean; add(c: any, u: any, h: any): any; addBinding(c: any, u: any, h: any, a: any, l: any): any; addOnce(c: any, u: any, h: any): any; dispatch(): void; dispose(): void; getBindingsCount(): any; halt(): void; has(c: any, u: any): any; indexOfListener(c: any, u: any): any; remove(c: any, u: any): void; removeAll(c: any): void; removeAtIndex(c: any): void; toString(): any; validateListener(c: any, u: any): void; _bindings: any /* too deep */; }; parent: Player["_playerContainer"]["follow"]; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: any, r: any): any; copyFrom(t: any): any; copyTo(t: any): any; equals(t: any): any; set(t: any, e: any): any; scope: any /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; cacheAsBitmapMultisample: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: any): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _recursivePostUpdateTransform(): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addListener(t: any, e: any, r: any): any; destroy(t: any): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; listenerCount(t: any): any; listeners(t: any): any; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; removeAllListeners(t: any): any; removeListener(t: any, e: any, i: any, n: any): any; setParent(t: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; updateTransform(): void; _bounds: any /* too deep */; _events: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _trackedPointers: any /* too deep */; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; tempDisplayObjectParent: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; worldTransform: any /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: any): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: any): void; localTransform: any /* too deep */; pivot: any /* too deep */; position: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; worldTransform: any /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: any): any; apply(t: any, e: any): any; applyInverse(t: any, e: any): any; clone(): any; copyFrom(t: any): any; copyTo(t: any): any; decompose(t: any): any; fromArray(t: any): void; identity(): any; invert(): any; prepend(t: any): any; rotate(t: any): any; scale(t: any, e: any): any; set(t: any, e: any, r: any, i: any, n: any, o: any): any; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; toArray(t: any, e: any): any; translate(t: any, e: any): any; }; } | Player["_playerContainer"]["follow"]["chatText"]["gameObject"]["_legacyTransform"]["_group"])[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["follow"];
            };
            followController: {
                lastTargetDistance: number;
                waitingToFollowDelay: number;
                queuedPath: null;
                getPointNearPathEnd(c: any, u: any, h: any): any;
                handleDestroy(): void;
                stop(): void;
                targetMoving(c: any): void;
                targetStopped(): void;
                update(): void;
                game: Player["_playerContainer"]["_game"];
                lastTargetPosition: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"];
                        };
                        position: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"];
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                source: Player["_playerContainer"]["follow"];
                target: Player["_playerContainer"];
            };
            game: Player["_playerContainer"]["_game"];
            indicatorE: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _isModalWithTransparency: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isModalWithTransparency: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                length: number;
                offsetX: number;
                offsetY: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                _sortProperty: string;
                accessiblePointerEvents: string;
                accessibleType: string;
                name: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                add(c: any, u: any): any;
                addAt(c: any, u: any): any;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(c: any): void;
                calculateBounds(): void;
                callAll(c: any, u: any): void;
                callbackFromArray(c: any, u: any): any;
                containerUpdateTransform(): void;
                destroy(u: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getAt(c: any): any;
                getBounds(t: any, e: any): any;
                getByName(c: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getIndex(c: any): any;
                getInjectedValue(c: any): any;
                getLocalBounds(e: any, r: any): any;
                hasTooltip(): any;
                highlight(c: any, u: any, h: any, a: any): void;
                isHighlighted(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                moveDown(c: any): any;
                moveUp(c: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                remove(c: any, u: any): any;
                removeAll(c: any): void;
                removeAllListeners(t: any): any;
                removeBetween(c: any, u: any, h: any, a: any): void;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                sendChildToBack(c: any): void;
                setChildIndex(t: any, e: any): void;
                setElementAsModal(c: any): void;
                setParent(t: any): any;
                setRenderState(c: any, u: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                showTooltip(c: any, u: any): void;
                sortChildren(): void;
                swap(c: any, u: any): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateTransform(): void;
                updateZ(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _game: Player["_playerContainer"]["_game"];
                _localBounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                anchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                children: never[];
                events: {
                    destroy(): void;
                    onAddedToGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationComplete: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationLoop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragUpdate: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onEnterBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputDown: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOut: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOver: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputUp: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onOutOfBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromWorld: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: Player["_playerContainer"]["follow"]["indicatorE"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["follow"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["follow"]["indicatorE"]["localTransform"];
                        pivot: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"]["skew"];
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                tempDisplayObjectParent: Player["_playerContainer"]["follow"]["indicatorE"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["follow"]["indicatorE"]["_trackedPointers"];
                transform: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"];
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldGamePosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"]["scale"];
                worldTransform: Player["_playerContainer"]["follow"]["indicatorE"]["pivot"]["scope"]["worldTransform"];
            };
            itemData: {
                member: number;
                price: number;
                rarity: number;
                flavorText: string;
                name: string;
                tag: string;
            };
            legs: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _roundPixels: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                inputEnabled: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isLoaded: boolean;
                isMask: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                roundPixels: boolean;
                smoothed: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _cachedTint: number;
                _eventsCount: number;
                _height: number;
                _lastSortedIndex: number;
                _textureID: number;
                _textureTrimmedID: number;
                _tint: number;
                _tintRGB: number;
                _transformID: number;
                _transformTrimmedID: number;
                _width: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                blendMode: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                tint: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                frameName: string;
                key: string;
                pluginName: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                loadingTween: null;
                mask: null;
                name: null;
                scaleMax: null;
                scaleMin: null;
                transformCallbackContext: null;
                uvs: null;
                vertexTrimmedData: null;
                forcedHeight: undefined;
                forcedWidth: undefined;
                frame: undefined;
                onTextureLoaded: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _onAnchorUpdate(): void;
                _onTextureUpdate(): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(c: any): void;
                calculateBounds(): void;
                calculateTrimmedVertices(): any;
                calculateVertices(): void;
                checkCallback(): void;
                checkSpriteDimension(): void;
                containerUpdateTransform(): void;
                containsPoint(t: any): any;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                getOffsetX(): any;
                getOffsetY(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                loadNewTexture(c: any, u: any, h: any, a: any): void;
                loadTexture(c: any, u: any): void;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                rotateMiddleBased(c: any): void;
                sendChildToBack(c: any): void;
                setActive(c: any): void;
                setChildIndex(t: any, e: any): void;
                setFrame(c: any): void;
                setParent(t: any): any;
                setTexture(c: any, u: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateFrame(u: any): void;
                updateTexture(c: any): void;
                updateTransform(): void;
                indices: Uint16Array;
                vertexData: Float32Array;
                _anchor: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["follow"]["legs"];
                };
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _texture: {
                    noFrame: boolean;
                    valid: boolean;
                    _eventsCount: number;
                    _rotate: number;
                    _updateID: number;
                    height: number;
                    resolution: number;
                    rotate: number;
                    width: number;
                    uvMatrix: null;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    clone(): any;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    onBaseTextureUpdated(t: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    update(): void;
                    updateUvs(): void;
                    _events: {};
                    _frame: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    _uvs: {
                        x0: number;
                        x1: number;
                        x2: number;
                        x3: number;
                        y0: number;
                        y1: number;
                        y2: number;
                        y3: number;
                        set(t: any, e: any, r: any): void;
                        uvsFloat32: Float32Array;
                    };
                    baseTexture: Player["_playerContainer"]["follow"]["body"]["_texture"]["baseTexture"];
                    defaultAnchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    frame: Player["_playerContainer"]["follow"]["legs"]["_texture"]["_frame"];
                    orig: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    textureCacheIds: never[];
                    trim: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                anchor: Player["_playerContainer"]["follow"]["legs"]["_anchor"];
                animations: {
                    isLoaded: boolean;
                    updateIfVisible: boolean;
                    frame: number;
                    frameTotal: number;
                    frameName: string;
                    name: null;
                    add(c: any, u: any, h: any, a: any, l: any): any;
                    addIfFound(c: any, u: any, h: any, a: any): any;
                    copyFrameData(c: any, u: any): any;
                    destroy(): void;
                    getAnimation(c: any): any;
                    loadFrameData(c: any, u: any): any;
                    next(c: any): void;
                    onFrameLoaded(c: any): void;
                    play(c: any, u: any, h: any): any;
                    previous(c: any): void;
                    stop(c: any, u: any): void;
                    update(): any;
                    validateFrames(c: any, u: any): any;
                    _animations: Map<never, never>;
                    _frameData: Player["_playerContainer"]["follow"]["body"]["animations"]["_frameData"];
                    _onLoaded: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    currentFrame: {
                        bottom: number;
                        centerX: number;
                        centerY: number;
                        distance: number;
                        height: number;
                        index: number;
                        left: number;
                        right: number;
                        sourceSizeH: number;
                        sourceSizeW: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        name: string;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        getRect(c: any): any;
                        pad(t: any, e: any): any;
                        resize(c: any, u: any): void;
                        setTrim(c: any, u: any, h: any, a: any, f: any, l: any, b: any): void;
                    };
                    frameData: Player["_playerContainer"]["follow"]["body"]["animations"]["_frameData"];
                    onLoaded: Player["_playerContainer"]["follow"]["legs"]["animations"]["_onLoaded"];
                    sprite: Player["_playerContainer"]["follow"]["legs"];
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                cameraOffset: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                children: never[];
                events: {
                    destroy(): void;
                    onAddedToGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationComplete: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationLoop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragUpdate: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onEnterBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputDown: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOut: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOver: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputUp: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onOutOfBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromWorld: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: Player["_playerContainer"]["follow"]["legs"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                parent: Player["_playerContainer"]["follow"]["body"]["parent"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["follow"]["legs"]["localTransform"];
                        pivot: Player["_playerContainer"]["follow"]["legs"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"]["position"];
                previousPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                scale: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"]["skew"];
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                tempDisplayObjectParent: Player["_playerContainer"]["follow"]["legs"]["_tempDisplayObjectParent"];
                texture: Player["_playerContainer"]["follow"]["legs"]["_texture"];
                trackedPointers: Player["_playerContainer"]["follow"]["legs"]["_trackedPointers"];
                transform: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"];
                transformCallback: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"]["scale"];
                worldTransform: Player["_playerContainer"]["follow"]["legs"]["pivot"]["scope"]["worldTransform"];
            };
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
            nameText: {
                _isCreated: boolean;
                Active: boolean;
                isActive: boolean;
                IsActiveInHierarchy: boolean;
                isCreated: boolean;
                alignment: number;
                Alignment: number;
                BlendMode: number;
                FontSize: number;
                FontStyle: number;
                LineSpacing: number;
                ShadowAlpha: number;
                ShadowAngle: number;
                ShadowBlur: number;
                ShadowDistance: number;
                StrokeThickness: number;
                TextHeight: number;
                TextWidth: number;
                FillColor: string;
                Font: string;
                ShadowColor: string;
                StrokeColor: string;
                TextConfig: undefined;
                create(): any;
                customDeserialize(c: any): void;
                destroy(): void;
                firstUpdate(): void;
                getInjectedValue(c: any): any;
                isValidColor(c: any): any;
                onDisable(): void;
                onEnable(): void;
                postCreate(): void;
                postDeserialize(): void;
                preDeserialize(c: any): void;
                setText(c: any): void;
                update(): void;
                updateAlignment(): void;
                updateFunction(): void;
                updateText(): void;
                gameObject: {
                    _destroyed: boolean;
                    _isActive: boolean;
                    _isActiveInHierarchy: boolean;
                    active: boolean;
                    activeInHierarchy: boolean;
                    isDestroyed: boolean;
                    _name: string;
                    layer: string;
                    name: string;
                    _parent: null;
                    _transform: null;
                    parent: null;
                    transform: null;
                    activeInHierarchyChanged(): void;
                    addChild(c: any): void;
                    addChildAt(c: any, u: any): void;
                    addComponent(c: any, u: any): any;
                    bringToFront(): void;
                    destroy(): void;
                    destroyDeferred(): void;
                    dispatchComponentAddedInHierarchy(c: any, u: any): void;
                    findChildByName(c: any): any;
                    findComponent(c: any): any;
                    findComponentInChildren(c: any, u: any): any;
                    findComponentInParent(c: any, u: any): any;
                    findComponents(c: any): any;
                    findComponentsInChildren(c: any, u: any): any;
                    firstUpdate(): void;
                    getRenderOrder(): any;
                    hasComponent(c: any): any;
                    isActiveInHierarchy(): any;
                    isInBack(): any;
                    isInFront(): any;
                    removeComponent(c: any): void;
                    removeFromParent(): any;
                    sendToBack(): void;
                    setLayer(c: any, u: any): void;
                    setParent(c: any, u: any): any;
                    setRenderOrder(c: any): void;
                    update(): void;
                    updateFunction(): void;
                    _children: never[];
                    _components: (any /* too deep */ | Player["_playerContainer"]["follow"]["nameText"])[];
                    _legacyTransform: {
                        _isCreated: boolean;
                        Active: boolean;
                        isActive: boolean;
                        IsActiveInHierarchy: boolean;
                        isCreated: boolean;
                        roundRelativeValues: boolean;
                        RoundRelativeValues: boolean;
                        anchorX: number;
                        anchorY: number;
                        height: number;
                        relativeHeight: number;
                        relativeWidth: number;
                        relativeX: number;
                        relativeY: number;
                        roundedHeight: number;
                        roundedWidth: number;
                        roundedX: number;
                        roundedY: number;
                        scaleX: number;
                        scaleY: number;
                        width: number;
                        x: number;
                        y: number;
                        cachedRelativeHeight: null;
                        cachedRelativeWidth: null;
                        cachedRelativeX: null;
                        cachedRelativeY: null;
                        dimensionPlaceholder: null;
                        create(): void;
                        customDeserialize(u: any): void;
                        destroy(): void;
                        firstUpdate(): void;
                        getInjectedValue(c: any): any;
                        onDisable(): void;
                        onEnable(): void;
                        postCreate(): void;
                        postDeserialize(): void;
                        preDeserialize(c: any): void;
                        reapplyChildRelativeValues(): void;
                        update(): void;
                        updateFunction(): void;
                        updateGroupVisibility(): void;
                        updateParentGroup(): void;
                        updatePivotXFromAnchorX(): void;
                        updatePivotYFromAnchorY(): void;
                        _group: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            exists: boolean;
                            fixedToCamera: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            sortableChildren: boolean;
                            sortDirty: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            height: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            width: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            name: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateBounds(): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _render(t: any): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addChild(): any;
                            addChildAt(t: any, e: any): any;
                            addListener(t: any, e: any, r: any): any;
                            calculateBounds(): void;
                            containerUpdateTransform(): void;
                            destroy(u: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getChildAt(t: any): any;
                            getChildByName(t: any, e: any): any;
                            getChildIndex(t: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(e: any, r: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onChildrenChange(t: any): void;
                            removeAllListeners(t: any): any;
                            removeChild(): any;
                            removeChildAt(t: any): any;
                            removeChildren(t: any, e: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            render(t: any): void;
                            renderAdvanced(t: any): void;
                            setChildIndex(t: any, e: any): void;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            sortChildren(): void;
                            swapChildren(t: any, e: any): void;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            update(): void;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _localBounds: any /* too deep */;
                            _localBoundsRect: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            children: any /* too deep */;
                            gameObjectRef: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                            localTransform: any /* too deep */;
                            onDestroy: any /* too deep */;
                            parent: Player["_playerContainer"]["follow"];
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        anchor: {
                            _recalculateMagnitude: boolean;
                            _recalculateMagnitudeSq: boolean;
                            _magnitude: number;
                            _magnitudeSq: number;
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            add(c: any): void;
                            angle(c: any): any;
                            ceil(): void;
                            clamp(c: any, u: any, h: any): void;
                            clip(c: any): void;
                            copyFrom(c: any): any;
                            copyTo(c: any): any;
                            cross(c: any): any;
                            divide(c: any): void;
                            dot(c: any): any;
                            equals(c: any): any;
                            floor(): void;
                            getDistance(c: any): any;
                            getDistanceSq(c: any): any;
                            getMagnitude(): any;
                            getMagnitudeSq(): any;
                            interpolate(c: any, u: any): void;
                            invert(): void;
                            isNearlyEqual(c: any, u: any): any;
                            isNearlyEqualToValues(c: any, u: any, h: any): any;
                            isZero(): any;
                            multiply(c: any): void;
                            negate(): void;
                            normalize(): void;
                            normalRightHand(): void;
                            perpendicular(c: any): void;
                            print(c: any): void;
                            project(c: any, u: any): void;
                            recalculateMagnitude(): void;
                            recalculateMagnitudeSq(): void;
                            rotate(c: any, u: any, h: any): void;
                            round(): void;
                            set(c: any, u: any): void;
                            setTo(c: any, u: any): void;
                            setToPolar(c: any, u: any): void;
                            subtract(c: any): void;
                            toString(): any;
                            trunc(): void;
                        };
                        gameObject: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                        GameObject: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                        group: Player["_playerContainer"]["follow"]["nameText"]["gameObject"]["_legacyTransform"]["_group"];
                        onActiveChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        OnActiveChanged: Player["_playerContainer"]["follow"]["nameText"]["gameObject"]["_legacyTransform"]["onActiveChanged"];
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        OnDestroy: Player["_playerContainer"]["follow"]["nameText"]["gameObject"]["_legacyTransform"]["onDestroy"];
                    };
                    children: Player["_playerContainer"]["follow"]["nameText"]["gameObject"]["_children"];
                    components: Player["_playerContainer"]["follow"]["nameText"]["gameObject"]["_components"];
                    legacyTransform: Player["_playerContainer"]["follow"]["nameText"]["gameObject"]["_legacyTransform"];
                    onActiveChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onActiveInHierarchyChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    onChildAdded: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onChildRemoved: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onComponentAdded: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onComponentAddedToHierarchy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onComponentRemoved: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    onHierarchyChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    onLayerChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                };
                GameObject: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                OnActiveChanged: Player["_playerContainer"]["follow"]["nameText"]["onActiveChanged"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                OnDestroy: Player["_playerContainer"]["follow"]["nameText"]["onDestroy"];
                Source: {
                    source: string;
                    cleanUp(): void;
                    getText(): any;
                    setText(c: any): void;
                    onTextChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    OnTextChanged: Player["_playerContainer"]["follow"]["nameText"]["Source"]["onTextChanged"];
                };
                textObject: {
                    _isCreated: boolean;
                    _underline: boolean;
                    Active: boolean;
                    isActive: boolean;
                    IsActiveInHierarchy: boolean;
                    isCreated: boolean;
                    resizeRectTransform: boolean;
                    underline: boolean;
                    wordWrap: boolean;
                    _paddingX: number;
                    _paddingY: number;
                    blendMode: number;
                    dropShadowAlpha: number;
                    dropShadowAngle: number;
                    dropShadowBlur: number;
                    dropShadowDistance: number;
                    fontSize: number;
                    lineSpacing: number;
                    paddingX: number;
                    paddingY: number;
                    strokeThickness: number;
                    tint: number;
                    wordWrapWidth: number;
                    _boundsAlignH: string;
                    _boundsAlignV: string;
                    align: string;
                    boundsAlignH: string;
                    boundsAlignV: string;
                    dropShadowColor: string;
                    fill: string;
                    font: string;
                    fontStyle: string;
                    fontWeight: string;
                    stroke: string;
                    text: string;
                    _filter: null;
                    _parentRenderComponent: null;
                    _underlineEndIndex: null;
                    _underlineStartIndex: null;
                    underlineEndIndex: null;
                    underlineStartIndex: null;
                    applyScalingToTransform(c: any, u: any, h: any): void;
                    applyTextPivot(): void;
                    applyToMatrix(c: any, u: any): void;
                    attachRootContainer(): void;
                    attachRootToCurrentLayer(): void;
                    attachRootToRenderComponentParent(): void;
                    buildRenderComponentOrder(c: any): any;
                    clearListeners(): void;
                    clearParentRenderComponent(): void;
                    componentAddedToHierarchy(c: any, u: any): void;
                    create(): any;
                    createPixiTransformOverride(): any;
                    createTextObject(): void;
                    customDeserialize(c: any): void;
                    destroy(): void;
                    drawUnderline(c: any, u: any): void;
                    findChildIndex(): any;
                    firstUpdate(): void;
                    gameObjectHierarchyChanged(): void;
                    getDimensions(): any;
                    getInjectedValue(c: any): any;
                    getOverriddenTransform(): any;
                    getParentContainer(): any;
                    getRootContainer(): any;
                    isValidColor(c: any): any;
                    onDisable(): void;
                    onEnable(): void;
                    onLegacyTransformDestroyed(): void;
                    onOverrideTransformDestroyed(): void;
                    onParentRenderComponentDestroyed(): void;
                    onRenderComponentContainerWasSet(): void;
                    overridePIXIUpdateFunction(): void;
                    postCreate(): void;
                    postDeserialize(): void;
                    preDeserialize(c: any): void;
                    resetPIXIUpdateFunction(): void;
                    resizeRectTransformUponTextChange(): void;
                    setFilter(c: any): void;
                    setRootContainer(c: any): void;
                    setUpDisplayObject(c: any): void;
                    trackTransformAddingToOverride(c: any): void;
                    update(): void;
                    updateFunction(): void;
                    updateText(): void;
                    updateTextSize(): void;
                    updateVisibility(): void;
                    _rootContainer: {
                        _accessibleActive: boolean;
                        _autoResolution: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        _ownCanvas: boolean;
                        _roundPixels: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        dirty: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        roundPixels: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _cachedTint: number;
                        _eventsCount: number;
                        _height: number;
                        _lastSortedIndex: number;
                        _resolution: number;
                        _textureID: number;
                        _textureTrimmedID: number;
                        _tint: number;
                        _tintRGB: number;
                        _transformID: number;
                        _transformTrimmedID: number;
                        _width: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        blendMode: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        localStyleID: number;
                        renderId: number;
                        resolution: number;
                        rotation: number;
                        tabIndex: number;
                        tint: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        _font: string;
                        _text: string;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        pluginName: string;
                        text: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        _styleListener: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        vertexTrimmedData: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _generateFillStyle(e: any, r: any, i: any): any;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _onAnchorUpdate(): void;
                        _onTextureUpdate(): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        calculateTrimmedVertices(): any;
                        calculateVertices(): void;
                        containerUpdateTransform(): void;
                        containsPoint(t: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        drawLetterSpacing(t: any, e: any, r: any, i: any): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateText(t: any): void;
                        updateTexture(): void;
                        updateTransform(): void;
                        canvas: HTMLCanvasElement;
                        context: CanvasRenderingContext2D;
                        indices: Uint16Array;
                        uvs: Float32Array;
                        vertexData: Float32Array;
                        _anchor: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"];
                        };
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _style: {
                            _breakWords: boolean;
                            _dropShadow: boolean;
                            _trim: boolean;
                            _wordWrap: boolean;
                            breakWords: boolean;
                            dropShadow: boolean;
                            trim: boolean;
                            wordWrap: boolean;
                            _dropShadowAlpha: number;
                            _dropShadowAngle: number;
                            _dropShadowBlur: number;
                            _dropShadowDistance: number;
                            _fillGradientType: number;
                            _fontSize: number;
                            _leading: number;
                            _letterSpacing: number;
                            _lineHeight: number;
                            _miterLimit: number;
                            _padding: number;
                            _strokeThickness: number;
                            _wordWrapWidth: number;
                            dropShadowAlpha: number;
                            dropShadowAngle: number;
                            dropShadowBlur: number;
                            dropShadowDistance: number;
                            fillGradientType: number;
                            fontSize: number;
                            leading: number;
                            letterSpacing: number;
                            lineHeight: number;
                            miterLimit: number;
                            padding: number;
                            strokeThickness: number;
                            styleID: number;
                            wordWrapWidth: number;
                            _align: string;
                            _dropShadowColor: string;
                            _fill: string;
                            _fontFamily: string;
                            _fontStyle: string;
                            _fontVariant: string;
                            _fontWeight: string;
                            _lineJoin: string;
                            _stroke: string;
                            _textBaseline: string;
                            _whiteSpace: string;
                            align: string;
                            dropShadowColor: string;
                            fill: string;
                            fontFamily: string;
                            fontStyle: string;
                            fontVariant: string;
                            fontWeight: string;
                            lineJoin: string;
                            stroke: string;
                            textBaseline: string;
                            whiteSpace: string;
                            clone(): any;
                            reset(): void;
                            toFontString(): any;
                            _fillGradientStops: any /* too deep */;
                            fillGradientStops: any /* too deep */;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _texture: {
                            noFrame: boolean;
                            valid: boolean;
                            _eventsCount: number;
                            _rotate: number;
                            _updateID: number;
                            height: number;
                            resolution: number;
                            rotate: number;
                            width: number;
                            uvMatrix: null;
                            addListener(t: any, e: any, r: any): any;
                            castToBaseTexture(): any;
                            clone(): any;
                            destroy(t: any): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            eventNames(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            onBaseTextureUpdated(t: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            update(): void;
                            updateUvs(): void;
                            _events: any /* too deep */;
                            _frame: any /* too deep */;
                            _uvs: any /* too deep */;
                            baseTexture: any /* too deep */;
                            defaultAnchor: any /* too deep */;
                            frame: any /* too deep */;
                            orig: any /* too deep */;
                            textureCacheIds: any /* too deep */;
                            trim: any /* too deep */;
                        };
                        _trackedPointers: {};
                        anchor: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["_anchor"];
                        children: never[];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        parent: Player["_playerContainer"]["follow"]["nameText"]["gameObject"]["_legacyTransform"]["_group"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        style: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["_style"];
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"];
                        texture: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["_texture"];
                        trackedPointers: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["position"];
                            scale: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _textBounds: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    _textSize: {
                        _halfHeight: number;
                        _halfWidth: number;
                        _height: number;
                        _width: number;
                        height: number;
                        width: number;
                        copyFrom(c: any): void;
                        getHalfHeight(): any;
                        getHalfWidth(): any;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        setTo(c: any, u: any): void;
                    };
                    _underlines: never[];
                    gameObject: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                    GameObject: Player["_playerContainer"]["follow"]["nameText"]["gameObject"];
                    onActiveChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    OnActiveChanged: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["onActiveChanged"];
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    OnDestroy: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["onDestroy"];
                    onRootContainerSet: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    Source: {
                        source: string;
                        cleanUp(): void;
                        getText(): any;
                        setText(c: any): void;
                        onTextChanged: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        OnTextChanged: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["Source"]["onTextChanged"];
                    };
                    textObject: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"];
                    TextObject: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["_rootContainer"];
                    textSource: Player["_playerContainer"]["follow"]["nameText"]["textObject"]["Source"];
                };
                TextObject: Player["_playerContainer"]["follow"]["nameText"]["textObject"];
                textSource: Player["_playerContainer"]["follow"]["nameText"]["Source"];
            };
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: ({ active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _listener(): void; destroy(): void; execute(c: any): any; isBound(): any; listener(): void; toString(): any; _args: any /* too deep */; _context: Player["_playerContainer"]["follow"]["followController"]; context: Player["_playerContainer"]["follow"]["followController"]; } | { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _listener(): void; destroy(): void; execute(c: any): any; isBound(): any; listener(): void; toString(): any; _args: any /* too deep */; _context: Player["_playerContainer"]["follow"]; context: Player["_playerContainer"]["follow"]; })[];
            };
            OnLoad: Player["_playerContainer"]["follow"]["_onLoad"];
            onPathFound: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onStand: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onStopped: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onTargetStopped: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _listener(): void; destroy(): void; execute(c: any): any; isBound(): any; listener(): void; toString(): any; _args: any /* too deep */; _context: Player["_playerContainer"]["follow"]["followController"]; context: Player["_playerContainer"]["follow"]["followController"]; }[];
            };
            parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["follow"]["localTransform"];
                    pivot: Player["_playerContainer"]["follow"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["follow"]["pivot"]["scope"]["position"];
            scale: Player["_playerContainer"]["follow"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["follow"]["pivot"]["scope"]["skew"];
            source: {
                immortal: boolean;
                inPVP: boolean;
                isOpponent: boolean;
                justLeveled: boolean;
                showHealthBar: boolean;
                aoaTier: number;
                broadcastId: number;
                catchAttempt: number;
                pvpHP: number;
                starsEarned: number;
                starsReward: number;
                starsRewardBase: number;
                starsToProcess: number;
                npcType: string;
                type: string;
                source: null;
                team: undefined;
                addStars(u: any, h: any, f: any): any;
                canCatch(): any;
                changeCurrentHearts(c: any, u: any): void;
                changeCurrentHeartsPercent(c: any): void;
                createDataClone(): any;
                diffAttackSlots(c: any): any;
                evolve(c: any, u: any): void;
                getAllEvolutions(): any;
                getAttacks(c: any): any;
                getAvailableEvolutions(): any;
                getBamSpells(c: any): any;
                getBaseMaxHearts(c: any): any;
                getCurrentBamSpells(): any;
                getCurrentHearts(): any;
                getDamageBonus(): any;
                getDataAndClear(): any;
                getDrops(): any;
                getElement(): any;
                getFirstName(): any;
                getID(): any;
                getLevel(): any;
                getLevelingCurve(c: any): any;
                getMaxHearts(u: any): any;
                getName(): any;
                getNameWithoutNickname(): any;
                getNpcType(): any;
                getPercentToLevel(): any;
                getSpellAssets(): any;
                getStarReward(): any;
                getStarRewardByDamage(c: any): any;
                getStars(): any;
                getStarsToLevel(): any;
                getStatHealth(): any;
                getStatPower(): any;
                init(u: any): any;
                isKnockedOut(): any;
                processStars(): void;
                registerIncomingAttack(c: any, u: any, h: any, a: any): void;
                removeTeam(): void;
                resetModifiers(): void;
                sendNpcDiscoveredEvent(c: any): void;
                setCurrentHearts(c: any, u: any): void;
                setData(c: any): void;
                updateModifier(c: any, u: any): void;
                data: {};
                game: Player["_playerContainer"]["_game"];
                modifiers: {
                    damage: number;
                    ignoreElement: number;
                    maxHearts: number;
                    miss: number;
                    barrier: null;
                    potion: null;
                };
                name: {
                    first: string;
                    last: null;
                    nick: null;
                    generateRandomName(): void;
                    getFirstName(): any;
                    getName(): any;
                    getNameWithoutNickname(): any;
                    init(c: any, u: any, h: any): void;
                    localizer: Player["_playerContainer"]["$"]["_localizer"];
                };
                onHPChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
            };
            sprite: Player["_playerContainer"]["follow"]["body"]["parent"];
            sprites: Player["_playerContainer"]["follow"]["body"]["parent"]["parent"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            standTween: { noSkipFrames: boolean; index: number; startTime: number; onComplete: undefined; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; destroyed: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cacheAsBitmapMultisample: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cacheAsBitmapMultisample: number; centerX: number; centerY: number; height: number; left: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheAsBitmapResolution: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; accessibleHint: null; accessibleTitle: null; cacheAsBitmapResolution: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: any): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): any; _initCachedDisplayObject(t: any): void; _initCachedDisplayObjectCanvas(t: any): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: any): void; _renderCached(t: any): void; _renderCachedCanvas(t: any): void; addChild(): any; addChildAt(t: any, e: any): any; addListener(t: any, e: any, r: any): any; bringChildToTop(c: any): void; calculateBounds(): void; calculateTrimmedVertices(): any; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: any): any; destroy(): void; disableTempParent(t: any): void; displayObjectUpdateTransform(): void; emit(t: any, e: any, i: any, n: any, o: any, s: any): any; enableTempParent(): any; eventNames(): any; getBounds(t: any, e: any): any; getChildAt(t: any): any; getChildByName(t: any, e: any): any; getChildIndex(t: any): any; getGlobalPosition(t: any, e: any): any; getLocalBounds(t: any): any; getOffsetX(): any; getOffsetY(): any; listenerCount(t: any): any; listeners(t: any): any; loadNewTexture(c: any, u: any, h: any, a: any): void; loadTexture(c: any, u: any): void; off(t: any, e: any, i: any, n: any): any; on(t: any, e: any, r: any): any; once(t: any, e: any, r: any): any; onChildrenChange(t: any): void; onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void; removeAllListeners(t: any): any; removeChild(): any; removeChildAt(t: any): any; removeChildren(t: any, e: any): any; removeListener(t: any, e: any, i: any, n: any): any; render(t: any): void; renderAdvanced(t: any): void; rotateMiddleBased(c: any): void; sendChildToBack(c: any): void; setActive(c: any): void; setChildIndex(t: any, e: any): void; setFrame(c: any): void; setParent(t: any): any; setTexture(c: any, u: any): void; setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any; sortChildren(): void; swapChildren(t: any, e: any): void; toGlobal(t: any, e: any, r: any): any; toLocal(t: any, e: any, r: any, i: any): any; update(): void; updateFrame(u: any): void; updateTexture(c: any): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: any /* too deep */; _bounds: any /* too deep */; _events: any /* too deep */; _localBoundsRect: any /* too deep */; _tempDisplayObjectParent: any /* too deep */; _texture: any /* too deep */; _trackedPointers: any /* too deep */; anchor: any /* too deep */; animations: any /* too deep */; bounds: any /* too deep */; cameraOffset: any /* too deep */; children: any /* too deep */; events: any /* too deep */; game: Player["_playerContainer"]["_game"]; localTransform: any /* too deep */; parent: Player["_playerContainer"]["follow"]["body"]["parent"]; pivot: any /* too deep */; position: any /* too deep */; previousPosition: any /* too deep */; scale: any /* too deep */; skew: any /* too deep */; stage: Player["_playerContainer"]["_game"]["_add"]["stage"]; tempDisplayObjectParent: any /* too deep */; texture: any /* too deep */; trackedPointers: any /* too deep */; transform: any /* too deep */; transformCallback: any /* too deep */; world: any /* too deep */; worldPosition: any /* too deep */; worldScale: any /* too deep */; worldTransform: any /* too deep */; }; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; }[];
            tail: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                _roundPixels: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                inputEnabled: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isLoaded: boolean;
                isMask: boolean;
                isSprite: boolean;
                pendingDestroy: boolean;
                renderable: boolean;
                roundPixels: boolean;
                smoothed: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _cachedTint: number;
                _eventsCount: number;
                _height: number;
                _lastSortedIndex: number;
                _textureID: number;
                _textureTrimmedID: number;
                _tint: number;
                _tintRGB: number;
                _transformID: number;
                _transformTrimmedID: number;
                _width: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                blendMode: number;
                bottom: number;
                cacheAsBitmapMultisample: number;
                centerX: number;
                centerY: number;
                height: number;
                left: number;
                renderId: number;
                right: number;
                rotation: number;
                tabIndex: number;
                tint: number;
                top: number;
                width: number;
                worldAlpha: number;
                worldRotation: number;
                x: number;
                y: number;
                z: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                frameName: string;
                key: string;
                pluginName: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                loadingTween: null;
                mask: null;
                name: null;
                scaleMax: null;
                scaleMin: null;
                transformCallbackContext: null;
                vertexTrimmedData: null;
                forcedHeight: undefined;
                forcedWidth: undefined;
                frame: undefined;
                onTextureLoaded: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _onAnchorUpdate(): void;
                _onTextureUpdate(): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                bringChildToTop(c: any): void;
                calculateBounds(): void;
                calculateTrimmedVertices(): any;
                calculateVertices(): void;
                checkCallback(): void;
                checkSpriteDimension(): void;
                containerUpdateTransform(): void;
                containsPoint(t: any): any;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                getOffsetX(): any;
                getOffsetY(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                loadNewTexture(c: any, u: any, h: any, a: any): void;
                loadTexture(c: any, u: any): void;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                rotateMiddleBased(c: any): void;
                sendChildToBack(c: any): void;
                setActive(c: any): void;
                setChildIndex(t: any, e: any): void;
                setFrame(c: any): void;
                setParent(t: any): any;
                setTexture(c: any, u: any): void;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateFrame(u: any): void;
                updateTexture(c: any): void;
                updateTransform(): void;
                indices: Uint16Array;
                uvs: Float32Array;
                vertexData: Float32Array;
                _anchor: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: Player["_playerContainer"]["follow"]["tail"];
                };
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _localBoundsRect: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _texture: {
                    noFrame: boolean;
                    valid: boolean;
                    _eventsCount: number;
                    _rotate: number;
                    _updateID: number;
                    height: number;
                    resolution: number;
                    rotate: number;
                    width: number;
                    trim: null;
                    uvMatrix: null;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    clone(): any;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    onBaseTextureUpdated(t: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    update(): void;
                    updateUvs(): void;
                    _events: {};
                    _frame: {
                        bottom: number;
                        height: number;
                        left: number;
                        right: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        pad(t: any, e: any): any;
                    };
                    _uvs: {
                        x0: number;
                        x1: number;
                        x2: number;
                        x3: number;
                        y0: number;
                        y1: number;
                        y2: number;
                        y3: number;
                        set(t: any, e: any, r: any): void;
                        uvsFloat32: Float32Array;
                    };
                    baseTexture: Player["_playerContainer"]["follow"]["body"]["_texture"]["baseTexture"];
                    defaultAnchor: {
                        x: number;
                        y: number;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                    };
                    frame: Player["_playerContainer"]["follow"]["tail"]["_texture"]["_frame"];
                    orig: Player["_playerContainer"]["follow"]["tail"]["_texture"]["_frame"];
                    textureCacheIds: never[];
                };
                _trackedPointers: {};
                anchor: Player["_playerContainer"]["follow"]["tail"]["_anchor"];
                animations: {
                    isLoaded: boolean;
                    updateIfVisible: boolean;
                    frame: number;
                    frameTotal: number;
                    frameName: string;
                    name: null;
                    add(c: any, u: any, h: any, a: any, l: any): any;
                    addIfFound(c: any, u: any, h: any, a: any): any;
                    copyFrameData(c: any, u: any): any;
                    destroy(): void;
                    getAnimation(c: any): any;
                    loadFrameData(c: any, u: any): any;
                    next(c: any): void;
                    onFrameLoaded(c: any): void;
                    play(c: any, u: any, h: any): any;
                    previous(c: any): void;
                    stop(c: any, u: any): void;
                    update(): any;
                    validateFrames(c: any, u: any): any;
                    _animations: Map<never, never>;
                    _frameData: Player["_playerContainer"]["follow"]["body"]["animations"]["_frameData"];
                    _onLoaded: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    currentFrame: {
                        bottom: number;
                        centerX: number;
                        centerY: number;
                        distance: number;
                        height: number;
                        index: number;
                        left: number;
                        right: number;
                        sourceSizeH: number;
                        sourceSizeW: number;
                        top: number;
                        type: number;
                        width: number;
                        x: number;
                        y: number;
                        name: string;
                        ceil(t: any, e: any): any;
                        clone(): any;
                        contains(t: any, e: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        enlarge(t: any): any;
                        fit(t: any): any;
                        getRect(c: any): any;
                        pad(t: any, e: any): any;
                        resize(c: any, u: any): void;
                        setTrim(c: any, u: any, h: any, a: any, f: any, l: any, b: any): void;
                    };
                    frameData: Player["_playerContainer"]["follow"]["body"]["animations"]["_frameData"];
                    onLoaded: Player["_playerContainer"]["follow"]["tail"]["animations"]["_onLoaded"];
                    sprite: Player["_playerContainer"]["follow"]["tail"];
                };
                bounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                cameraOffset: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                children: never[];
                events: {
                    destroy(): void;
                    onAddedToGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationComplete: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationLoop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onAnimationStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStart: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragStop: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onDragUpdate: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onEnterBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputDown: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOut: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputOver: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onInputUp: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onOutOfBounds: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromGroup: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    onRemovedFromWorld: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    parent: Player["_playerContainer"]["follow"]["tail"];
                };
                game: Player["_playerContainer"]["_game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                parent: Player["_playerContainer"]["follow"]["body"]["parent"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["follow"]["tail"]["localTransform"];
                        pivot: Player["_playerContainer"]["follow"]["tail"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"]["position"];
                previousPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                scale: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"]["skew"];
                stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
                tempDisplayObjectParent: Player["_playerContainer"]["follow"]["tail"]["_tempDisplayObjectParent"];
                texture: Player["_playerContainer"]["follow"]["tail"]["_texture"];
                trackedPointers: Player["_playerContainer"]["follow"]["tail"]["_trackedPointers"];
                transform: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"];
                transformCallback: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                world: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldPosition: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                worldScale: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"]["scale"];
                worldTransform: Player["_playerContainer"]["follow"]["tail"]["pivot"]["scope"]["worldTransform"];
            };
            tempDisplayObjectParent: Player["_playerContainer"]["follow"]["_tempDisplayObjectParent"];
            trackedPointers: Player["_playerContainer"]["follow"]["_trackedPointers"];
            transform: Player["_playerContainer"]["follow"]["pivot"]["scope"];
            tweens: Player["_playerContainer"]["follow"]["standTween"];
            walkTween: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["follow"]["body"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["follow"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["follow"]["tail"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldGamePosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["follow"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["follow"]["pivot"]["scope"]["worldTransform"];
        };
        game: Player["_playerContainer"]["_game"];
        hair: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            frameName: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            key: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hair"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                multisample: number;
                resolution: number;
                rotate: number;
                width: number;
                filterFrame: null;
                filterPoolKey: null;
                uvMatrix: null;
                trim: undefined;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                resize(t: any, e: any, r: any): void;
                setResolution(t: any): void;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    resource: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    resize(t: any, e: any): void;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: {
                        dispose: {
                            once: boolean;
                            fn(t: any, e: any): void;
                            context: Player["_playerContainer"]["_game"]["_app"]["renderer"]["texture"];
                        };
                        update: {
                            once: boolean;
                            fn(t: any): any;
                            context: Player["_playerContainer"]["hair"]["_texture"];
                        };
                    };
                    _glTextures: {
                        "1": {
                            mipmap: boolean;
                            dirtyId: number;
                            dirtyStyleId: number;
                            height: number;
                            internalFormat: number;
                            samplerType: number;
                            type: number;
                            width: number;
                            wrapMode: number;
                            texture: WebGLTexture;
                        };
                    };
                    clearColor: number[];
                    filterStack: any /* too deep */[];
                    framebuffer: {
                        depth: boolean;
                        stencil: boolean;
                        dirtyFormat: number;
                        dirtyId: number;
                        dirtySize: number;
                        height: number;
                        multisample: number;
                        width: number;
                        depthTexture: null;
                        addColorTexture(e: any, r: any): any;
                        addDepthTexture(e: any): any;
                        destroyDepthTexture(): void;
                        dispose(): void;
                        enableDepth(): any;
                        enableStencil(): any;
                        resize(t: any, e: any): void;
                        colorTexture: Player["_playerContainer"]["hair"]["_texture"]["baseTexture"];
                        colorTextures: Player["_playerContainer"]["hair"]["_texture"]["baseTexture"][];
                        disposeRunner: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        glFramebuffers: {
                            "1": any /* too deep */;
                        };
                    };
                    maskStack: never[];
                    textureCacheIds: never[];
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["hair"]["_texture"]["_frame"];
                framebuffer: Player["_playerContainer"]["hair"]["_texture"]["baseTexture"]["framebuffer"];
                orig: Player["_playerContainer"]["hair"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["hair"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: null;
                frameName: null;
                name: null;
                frameData: undefined;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onLoaded: Player["_playerContainer"]["hair"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["hair"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["hair"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["eyes"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["hair"]["localTransform"];
                    pivot: Player["_playerContainer"]["hair"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hair"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hair"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hair"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["hair"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["hair"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["hair"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["hair"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["hair"]["_texture"];
            trackedPointers: Player["_playerContainer"]["hair"]["_trackedPointers"];
            transform: Player["_playerContainer"]["hair"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["hair"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["hair"]["pivot"]["scope"]["worldTransform"];
        };
        hairMetadata: {
            v: number;
            vIcon: number;
            x: number;
            y: number;
            type: string;
            pivot: {
                x: number;
                y: number;
            };
        };
        hat: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            frameName: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["hat"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                trim: undefined;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: {
                        dispose: {
                            once: boolean;
                            fn(t: any, e: any): void;
                            context: Player["_playerContainer"]["_game"]["_app"]["renderer"]["texture"];
                        };
                        update: {
                            once: boolean;
                            fn(t: any): any;
                            context: Player["_playerContainer"]["hat"]["_texture"];
                        };
                    };
                    _glTextures: {
                        "1": {
                            mipmap: boolean;
                            dirtyId: number;
                            dirtyStyleId: number;
                            height: number;
                            internalFormat: number;
                            samplerType: number;
                            type: number;
                            width: number;
                            wrapMode: number;
                            texture: WebGLTexture;
                        };
                    };
                    resource: {
                        createBitmap: boolean;
                        destroyed: boolean;
                        internal: boolean;
                        noSubImage: boolean;
                        preserveBitmap: boolean;
                        valid: boolean;
                        _height: number;
                        _width: number;
                        height: number;
                        width: number;
                        url: string;
                        _process: null;
                        alphaMode: null;
                        bitmap: null;
                        bind(t: any): void;
                        destroy(): void;
                        dispose(): void;
                        load(t: any): any;
                        process(): any;
                        resize(t: any, e: any): void;
                        style(t: any, e: any, r: any): any;
                        unbind(t: any): void;
                        update(): void;
                        upload(t: any, r: any, i: any): any;
                        _load: Promise<any>;
                        source: HTMLImageElement;
                        onError: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        onResize: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        onUpdate: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                    };
                    textureCacheIds: never[];
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["hat"]["_texture"]["_frame"];
                orig: Player["_playerContainer"]["hat"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["hat"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: null;
                frameName: null;
                name: null;
                frameData: undefined;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onLoaded: Player["_playerContainer"]["hat"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["hat"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["hat"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["eyes"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["hat"]["localTransform"];
                    pivot: Player["_playerContainer"]["hat"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hat"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hat"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["hat"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["hat"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["hat"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["hat"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["hat"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["hat"]["_texture"];
            trackedPointers: Player["_playerContainer"]["hat"]["_trackedPointers"];
            transform: Player["_playerContainer"]["hat"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["hat"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["hat"]["pivot"]["scope"]["worldTransform"];
        };
        hatMetadata: {
            v: number;
            vIcon: number;
            x: number;
            y: number;
            hideReplace: string;
            type: string;
            hairHide: number[];
            pivot: {
                x: number;
                y: number;
            };
        };
        head: Player["_playerContainer"]["eyes"]["parent"];
        headElement: Player["_playerContainer"]["eyes"]["parent"]["parent"];
        headSprites: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"];
        indicatorE: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _isModalWithTransparency: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isMask: boolean;
            isModalWithTransparency: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _eventsCount: number;
            _lastSortedIndex: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            length: number;
            offsetX: number;
            offsetY: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            _sortProperty: string;
            accessiblePointerEvents: string;
            accessibleType: string;
            name: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            mask: null;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            add(c: any, u: any): any;
            addAt(c: any, u: any): any;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            callAll(c: any, u: any): void;
            callbackFromArray(c: any, u: any): any;
            containerUpdateTransform(): void;
            destroy(u: any): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getAt(c: any): any;
            getBounds(t: any, e: any): any;
            getByName(c: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getIndex(c: any): any;
            getInjectedValue(c: any): any;
            getLocalBounds(e: any, r: any): any;
            hasTooltip(): any;
            highlight(c: any, u: any, h: any, a: any): void;
            isHighlighted(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            moveDown(c: any): any;
            moveUp(c: any): any;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            remove(c: any, u: any): any;
            removeAll(c: any): void;
            removeAllListeners(t: any): any;
            removeBetween(c: any, u: any, h: any, a: any): void;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            sendChildToBack(c: any): void;
            setChildIndex(t: any, e: any): void;
            setElementAsModal(c: any): void;
            setParent(t: any): any;
            setRenderState(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            showTooltip(c: any, u: any): void;
            sortChildren(): void;
            swap(c: any, u: any): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateTransform(): void;
            updateZ(): void;
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _game: Player["_playerContainer"]["_game"];
            _localBounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _trackedPointers: {};
            anchor: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["indicatorE"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            parent: Player["_playerContainer"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["indicatorE"]["localTransform"];
                    pivot: Player["_playerContainer"]["indicatorE"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"]["position"];
            scale: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["indicatorE"]["_tempDisplayObjectParent"];
            trackedPointers: Player["_playerContainer"]["indicatorE"]["_trackedPointers"];
            transform: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"];
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldGamePosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["indicatorE"]["pivot"]["scope"]["worldTransform"];
        };
        leftArm: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["leftArm"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: {
                        dispose: {
                            once: boolean;
                            fn(t: any, e: any): void;
                            context: Player["_playerContainer"]["_game"]["_app"]["renderer"]["texture"];
                        };
                        update: {
                            once: boolean;
                            fn(t: any): any;
                            context: any /* too deep */;
                        };
                    };
                    _glTextures: {
                        "1": {
                            mipmap: boolean;
                            dirtyId: number;
                            dirtyStyleId: number;
                            height: number;
                            internalFormat: number;
                            samplerType: number;
                            type: number;
                            width: number;
                            wrapMode: number;
                            texture: WebGLTexture;
                        };
                    };
                    resource: {
                        createBitmap: boolean;
                        destroyed: boolean;
                        internal: boolean;
                        noSubImage: boolean;
                        preserveBitmap: boolean;
                        valid: boolean;
                        _height: number;
                        _width: number;
                        height: number;
                        width: number;
                        url: string;
                        _process: null;
                        alphaMode: null;
                        bitmap: null;
                        bind(t: any): void;
                        destroy(): void;
                        dispose(): void;
                        load(t: any): any;
                        process(): any;
                        resize(t: any, e: any): void;
                        style(t: any, e: any, r: any): any;
                        unbind(t: any): void;
                        update(): void;
                        upload(t: any, r: any, i: any): any;
                        _load: Promise<any>;
                        source: HTMLImageElement;
                        onError: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        onResize: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        onUpdate: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                    };
                    textureCacheIds: never[];
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["leftArm"]["_texture"]["_frame"];
                orig: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                textureCacheIds: never[];
                trim: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["leftArm"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: number;
                frameTotal: number;
                frameName: string;
                name: null;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _frameData: {
                    _destroyed: boolean;
                    destroyed: boolean;
                    total: number;
                    addFrame(c: any): any;
                    checkFrameName(c: any): any;
                    clone(): any;
                    destroy(): void;
                    getFrame(c: any): any;
                    getFrameByName(c: any): any;
                    getFrameIndexes(c: any, u: any, h: any): any;
                    getFrameRange(c: any, u: any, h: any): any;
                    getFrames(c: any, u: any, h: any): any;
                    _frameNames: Map<never, never>;
                    _frames: any /* too deep */[];
                };
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                currentFrame: {
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    distance: number;
                    height: number;
                    index: number;
                    left: number;
                    right: number;
                    sourceSizeH: number;
                    sourceSizeW: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    name: string;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    getRect(c: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): void;
                    setTrim(c: any, u: any, h: any, a: any, f: any, l: any, b: any): void;
                };
                frameData: Player["_playerContainer"]["leftArm"]["animations"]["_frameData"];
                onLoaded: Player["_playerContainer"]["leftArm"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["leftArm"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["leftArm"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["leftArm"]["localTransform"];
                    pivot: Player["_playerContainer"]["leftArm"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["leftArm"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["leftArm"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["leftArm"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["leftArm"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["leftArm"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["leftArm"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["leftArm"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["leftArm"]["_texture"];
            trackedPointers: Player["_playerContainer"]["leftArm"]["_trackedPointers"];
            transform: Player["_playerContainer"]["leftArm"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["leftArm"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["leftArm"]["pivot"]["scope"]["worldTransform"];
        };
        legs: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["legs"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                trim: null;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: Player["_playerContainer"]["leftArm"]["_texture"]["baseTexture"];
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["legs"]["_texture"]["_frame"];
                orig: Player["_playerContainer"]["legs"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["legs"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: number;
                frameTotal: number;
                frameName: string;
                name: null;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _frameData: Player["_playerContainer"]["leftArm"]["animations"]["_frameData"];
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                currentFrame: {
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    distance: number;
                    height: number;
                    index: number;
                    left: number;
                    right: number;
                    sourceSizeH: number;
                    sourceSizeW: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    name: string;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    getRect(c: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): void;
                    setTrim(c: any, u: any, h: any, a: any, f: any, l: any, b: any): void;
                };
                frameData: Player["_playerContainer"]["leftArm"]["animations"]["_frameData"];
                onLoaded: Player["_playerContainer"]["legs"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["legs"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["legs"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["legs"]["localTransform"];
                    pivot: Player["_playerContainer"]["legs"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["legs"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["legs"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["legs"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["legs"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["legs"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["legs"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["legs"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["legs"]["_texture"];
            trackedPointers: Player["_playerContainer"]["legs"]["_trackedPointers"];
            transform: Player["_playerContainer"]["legs"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["legs"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["legs"]["pivot"]["scope"]["worldTransform"];
        };
        localTransform: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"]["localTransform"];
        locomotion: {
            isMainPlayer: boolean;
            lastUpdateCount: number;
            broadcastPosition(): void;
            destroy(): void;
            onFindPath(c: any): void;
            onGetTarget(c: any): any;
            onMovePlayer(c: any, u: any): any;
            onStopPlayer(): void;
            onStopPlayerBound(): void;
            setNewTarget(c: any, u: any): void;
            setup(c: any, u: any, h: any): void;
            update(): void;
            creatureContainer: Player["_playerContainer"];
            game: Player["_playerContainer"]["_game"];
            lastTargetBroadcasted: {
                x: number;
                y: number;
            };
            screen: Player["_playerContainer"]["_game"]["_state"]["_current"];
            target: {
                x: number;
                y: number;
            };
        };
        metricsManager: Player["_playerContainer"]["_game"]["_state"]["_current"]["_world"]["_metricsManager"];
        nameText: {
            _isCreated: boolean;
            Active: boolean;
            isActive: boolean;
            IsActiveInHierarchy: boolean;
            isCreated: boolean;
            alignment: number;
            Alignment: number;
            BlendMode: number;
            FontSize: number;
            FontStyle: number;
            LineSpacing: number;
            ShadowAlpha: number;
            ShadowAngle: number;
            ShadowBlur: number;
            ShadowDistance: number;
            StrokeThickness: number;
            TextHeight: number;
            TextWidth: number;
            FillColor: string;
            Font: string;
            ShadowColor: string;
            StrokeColor: string;
            TextConfig: undefined;
            create(): any;
            customDeserialize(c: any): void;
            destroy(): void;
            firstUpdate(): void;
            getInjectedValue(c: any): any;
            isValidColor(c: any): any;
            onDisable(): void;
            onEnable(): void;
            postCreate(): void;
            postDeserialize(): void;
            preDeserialize(c: any): void;
            setText(c: any): void;
            update(): void;
            updateAlignment(): void;
            updateFunction(): void;
            updateText(): void;
            gameObject: {
                _destroyed: boolean;
                _isActive: boolean;
                _isActiveInHierarchy: boolean;
                active: boolean;
                activeInHierarchy: boolean;
                isDestroyed: boolean;
                _name: string;
                layer: string;
                name: string;
                _parent: null;
                _transform: null;
                parent: null;
                transform: null;
                activeInHierarchyChanged(): void;
                addChild(c: any): void;
                addChildAt(c: any, u: any): void;
                addComponent(c: any, u: any): any;
                bringToFront(): void;
                destroy(): void;
                destroyDeferred(): void;
                dispatchComponentAddedInHierarchy(c: any, u: any): void;
                findChildByName(c: any): any;
                findComponent(c: any): any;
                findComponentInChildren(c: any, u: any): any;
                findComponentInParent(c: any, u: any): any;
                findComponents(c: any): any;
                findComponentsInChildren(c: any, u: any): any;
                firstUpdate(): void;
                getRenderOrder(): any;
                hasComponent(c: any): any;
                isActiveInHierarchy(): any;
                isInBack(): any;
                isInFront(): any;
                removeComponent(c: any): void;
                removeFromParent(): any;
                sendToBack(): void;
                setLayer(c: any, u: any): void;
                setParent(c: any, u: any): any;
                setRenderOrder(c: any): void;
                update(): void;
                updateFunction(): void;
                _children: never[];
                _components: ({ _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(u: any): void; destroy(): void; firstUpdate(): void; getInjectedValue(c: any): any; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; preDeserialize(c: any): void; reapplyChildRelativeValues(): void; update(): void; updateFunction(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: any /* too deep */; anchor: any /* too deep */; gameObject: Player["_playerContainer"]["nameText"]["gameObject"]; GameObject: Player["_playerContainer"]["nameText"]["gameObject"]; group: any /* too deep */; onActiveChanged: any /* too deep */; OnActiveChanged: any /* too deep */; onDestroy: any /* too deep */; OnDestroy: any /* too deep */; } | Player["_playerContainer"]["nameText"])[];
                _legacyTransform: {
                    _isCreated: boolean;
                    Active: boolean;
                    isActive: boolean;
                    IsActiveInHierarchy: boolean;
                    isCreated: boolean;
                    roundRelativeValues: boolean;
                    RoundRelativeValues: boolean;
                    anchorX: number;
                    anchorY: number;
                    height: number;
                    relativeHeight: number;
                    relativeWidth: number;
                    relativeX: number;
                    relativeY: number;
                    roundedHeight: number;
                    roundedWidth: number;
                    roundedX: number;
                    roundedY: number;
                    scaleX: number;
                    scaleY: number;
                    width: number;
                    x: number;
                    y: number;
                    cachedRelativeHeight: null;
                    cachedRelativeWidth: null;
                    cachedRelativeX: null;
                    cachedRelativeY: null;
                    dimensionPlaceholder: null;
                    create(): void;
                    customDeserialize(u: any): void;
                    destroy(): void;
                    firstUpdate(): void;
                    getInjectedValue(c: any): any;
                    onDisable(): void;
                    onEnable(): void;
                    postCreate(): void;
                    postDeserialize(): void;
                    preDeserialize(c: any): void;
                    reapplyChildRelativeValues(): void;
                    update(): void;
                    updateFunction(): void;
                    updateGroupVisibility(): void;
                    updateParentGroup(): void;
                    updatePivotXFromAnchorX(): void;
                    updatePivotYFromAnchorY(): void;
                    _group: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        exists: boolean;
                        fixedToCamera: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        sortableChildren: boolean;
                        sortDirty: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        height: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        width: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        name: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateBounds(): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _render(t: any): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addChild(): any;
                        addChildAt(t: any, e: any): any;
                        addListener(t: any, e: any, r: any): any;
                        calculateBounds(): void;
                        containerUpdateTransform(): void;
                        destroy(u: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getChildAt(t: any): any;
                        getChildByName(t: any, e: any): any;
                        getChildIndex(t: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(e: any, r: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        onChildrenChange(t: any): void;
                        removeAllListeners(t: any): any;
                        removeChild(): any;
                        removeChildAt(t: any): any;
                        removeChildren(t: any, e: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        render(t: any): void;
                        renderAdvanced(t: any): void;
                        setChildIndex(t: any, e: any): void;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        sortChildren(): void;
                        swapChildren(t: any, e: any): void;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        update(): void;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _localBounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _localBoundsRect: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        children: any /* too deep */[];
                        gameObjectRef: Player["_playerContainer"]["nameText"]["gameObject"];
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        onDestroy: {
                            _shouldPropagate: boolean;
                            active: boolean;
                            add(c: any, u: any, h: any): any;
                            addBinding(c: any, u: any, h: any, a: any, l: any): any;
                            addOnce(c: any, u: any, h: any): any;
                            dispatch(): void;
                            dispose(): void;
                            getBindingsCount(): any;
                            halt(): void;
                            has(c: any, u: any): any;
                            indexOfListener(c: any, u: any): any;
                            remove(c: any, u: any): void;
                            removeAll(c: any): void;
                            removeAtIndex(c: any): void;
                            toString(): any;
                            validateListener(c: any, u: any): void;
                            _bindings: any /* too deep */;
                        };
                        parent: Player["_playerContainer"];
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"]["localTransform"];
                            pivot: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"]["pivot"];
                            position: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"]["position"];
                            scale: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"]["scale"];
                            skew: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    anchor: {
                        _recalculateMagnitude: boolean;
                        _recalculateMagnitudeSq: boolean;
                        _magnitude: number;
                        _magnitudeSq: number;
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        add(c: any): void;
                        angle(c: any): any;
                        ceil(): void;
                        clamp(c: any, u: any, h: any): void;
                        clip(c: any): void;
                        copyFrom(c: any): any;
                        copyTo(c: any): any;
                        cross(c: any): any;
                        divide(c: any): void;
                        dot(c: any): any;
                        equals(c: any): any;
                        floor(): void;
                        getDistance(c: any): any;
                        getDistanceSq(c: any): any;
                        getMagnitude(): any;
                        getMagnitudeSq(): any;
                        interpolate(c: any, u: any): void;
                        invert(): void;
                        isNearlyEqual(c: any, u: any): any;
                        isNearlyEqualToValues(c: any, u: any, h: any): any;
                        isZero(): any;
                        multiply(c: any): void;
                        negate(): void;
                        normalize(): void;
                        normalRightHand(): void;
                        perpendicular(c: any): void;
                        print(c: any): void;
                        project(c: any, u: any): void;
                        recalculateMagnitude(): void;
                        recalculateMagnitudeSq(): void;
                        rotate(c: any, u: any, h: any): void;
                        round(): void;
                        set(c: any, u: any): void;
                        setTo(c: any, u: any): void;
                        setToPolar(c: any, u: any): void;
                        subtract(c: any): void;
                        toString(): any;
                        trunc(): void;
                    };
                    gameObject: Player["_playerContainer"]["nameText"]["gameObject"];
                    GameObject: Player["_playerContainer"]["nameText"]["gameObject"];
                    group: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"];
                    onActiveChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    OnActiveChanged: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["onActiveChanged"];
                    onDestroy: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    OnDestroy: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["onDestroy"];
                };
                children: Player["_playerContainer"]["nameText"]["gameObject"]["_children"];
                components: Player["_playerContainer"]["nameText"]["gameObject"]["_components"];
                legacyTransform: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onActiveInHierarchyChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onChildAdded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onChildRemoved: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onComponentAdded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onComponentAddedToHierarchy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onComponentRemoved: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onHierarchyChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                onLayerChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
            };
            GameObject: Player["_playerContainer"]["nameText"]["gameObject"];
            onActiveChanged: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _context: null; context: null; _listener(): any; destroy(): void; execute(c: any): any; isBound(): any; listener(): any; toString(): any; _args: any /* too deep */; }[];
            };
            OnActiveChanged: Player["_playerContainer"]["nameText"]["onActiveChanged"];
            onDestroy: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _context: null; context: null; _listener(arg0: any): void; destroy(): void; execute(c: any): any; isBound(): any; listener(arg0: any): void; toString(): any; _args: any /* too deep */; }[];
            };
            OnDestroy: Player["_playerContainer"]["nameText"]["onDestroy"];
            Source: {
                source: string;
                cleanUp(): void;
                getText(): any;
                setText(c: any): void;
                onTextChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                OnTextChanged: Player["_playerContainer"]["nameText"]["Source"]["onTextChanged"];
            };
            textObject: {
                _isCreated: boolean;
                _underline: boolean;
                Active: boolean;
                isActive: boolean;
                IsActiveInHierarchy: boolean;
                isCreated: boolean;
                resizeRectTransform: boolean;
                underline: boolean;
                wordWrap: boolean;
                _paddingX: number;
                _paddingY: number;
                blendMode: number;
                dropShadowAlpha: number;
                dropShadowAngle: number;
                dropShadowBlur: number;
                dropShadowDistance: number;
                fontSize: number;
                lineSpacing: number;
                paddingX: number;
                paddingY: number;
                strokeThickness: number;
                tint: number;
                wordWrapWidth: number;
                _boundsAlignH: string;
                _boundsAlignV: string;
                align: string;
                boundsAlignH: string;
                boundsAlignV: string;
                dropShadowColor: string;
                fill: string;
                font: string;
                fontStyle: string;
                fontWeight: string;
                stroke: string;
                text: string;
                _filter: null;
                _parentRenderComponent: null;
                _underlineEndIndex: null;
                _underlineStartIndex: null;
                underlineEndIndex: null;
                underlineStartIndex: null;
                applyScalingToTransform(c: any, u: any, h: any): void;
                applyTextPivot(): void;
                applyToMatrix(c: any, u: any): void;
                attachRootContainer(): void;
                attachRootToCurrentLayer(): void;
                attachRootToRenderComponentParent(): void;
                buildRenderComponentOrder(c: any): any;
                clearListeners(): void;
                clearParentRenderComponent(): void;
                componentAddedToHierarchy(c: any, u: any): void;
                create(): any;
                createPixiTransformOverride(): any;
                createTextObject(): void;
                customDeserialize(c: any): void;
                destroy(): void;
                drawUnderline(c: any, u: any): void;
                findChildIndex(): any;
                firstUpdate(): void;
                gameObjectHierarchyChanged(): void;
                getDimensions(): any;
                getInjectedValue(c: any): any;
                getOverriddenTransform(): any;
                getParentContainer(): any;
                getRootContainer(): any;
                isValidColor(c: any): any;
                onDisable(): void;
                onEnable(): void;
                onLegacyTransformDestroyed(): void;
                onOverrideTransformDestroyed(): void;
                onParentRenderComponentDestroyed(): void;
                onRenderComponentContainerWasSet(): void;
                overridePIXIUpdateFunction(): void;
                postCreate(): void;
                postDeserialize(): void;
                preDeserialize(c: any): void;
                resetPIXIUpdateFunction(): void;
                resizeRectTransformUponTextChange(): void;
                setFilter(c: any): void;
                setRootContainer(c: any): void;
                setUpDisplayObject(c: any): void;
                trackTransformAddingToOverride(c: any): void;
                update(): void;
                updateFunction(): void;
                updateText(): void;
                updateTextSize(): void;
                updateVisibility(): void;
                _rootContainer: {
                    _accessibleActive: boolean;
                    _autoResolution: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    _ownCanvas: boolean;
                    _roundPixels: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    dirty: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    roundPixels: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _cachedTint: number;
                    _eventsCount: number;
                    _height: number;
                    _lastSortedIndex: number;
                    _resolution: number;
                    _textureID: number;
                    _textureTrimmedID: number;
                    _tint: number;
                    _tintRGB: number;
                    _transformID: number;
                    _transformTrimmedID: number;
                    _width: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    blendMode: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    localStyleID: number;
                    renderId: number;
                    resolution: number;
                    rotation: number;
                    tabIndex: number;
                    tint: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    _font: string;
                    _text: string;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    pluginName: string;
                    text: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    _styleListener: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    vertexTrimmedData: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _generateFillStyle(e: any, r: any, i: any): any;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _onAnchorUpdate(): void;
                    _onTextureUpdate(): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    calculateTrimmedVertices(): any;
                    calculateVertices(): void;
                    containerUpdateTransform(): void;
                    containsPoint(t: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    drawLetterSpacing(t: any, e: any, r: any, i: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateText(t: any): void;
                    updateTexture(): void;
                    updateTransform(): void;
                    canvas: HTMLCanvasElement;
                    context: CanvasRenderingContext2D;
                    indices: Uint16Array;
                    uvs: Float32Array;
                    vertexData: Float32Array;
                    _anchor: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"];
                    };
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _style: {
                        _breakWords: boolean;
                        _dropShadow: boolean;
                        _trim: boolean;
                        _wordWrap: boolean;
                        breakWords: boolean;
                        dropShadow: boolean;
                        trim: boolean;
                        wordWrap: boolean;
                        _dropShadowAlpha: number;
                        _dropShadowAngle: number;
                        _dropShadowBlur: number;
                        _dropShadowDistance: number;
                        _fillGradientType: number;
                        _fontSize: number;
                        _leading: number;
                        _letterSpacing: number;
                        _lineHeight: number;
                        _miterLimit: number;
                        _padding: number;
                        _strokeThickness: number;
                        _wordWrapWidth: number;
                        dropShadowAlpha: number;
                        dropShadowAngle: number;
                        dropShadowBlur: number;
                        dropShadowDistance: number;
                        fillGradientType: number;
                        fontSize: number;
                        leading: number;
                        letterSpacing: number;
                        lineHeight: number;
                        miterLimit: number;
                        padding: number;
                        strokeThickness: number;
                        styleID: number;
                        wordWrapWidth: number;
                        _align: string;
                        _dropShadowColor: string;
                        _fill: string;
                        _fontFamily: string;
                        _fontStyle: string;
                        _fontVariant: string;
                        _fontWeight: string;
                        _lineJoin: string;
                        _stroke: string;
                        _textBaseline: string;
                        _whiteSpace: string;
                        align: string;
                        dropShadowColor: string;
                        fill: string;
                        fontFamily: string;
                        fontStyle: string;
                        fontVariant: string;
                        fontWeight: string;
                        lineJoin: string;
                        stroke: string;
                        textBaseline: string;
                        whiteSpace: string;
                        clone(): any;
                        reset(): void;
                        toFontString(): any;
                        _fillGradientStops: never[];
                        fillGradientStops: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_style"]["_fillGradientStops"];
                    };
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _texture: {
                        noFrame: boolean;
                        valid: boolean;
                        _eventsCount: number;
                        _rotate: number;
                        _updateID: number;
                        height: number;
                        resolution: number;
                        rotate: number;
                        width: number;
                        uvMatrix: null;
                        addListener(t: any, e: any, r: any): any;
                        castToBaseTexture(): any;
                        clone(): any;
                        destroy(t: any): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        eventNames(): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        onBaseTextureUpdated(t: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        update(): void;
                        updateUvs(): void;
                        _events: {};
                        _frame: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        _uvs: {
                            x0: number;
                            x1: number;
                            x2: number;
                            x3: number;
                            y0: number;
                            y1: number;
                            y2: number;
                            y3: number;
                            set(t: any, e: any, r: any): void;
                            uvsFloat32: Float32Array;
                        };
                        baseTexture: {
                            destroyed: boolean;
                            isPowerOfTwo: boolean;
                            valid: boolean;
                            _batchEnabled: number;
                            _batchLocation: number;
                            _eventsCount: number;
                            _mipmap: number;
                            _scaleMode: number;
                            _wrapMode: number;
                            alphaMode: number;
                            anisotropicLevel: number;
                            dirtyId: number;
                            dirtyStyleId: number;
                            format: number;
                            height: number;
                            mipmap: number;
                            realHeight: number;
                            realWidth: number;
                            resolution: number;
                            scaleMode: number;
                            target: number;
                            touched: number;
                            type: number;
                            uid: number;
                            width: number;
                            wrapMode: number;
                            cacheId: string;
                            parentTextureArray: null;
                            _refreshPOT(): void;
                            addListener(t: any, e: any, r: any): any;
                            castToBaseTexture(): any;
                            destroy(): void;
                            dispose(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            eventNames(): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            onError(t: any): void;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setRealSize(t: any, e: any, r: any): any;
                            setResolution(t: any): any;
                            setResource(t: any): any;
                            setSize(t: any, e: any, r: any): any;
                            setStyle(t: any, e: any): any;
                            update(): void;
                            _events: any /* too deep */;
                            _glTextures: any /* too deep */;
                            resource: any /* too deep */;
                            textureCacheIds: any /* too deep */;
                        };
                        defaultAnchor: {
                            x: number;
                            y: number;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                        };
                        frame: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_texture"]["_frame"];
                        orig: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                        textureCacheIds: never[];
                        trim: {
                            bottom: number;
                            height: number;
                            left: number;
                            right: number;
                            top: number;
                            type: number;
                            width: number;
                            x: number;
                            y: number;
                            ceil(t: any, e: any): any;
                            clone(): any;
                            contains(t: any, e: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            enlarge(t: any): any;
                            fit(t: any): any;
                            pad(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    anchor: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_anchor"];
                    children: never[];
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    parent: Player["_playerContainer"]["nameText"]["gameObject"]["_legacyTransform"]["_group"];
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["localTransform"];
                            pivot: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["pivot"]["scope"];
                    };
                    style: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_style"];
                    tempDisplayObjectParent: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_tempDisplayObjectParent"];
                    texture: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_texture"];
                    trackedPointers: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _textBounds: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _textSize: {
                    _halfHeight: number;
                    _halfWidth: number;
                    _height: number;
                    _width: number;
                    height: number;
                    width: number;
                    copyFrom(c: any): void;
                    getHalfHeight(): any;
                    getHalfWidth(): any;
                    isNearlyEqual(c: any, u: any): any;
                    isNearlyEqualToValues(c: any, u: any, h: any): any;
                    setTo(c: any, u: any): void;
                };
                _underlines: never[];
                gameObject: Player["_playerContainer"]["nameText"]["gameObject"];
                GameObject: Player["_playerContainer"]["nameText"]["gameObject"];
                onActiveChanged: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                OnActiveChanged: Player["_playerContainer"]["nameText"]["textObject"]["onActiveChanged"];
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                OnDestroy: Player["_playerContainer"]["nameText"]["textObject"]["onDestroy"];
                onRootContainerSet: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                Source: {
                    source: string;
                    cleanUp(): void;
                    getText(): any;
                    setText(c: any): void;
                    onTextChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: any /* too deep */[];
                    };
                    OnTextChanged: Player["_playerContainer"]["nameText"]["textObject"]["Source"]["onTextChanged"];
                };
                textObject: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"];
                TextObject: Player["_playerContainer"]["nameText"]["textObject"]["_rootContainer"];
                textSource: Player["_playerContainer"]["nameText"]["textObject"]["Source"];
            };
            TextObject: Player["_playerContainer"]["nameText"]["textObject"];
            textSource: Player["_playerContainer"]["nameText"]["Source"];
        };
        neck: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            frameName: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            vertexTrimmedData: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            key: undefined;
            onTextureLoaded: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["neck"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                multisample: number;
                resolution: number;
                rotate: number;
                width: number;
                filterFrame: null;
                filterPoolKey: null;
                uvMatrix: null;
                trim: undefined;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                resize(t: any, e: any, r: any): void;
                setResolution(t: any): void;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: {
                    destroyed: boolean;
                    isPowerOfTwo: boolean;
                    valid: boolean;
                    _batchEnabled: number;
                    _batchLocation: number;
                    _eventsCount: number;
                    _mipmap: number;
                    _scaleMode: number;
                    _wrapMode: number;
                    alphaMode: number;
                    anisotropicLevel: number;
                    dirtyId: number;
                    dirtyStyleId: number;
                    format: number;
                    height: number;
                    mipmap: number;
                    realHeight: number;
                    realWidth: number;
                    resolution: number;
                    scaleMode: number;
                    target: number;
                    touched: number;
                    type: number;
                    uid: number;
                    width: number;
                    wrapMode: number;
                    cacheId: null;
                    parentTextureArray: null;
                    resource: null;
                    _refreshPOT(): void;
                    addListener(t: any, e: any, r: any): any;
                    castToBaseTexture(): any;
                    destroy(): void;
                    dispose(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onError(t: any): void;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    resize(t: any, e: any): void;
                    setRealSize(t: any, e: any, r: any): any;
                    setResolution(t: any): any;
                    setResource(t: any): any;
                    setSize(t: any, e: any, r: any): any;
                    setStyle(t: any, e: any): any;
                    update(): void;
                    _events: {
                        dispose: {
                            once: boolean;
                            fn(t: any, e: any): void;
                            context: Player["_playerContainer"]["_game"]["_app"]["renderer"]["texture"];
                        };
                        update: {
                            once: boolean;
                            fn(t: any): any;
                            context: Player["_playerContainer"]["neck"]["_texture"];
                        };
                    };
                    _glTextures: {
                        "1": {
                            mipmap: boolean;
                            dirtyId: number;
                            dirtyStyleId: number;
                            height: number;
                            internalFormat: number;
                            samplerType: number;
                            type: number;
                            width: number;
                            wrapMode: number;
                            texture: WebGLTexture;
                        };
                    };
                    clearColor: number[];
                    filterStack: any /* too deep */[];
                    framebuffer: {
                        depth: boolean;
                        stencil: boolean;
                        dirtyFormat: number;
                        dirtyId: number;
                        dirtySize: number;
                        height: number;
                        multisample: number;
                        width: number;
                        depthTexture: null;
                        addColorTexture(e: any, r: any): any;
                        addDepthTexture(e: any): any;
                        destroyDepthTexture(): void;
                        dispose(): void;
                        enableDepth(): any;
                        enableStencil(): any;
                        resize(t: any, e: any): void;
                        colorTexture: Player["_playerContainer"]["neck"]["_texture"]["baseTexture"];
                        colorTextures: Player["_playerContainer"]["neck"]["_texture"]["baseTexture"][];
                        disposeRunner: {
                            empty: boolean;
                            _aliasCount: number;
                            _name: string;
                            name: string;
                            add(t: any): any;
                            contains(t: any): any;
                            destroy(): void;
                            dispatch(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            emit(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            ensureNonAliasedItems(): void;
                            remove(t: any): any;
                            removeAll(): any;
                            run(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any): any;
                            items: any /* too deep */;
                        };
                        glFramebuffers: {
                            "1": any /* too deep */;
                        };
                    };
                    maskStack: never[];
                    textureCacheIds: never[];
                };
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["neck"]["_texture"]["_frame"];
                framebuffer: Player["_playerContainer"]["neck"]["_texture"]["baseTexture"]["framebuffer"];
                orig: Player["_playerContainer"]["neck"]["_texture"]["_frame"];
                textureCacheIds: never[];
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["neck"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: null;
                frameName: null;
                name: null;
                frameData: undefined;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onLoaded: Player["_playerContainer"]["neck"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["neck"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["neck"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["neck"]["localTransform"];
                    pivot: Player["_playerContainer"]["neck"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["neck"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["neck"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["neck"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["neck"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["neck"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["neck"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["neck"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["neck"]["_texture"];
            trackedPointers: Player["_playerContainer"]["neck"]["_trackedPointers"];
            transform: Player["_playerContainer"]["neck"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["neck"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["neck"]["pivot"]["scope"]["worldTransform"];
        };
        onDestroy: {
            _shouldPropagate: boolean;
            active: boolean;
            add(c: any, u: any, h: any): any;
            addBinding(c: any, u: any, h: any, a: any, l: any): any;
            addOnce(c: any, u: any, h: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(c: any, u: any): any;
            indexOfListener(c: any, u: any): any;
            remove(c: any, u: any): void;
            removeAll(c: any): void;
            removeAtIndex(c: any): void;
            toString(): any;
            validateListener(c: any, u: any): void;
            _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _listener(): void; destroy(): void; execute(c: any): any; isBound(): any; listener(): void; toString(): any; _args: never[]; _context: Player["_playerContainer"]; context: Player["_playerContainer"]; }[];
        };
        OnLoad: Player["_playerContainer"]["_onLoad"];
        onPathFound: {
            _shouldPropagate: boolean;
            active: boolean;
            add(c: any, u: any, h: any): any;
            addBinding(c: any, u: any, h: any, a: any, l: any): any;
            addOnce(c: any, u: any, h: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(c: any, u: any): any;
            indexOfListener(c: any, u: any): any;
            remove(c: any, u: any): void;
            removeAll(c: any): void;
            removeAtIndex(c: any): void;
            toString(): any;
            validateListener(c: any, u: any): void;
            _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _listener(c: any): void; destroy(): void; execute(c: any): any; isBound(): any; listener(c: any): void; toString(): any; _args: never[]; _context: Player["_playerContainer"]["follow"]["followController"]; context: Player["_playerContainer"]["follow"]["followController"]; }[];
        };
        onStand: {
            _shouldPropagate: boolean;
            active: boolean;
            add(c: any, u: any, h: any): any;
            addBinding(c: any, u: any, h: any, a: any, l: any): any;
            addOnce(c: any, u: any, h: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(c: any, u: any): any;
            indexOfListener(c: any, u: any): any;
            remove(c: any, u: any): void;
            removeAll(c: any): void;
            removeAtIndex(c: any): void;
            toString(): any;
            validateListener(c: any, u: any): void;
            _bindings: never[];
        };
        onStopped: {
            _shouldPropagate: boolean;
            active: boolean;
            add(c: any, u: any, h: any): any;
            addBinding(c: any, u: any, h: any, a: any, l: any): any;
            addOnce(c: any, u: any, h: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(c: any, u: any): any;
            indexOfListener(c: any, u: any): any;
            remove(c: any, u: any): void;
            removeAll(c: any): void;
            removeAtIndex(c: any): void;
            toString(): any;
            validateListener(c: any, u: any): void;
            _bindings: { active: boolean; isOnce: boolean; _callCount: number; callCount: number; priority: number; _listener(): void; destroy(): void; execute(c: any): any; isBound(): any; listener(): void; toString(): any; _args: never[]; _context: Player["_playerContainer"]["follow"]["followController"]; context: Player["_playerContainer"]["follow"]["followController"]; }[];
        };
        onTransformTimerCreate: {
            _shouldPropagate: boolean;
            active: boolean;
            add(c: any, u: any, h: any): any;
            addBinding(c: any, u: any, h: any, a: any, l: any): any;
            addOnce(c: any, u: any, h: any): any;
            dispatch(): void;
            dispose(): void;
            getBindingsCount(): any;
            halt(): void;
            has(c: any, u: any): any;
            indexOfListener(c: any, u: any): any;
            remove(c: any, u: any): void;
            removeAll(c: any): void;
            removeAtIndex(c: any): void;
            toString(): any;
            validateListener(c: any, u: any): void;
            _bindings: never[];
        };
        OnTransformTimerCreate: Player["_playerContainer"]["onTransformTimerCreate"];
        outfitMetadata: {
            v: number;
            type: string;
            leftArm: {
                x: number;
                y: number;
                handIK: {
                    x: number;
                    y: number;
                };
                pivot: {
                    x: number;
                    y: number;
                };
            };
            legs: {
                x: number;
                y: number;
                pivot: {
                    x: number;
                    y: number;
                };
            };
            rightArm: {
                x: number;
                y: number;
                pivot: {
                    x: number;
                    y: number;
                };
            };
            shirt: {
                x: number;
                y: number;
                pivot: {
                    x: number;
                    y: number;
                };
            };
        };
        parent: Player["_playerContainer"]["_game"]["_state"]["_current"]["content"];
        pivot: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"]["pivot"];
        playerDataSchema: {
            allowsHouseVisitors: boolean;
            battleCounter: number;
            bountyScore: number;
            daysToConvert: number;
            energy: number;
            gold: number;
            grade: number;
            hp: number;
            level: number;
            loss: number;
            membershipVideoTimeStamp: number;
            memberStarsExpirationDate: number;
            nm: number;
            numSpins1: number;
            spinDate1: number;
            stars: number;
            startDate: number;
            storedMemberStars: number;
            team: number;
            tower: number;
            versionID: number;
            win: number;
            wwCooldownTime: number;
            previousZone: string;
            school: string;
            zone: string;
            segmentPurchaseFunnel: undefined;
            academyTowersFunnelsData: { stepIndex: number; stepOrdinalValue: number; funnelName: string; }[];
            daily: {
                isComplete: boolean;
                viewedProgressMenu: boolean;
                lastStarted: number;
                monsterID: number;
                progressPoints: number;
                seenProgressPoints: number;
                festivalName: string;
                location: string;
            };
            playerTitanData: {
                seenTitanBattleProgress: number;
                titanBattleProgress: number;
                titanID: number;
            };
            settings: {
                bgmVolume: number;
                sfxVolume: number;
                voiceVolume: number;
            };
            spellbook: number[];
            ultimatesFTUEFunnelData: { stepIndex: number; stepOrdinalValue: number; funnelName: string; }[];
        };
        position: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"];
        rightArm: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["rightArm"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: Player["_playerContainer"]["leftArm"]["_texture"]["baseTexture"];
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["rightArm"]["_texture"]["_frame"];
                orig: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                textureCacheIds: never[];
                trim: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["rightArm"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: number;
                frameTotal: number;
                frameName: string;
                name: null;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _frameData: Player["_playerContainer"]["leftArm"]["animations"]["_frameData"];
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                currentFrame: {
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    distance: number;
                    height: number;
                    index: number;
                    left: number;
                    right: number;
                    sourceSizeH: number;
                    sourceSizeW: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    name: string;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    getRect(c: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): void;
                    setTrim(c: any, u: any, h: any, a: any, f: any, l: any, b: any): void;
                };
                frameData: Player["_playerContainer"]["leftArm"]["animations"]["_frameData"];
                onLoaded: Player["_playerContainer"]["rightArm"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["rightArm"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["rightArm"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["rightArm"]["localTransform"];
                    pivot: Player["_playerContainer"]["rightArm"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["rightArm"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["rightArm"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["rightArm"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["rightArm"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["rightArm"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["rightArm"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["rightArm"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["rightArm"]["_texture"];
            trackedPointers: Player["_playerContainer"]["rightArm"]["_trackedPointers"];
            transform: Player["_playerContainer"]["rightArm"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["rightArm"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["rightArm"]["pivot"]["scope"]["worldTransform"];
        };
        scale: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"]["scale"];
        shirt: {
            _accessibleActive: boolean;
            _cacheAsBitmap: boolean;
            _destroyed: boolean;
            _roundPixels: boolean;
            accessible: boolean;
            accessibleChildren: boolean;
            buttonMode: boolean;
            cacheAsBitmap: boolean;
            destroyed: boolean;
            exists: boolean;
            fixedToCamera: boolean;
            inputEnabled: boolean;
            interactive: boolean;
            interactiveChildren: boolean;
            isLoaded: boolean;
            isMask: boolean;
            isSprite: boolean;
            pendingDestroy: boolean;
            renderable: boolean;
            roundPixels: boolean;
            smoothed: boolean;
            sortableChildren: boolean;
            sortDirty: boolean;
            visible: boolean;
            worldVisible: boolean;
            _boundsID: number;
            _cacheAsBitmapMultisample: number;
            _cachedTint: number;
            _eventsCount: number;
            _height: number;
            _lastSortedIndex: number;
            _textureID: number;
            _textureTrimmedID: number;
            _tint: number;
            _tintRGB: number;
            _transformID: number;
            _transformTrimmedID: number;
            _width: number;
            _zIndex: number;
            alpha: number;
            angle: number;
            blendMode: number;
            bottom: number;
            cacheAsBitmapMultisample: number;
            centerX: number;
            centerY: number;
            height: number;
            left: number;
            renderId: number;
            right: number;
            rotation: number;
            tabIndex: number;
            tint: number;
            top: number;
            width: number;
            worldAlpha: number;
            worldRotation: number;
            x: number;
            y: number;
            z: number;
            zIndex: number;
            accessiblePointerEvents: string;
            accessibleType: string;
            frameName: string;
            key: string;
            pluginName: string;
            _accessibleDiv: null;
            _boundsRect: null;
            _cacheAsBitmapResolution: null;
            _cacheData: null;
            _enabledFilters: null;
            _localBounds: null;
            _mask: null;
            accessibleHint: null;
            accessibleTitle: null;
            cacheAsBitmapResolution: null;
            cursor: null;
            filterArea: null;
            filters: null;
            hitArea: null;
            loadingTween: null;
            mask: null;
            name: null;
            scaleMax: null;
            scaleMin: null;
            transformCallbackContext: null;
            forcedHeight: undefined;
            forcedWidth: undefined;
            frame: undefined;
            _cacheAsBitmapDestroy(t: any): void;
            _calculateBounds(): void;
            _calculateCachedBounds(): void;
            _destroyCachedDisplayObject(): void;
            _getCachedLocalBounds(): any;
            _initCachedDisplayObject(t: any): void;
            _initCachedDisplayObjectCanvas(t: any): void;
            _onAnchorUpdate(): void;
            _onTextureUpdate(): void;
            _recursivePostUpdateTransform(): void;
            _render(t: any): void;
            _renderCached(t: any): void;
            _renderCachedCanvas(t: any): void;
            addChild(): any;
            addChildAt(t: any, e: any): any;
            addListener(t: any, e: any, r: any): any;
            bringChildToTop(c: any): void;
            calculateBounds(): void;
            calculateTrimmedVertices(): any;
            calculateVertices(): void;
            checkCallback(): void;
            checkSpriteDimension(): void;
            containerUpdateTransform(): void;
            containsPoint(t: any): any;
            destroy(): void;
            disableTempParent(t: any): void;
            displayObjectUpdateTransform(): void;
            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
            enableTempParent(): any;
            eventNames(): any;
            getBounds(t: any, e: any): any;
            getChildAt(t: any): any;
            getChildByName(t: any, e: any): any;
            getChildIndex(t: any): any;
            getGlobalPosition(t: any, e: any): any;
            getLocalBounds(t: any): any;
            getOffsetX(): any;
            getOffsetY(): any;
            listenerCount(t: any): any;
            listeners(t: any): any;
            loadNewTexture(c: any, u: any, h: any, a: any): void;
            loadTexture(c: any, u: any): void;
            off(t: any, e: any, i: any, n: any): any;
            on(t: any, e: any, r: any): any;
            once(t: any, e: any, r: any): any;
            onChildrenChange(t: any): void;
            onSourceAssetLoaded(c: any, u: any, h: any, a: any, l: any): void;
            onTextureLoaded(arg0: any): void;
            removeAllListeners(t: any): any;
            removeChild(): any;
            removeChildAt(t: any): any;
            removeChildren(t: any, e: any): any;
            removeListener(t: any, e: any, i: any, n: any): any;
            render(t: any): void;
            renderAdvanced(t: any): void;
            rotateMiddleBased(c: any): void;
            sendChildToBack(c: any): void;
            setActive(c: any): void;
            setChildIndex(t: any, e: any): void;
            setFrame(c: any): void;
            setParent(t: any): any;
            setTexture(c: any, u: any): void;
            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
            sortChildren(): void;
            swapChildren(t: any, e: any): void;
            toGlobal(t: any, e: any, r: any): any;
            toLocal(t: any, e: any, r: any, i: any): any;
            update(): void;
            updateFrame(u: any): void;
            updateTexture(c: any): void;
            updateTransform(): void;
            indices: Uint16Array;
            uvs: Float32Array;
            vertexData: Float32Array;
            vertexTrimmedData: Float32Array;
            _anchor: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: Player["_playerContainer"]["shirt"];
            };
            _bounds: {
                maxX: number;
                maxY: number;
                minX: number;
                minY: number;
                updateID: number;
                rect: null;
                addBounds(t: any): void;
                addBoundsArea(t: any, e: any): void;
                addBoundsMask(t: any, e: any): void;
                addBoundsMatrix(t: any, e: any): void;
                addFrame(t: any, e: any, r: any, i: any, n: any): void;
                addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                addPoint(t: any): void;
                addPointMatrix(t: any, e: any): void;
                addQuad(t: any): void;
                addVertexData(t: any, e: any, r: any): void;
                addVertices(t: any, e: any, r: any, i: any): void;
                addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                clear(): void;
                getRectangle(t: any): any;
                isEmpty(): any;
                pad(t: any, e: any): void;
            };
            _events: {};
            _localBoundsRect: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            _tempDisplayObjectParent: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                accessiblePointerEvents: string;
                accessibleType: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                name: null;
                parent: null;
                sortDirty: null;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addListener(t: any, e: any, r: any): any;
                destroy(t: any): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(t: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                updateTransform(): void;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: {
                        maxX: number;
                        maxY: number;
                        minX: number;
                        minY: number;
                        updateID: number;
                        rect: null;
                        addBounds(t: any): void;
                        addBoundsArea(t: any, e: any): void;
                        addBoundsMask(t: any, e: any): void;
                        addBoundsMatrix(t: any, e: any): void;
                        addFrame(t: any, e: any, r: any, i: any, n: any): void;
                        addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                        addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        addPoint(t: any): void;
                        addPointMatrix(t: any, e: any): void;
                        addQuad(t: any): void;
                        addVertexData(t: any, e: any, r: any): void;
                        addVertices(t: any, e: any, r: any, i: any): void;
                        addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                        clear(): void;
                        getRectangle(t: any): any;
                        isEmpty(): any;
                        pad(t: any, e: any): void;
                    };
                    _events: {};
                    _tempDisplayObjectParent: {
                        _accessibleActive: boolean;
                        _cacheAsBitmap: boolean;
                        _destroyed: boolean;
                        accessible: boolean;
                        accessibleChildren: boolean;
                        buttonMode: boolean;
                        cacheAsBitmap: boolean;
                        destroyed: boolean;
                        interactive: boolean;
                        interactiveChildren: boolean;
                        isMask: boolean;
                        isSprite: boolean;
                        renderable: boolean;
                        visible: boolean;
                        worldVisible: boolean;
                        _boundsID: number;
                        _cacheAsBitmapMultisample: number;
                        _eventsCount: number;
                        _lastSortedIndex: number;
                        _zIndex: number;
                        alpha: number;
                        angle: number;
                        cacheAsBitmapMultisample: number;
                        renderId: number;
                        rotation: number;
                        tabIndex: number;
                        worldAlpha: number;
                        x: number;
                        y: number;
                        zIndex: number;
                        accessiblePointerEvents: string;
                        accessibleType: string;
                        _accessibleDiv: null;
                        _boundsRect: null;
                        _cacheAsBitmapResolution: null;
                        _cacheData: null;
                        _enabledFilters: null;
                        _localBounds: null;
                        _localBoundsRect: null;
                        _mask: null;
                        accessibleHint: null;
                        accessibleTitle: null;
                        cacheAsBitmapResolution: null;
                        cursor: null;
                        filterArea: null;
                        filters: null;
                        hitArea: null;
                        mask: null;
                        name: null;
                        parent: null;
                        sortDirty: null;
                        _cacheAsBitmapDestroy(t: any): void;
                        _calculateCachedBounds(): void;
                        _destroyCachedDisplayObject(): void;
                        _getCachedLocalBounds(): any;
                        _initCachedDisplayObject(t: any): void;
                        _initCachedDisplayObjectCanvas(t: any): void;
                        _recursivePostUpdateTransform(): void;
                        _renderCached(t: any): void;
                        _renderCachedCanvas(t: any): void;
                        addListener(t: any, e: any, r: any): any;
                        destroy(t: any): void;
                        disableTempParent(t: any): void;
                        displayObjectUpdateTransform(): void;
                        emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                        enableTempParent(): any;
                        eventNames(): any;
                        getBounds(t: any, e: any): any;
                        getGlobalPosition(t: any, e: any): any;
                        getLocalBounds(t: any): any;
                        listenerCount(t: any): any;
                        listeners(t: any): any;
                        off(t: any, e: any, i: any, n: any): any;
                        on(t: any, e: any, r: any): any;
                        once(t: any, e: any, r: any): any;
                        removeAllListeners(t: any): any;
                        removeListener(t: any, e: any, i: any, n: any): any;
                        setParent(t: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toGlobal(t: any, e: any, r: any): any;
                        toLocal(t: any, e: any, r: any, i: any): any;
                        updateTransform(): void;
                        _bounds: {
                            maxX: number;
                            maxY: number;
                            minX: number;
                            minY: number;
                            updateID: number;
                            rect: null;
                            addBounds(t: any): void;
                            addBoundsArea(t: any, e: any): void;
                            addBoundsMask(t: any, e: any): void;
                            addBoundsMatrix(t: any, e: any): void;
                            addFrame(t: any, e: any, r: any, i: any, n: any): void;
                            addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                            addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            addPoint(t: any): void;
                            addPointMatrix(t: any, e: any): void;
                            addQuad(t: any): void;
                            addVertexData(t: any, e: any, r: any): void;
                            addVertices(t: any, e: any, r: any, i: any): void;
                            addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                            clear(): void;
                            getRectangle(t: any): any;
                            isEmpty(): any;
                            pad(t: any, e: any): void;
                        };
                        _events: {};
                        _tempDisplayObjectParent: {
                            _accessibleActive: boolean;
                            _cacheAsBitmap: boolean;
                            _destroyed: boolean;
                            accessible: boolean;
                            accessibleChildren: boolean;
                            buttonMode: boolean;
                            cacheAsBitmap: boolean;
                            destroyed: boolean;
                            interactive: boolean;
                            interactiveChildren: boolean;
                            isMask: boolean;
                            isSprite: boolean;
                            renderable: boolean;
                            visible: boolean;
                            worldVisible: boolean;
                            _boundsID: number;
                            _cacheAsBitmapMultisample: number;
                            _eventsCount: number;
                            _lastSortedIndex: number;
                            _zIndex: number;
                            alpha: number;
                            angle: number;
                            cacheAsBitmapMultisample: number;
                            renderId: number;
                            rotation: number;
                            tabIndex: number;
                            worldAlpha: number;
                            x: number;
                            y: number;
                            zIndex: number;
                            accessiblePointerEvents: string;
                            accessibleType: string;
                            _accessibleDiv: null;
                            _boundsRect: null;
                            _cacheAsBitmapResolution: null;
                            _cacheData: null;
                            _enabledFilters: null;
                            _localBounds: null;
                            _localBoundsRect: null;
                            _mask: null;
                            accessibleHint: null;
                            accessibleTitle: null;
                            cacheAsBitmapResolution: null;
                            cursor: null;
                            filterArea: null;
                            filters: null;
                            hitArea: null;
                            mask: null;
                            name: null;
                            parent: null;
                            sortDirty: null;
                            _cacheAsBitmapDestroy(t: any): void;
                            _calculateCachedBounds(): void;
                            _destroyCachedDisplayObject(): void;
                            _getCachedLocalBounds(): any;
                            _initCachedDisplayObject(t: any): void;
                            _initCachedDisplayObjectCanvas(t: any): void;
                            _recursivePostUpdateTransform(): void;
                            _renderCached(t: any): void;
                            _renderCachedCanvas(t: any): void;
                            addListener(t: any, e: any, r: any): any;
                            destroy(t: any): void;
                            disableTempParent(t: any): void;
                            displayObjectUpdateTransform(): void;
                            emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                            enableTempParent(): any;
                            eventNames(): any;
                            getBounds(t: any, e: any): any;
                            getGlobalPosition(t: any, e: any): any;
                            getLocalBounds(t: any): any;
                            listenerCount(t: any): any;
                            listeners(t: any): any;
                            off(t: any, e: any, i: any, n: any): any;
                            on(t: any, e: any, r: any): any;
                            once(t: any, e: any, r: any): any;
                            removeAllListeners(t: any): any;
                            removeListener(t: any, e: any, i: any, n: any): any;
                            setParent(t: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toGlobal(t: any, e: any, r: any): any;
                            toLocal(t: any, e: any, r: any, i: any): any;
                            updateTransform(): void;
                            _bounds: any /* too deep */;
                            _events: any /* too deep */;
                            _tempDisplayObjectParent: any /* too deep */;
                            _trackedPointers: any /* too deep */;
                            localTransform: any /* too deep */;
                            pivot: any /* too deep */;
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            tempDisplayObjectParent: any /* too deep */;
                            trackedPointers: any /* too deep */;
                            transform: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                        _trackedPointers: {};
                        localTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                        pivot: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: any /* too deep */;
                        };
                        tempDisplayObjectParent: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                        trackedPointers: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                        transform: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
                            scale: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
                            skew: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
                            worldTransform: any /* too deep */;
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                    _trackedPointers: {};
                    localTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                    pivot: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: {
                            _currentLocalID: number;
                            _cx: number;
                            _cy: number;
                            _localID: number;
                            _parentID: number;
                            _rotation: number;
                            _sx: number;
                            _sy: number;
                            _worldID: number;
                            rotation: number;
                            onChange(): void;
                            setFromMatrix(t: any): void;
                            updateLocalTransform(): void;
                            updateSkew(): void;
                            updateTransform(t: any): void;
                            localTransform: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
                            pivot: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
                            position: any /* too deep */;
                            scale: any /* too deep */;
                            skew: any /* too deep */;
                            worldTransform: any /* too deep */;
                        };
                    };
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    };
                    tempDisplayObjectParent: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                    trackedPointers: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
                    transform: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
                _trackedPointers: {};
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: {
                        _currentLocalID: number;
                        _cx: number;
                        _cy: number;
                        _localID: number;
                        _parentID: number;
                        _rotation: number;
                        _sx: number;
                        _sy: number;
                        _worldID: number;
                        rotation: number;
                        onChange(): void;
                        setFromMatrix(t: any): void;
                        updateLocalTransform(): void;
                        updateSkew(): void;
                        updateTransform(t: any): void;
                        localTransform: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["localTransform"];
                        pivot: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"];
                        position: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        scale: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        skew: {
                            _x: number;
                            _y: number;
                            x: number;
                            y: number;
                            cb(): void;
                            clone(e: any, r: any): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            equals(t: any): any;
                            set(t: any, e: any): any;
                            scope: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                        };
                        worldTransform: {
                            a: number;
                            b: number;
                            c: number;
                            d: number;
                            tx: number;
                            ty: number;
                            array: null;
                            append(t: any): any;
                            apply(t: any, e: any): any;
                            applyInverse(t: any, e: any): any;
                            clone(): any;
                            copyFrom(t: any): any;
                            copyTo(t: any): any;
                            decompose(t: any): any;
                            fromArray(t: any): void;
                            identity(): any;
                            invert(): any;
                            prepend(t: any): any;
                            rotate(t: any): any;
                            scale(t: any, e: any): any;
                            set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                            setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                            toArray(t: any, e: any): any;
                            translate(t: any, e: any): any;
                        };
                    };
                };
                position: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"]["scope"]["position"];
                scale: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"]["scope"]["scale"];
                skew: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"]["scope"]["skew"];
                tempDisplayObjectParent: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
                trackedPointers: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["_trackedPointers"];
                transform: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"]["scope"];
                worldTransform: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"]["pivot"]["scope"]["worldTransform"];
            };
            _texture: {
                noFrame: boolean;
                valid: boolean;
                _eventsCount: number;
                _rotate: number;
                _updateID: number;
                height: number;
                resolution: number;
                rotate: number;
                width: number;
                uvMatrix: null;
                addListener(t: any, e: any, r: any): any;
                castToBaseTexture(): any;
                clone(): any;
                destroy(t: any): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                eventNames(): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                onBaseTextureUpdated(t: any): any;
                once(t: any, e: any, r: any): any;
                removeAllListeners(t: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                update(): void;
                updateUvs(): void;
                _events: {};
                _frame: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                _uvs: {
                    x0: number;
                    x1: number;
                    x2: number;
                    x3: number;
                    y0: number;
                    y1: number;
                    y2: number;
                    y3: number;
                    set(t: any, e: any, r: any): void;
                    uvsFloat32: Float32Array;
                };
                baseTexture: Player["_playerContainer"]["leftArm"]["_texture"]["baseTexture"];
                defaultAnchor: {
                    x: number;
                    y: number;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                };
                frame: Player["_playerContainer"]["shirt"]["_texture"]["_frame"];
                orig: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                textureCacheIds: never[];
                trim: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
            };
            _trackedPointers: {};
            anchor: Player["_playerContainer"]["shirt"]["_anchor"];
            animations: {
                isLoaded: boolean;
                updateIfVisible: boolean;
                frame: number;
                frameTotal: number;
                frameName: string;
                name: null;
                add(c: any, u: any, h: any, a: any, l: any): any;
                addIfFound(c: any, u: any, h: any, a: any): any;
                copyFrameData(c: any, u: any): any;
                destroy(): void;
                getAnimation(c: any): any;
                loadFrameData(c: any, u: any): any;
                next(c: any): void;
                onFrameLoaded(c: any): void;
                play(c: any, u: any, h: any): any;
                previous(c: any): void;
                stop(c: any, u: any): void;
                update(): any;
                validateFrames(c: any, u: any): any;
                _animations: Map<never, never>;
                _frameData: Player["_playerContainer"]["leftArm"]["animations"]["_frameData"];
                _onLoaded: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                currentFrame: {
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    distance: number;
                    height: number;
                    index: number;
                    left: number;
                    right: number;
                    sourceSizeH: number;
                    sourceSizeW: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    name: string;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    getRect(c: any): any;
                    pad(t: any, e: any): any;
                    resize(c: any, u: any): void;
                    setTrim(c: any, u: any, h: any, a: any, f: any, l: any, b: any): void;
                };
                frameData: Player["_playerContainer"]["leftArm"]["animations"]["_frameData"];
                onLoaded: Player["_playerContainer"]["shirt"]["animations"]["_onLoaded"];
                sprite: Player["_playerContainer"]["shirt"];
            };
            bounds: {
                bottom: number;
                height: number;
                left: number;
                right: number;
                top: number;
                type: number;
                width: number;
                x: number;
                y: number;
                ceil(t: any, e: any): any;
                clone(): any;
                contains(t: any, e: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                enlarge(t: any): any;
                fit(t: any): any;
                pad(t: any, e: any): any;
            };
            cameraOffset: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            children: never[];
            events: {
                destroy(): void;
                onAddedToGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationLoop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onAnimationStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragStop: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onDragUpdate: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onEnterBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOut: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputOver: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onInputUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onOutOfBounds: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromGroup: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                onRemovedFromWorld: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: never[];
                };
                parent: Player["_playerContainer"]["shirt"];
            };
            game: Player["_playerContainer"]["_game"];
            localTransform: {
                a: number;
                b: number;
                c: number;
                d: number;
                tx: number;
                ty: number;
                array: null;
                append(t: any): any;
                apply(t: any, e: any): any;
                applyInverse(t: any, e: any): any;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                decompose(t: any): any;
                fromArray(t: any): void;
                identity(): any;
                invert(): any;
                prepend(t: any): any;
                rotate(t: any): any;
                scale(t: any, e: any): any;
                set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                toArray(t: any, e: any): any;
                translate(t: any, e: any): any;
            };
            parent: Player["_playerContainer"]["collisionBody"]["parent"];
            pivot: {
                _x: number;
                _y: number;
                x: number;
                y: number;
                cb(): void;
                clone(e: any, r: any): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
                scope: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Player["_playerContainer"]["shirt"]["localTransform"];
                    pivot: Player["_playerContainer"]["shirt"]["pivot"];
                    position: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["shirt"]["pivot"]["scope"];
                    };
                    scale: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["shirt"]["pivot"]["scope"];
                    };
                    skew: {
                        _x: number;
                        _y: number;
                        x: number;
                        y: number;
                        cb(): void;
                        clone(e: any, r: any): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        equals(t: any): any;
                        set(t: any, e: any): any;
                        scope: Player["_playerContainer"]["shirt"]["pivot"]["scope"];
                    };
                    worldTransform: {
                        a: number;
                        b: number;
                        c: number;
                        d: number;
                        tx: number;
                        ty: number;
                        array: null;
                        append(t: any): any;
                        apply(t: any, e: any): any;
                        applyInverse(t: any, e: any): any;
                        clone(): any;
                        copyFrom(t: any): any;
                        copyTo(t: any): any;
                        decompose(t: any): any;
                        fromArray(t: any): void;
                        identity(): any;
                        invert(): any;
                        prepend(t: any): any;
                        rotate(t: any): any;
                        scale(t: any, e: any): any;
                        set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                        setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                        toArray(t: any, e: any): any;
                        translate(t: any, e: any): any;
                    };
                };
            };
            position: Player["_playerContainer"]["shirt"]["pivot"]["scope"]["position"];
            previousPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            scale: Player["_playerContainer"]["shirt"]["pivot"]["scope"]["scale"];
            skew: Player["_playerContainer"]["shirt"]["pivot"]["scope"]["skew"];
            stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
            tempDisplayObjectParent: Player["_playerContainer"]["shirt"]["_tempDisplayObjectParent"];
            texture: Player["_playerContainer"]["shirt"]["_texture"];
            trackedPointers: Player["_playerContainer"]["shirt"]["_trackedPointers"];
            transform: Player["_playerContainer"]["shirt"]["pivot"]["scope"];
            transformCallback: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            world: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldPosition: {
                x: number;
                y: number;
                clone(): any;
                copyFrom(t: any): any;
                copyTo(t: any): any;
                equals(t: any): any;
                set(t: any, e: any): any;
            };
            worldScale: Player["_playerContainer"]["shirt"]["pivot"]["scope"]["scale"];
            worldTransform: Player["_playerContainer"]["shirt"]["pivot"]["scope"]["worldTransform"];
        };
        skew: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"]["skew"];
        source: {
            _isFocusModeEnabled: boolean;
            _saveEnabled: boolean;
            _ultimateSessionStatusLocked: boolean;
            appearanceChanged: boolean;
            earlyBirdLastChance: boolean;
            hasGrade: boolean;
            hasUsedTicket: boolean;
            immortal: boolean;
            inPVP: boolean;
            isClassCodeAttached: boolean;
            isFocusModeEnabled: boolean;
            isOpponent: boolean;
            isTrackingQuestEnabled: boolean;
            isZoneQuestEnabled: boolean;
            justLeveled: boolean;
            memberPrompt: boolean;
            parentalLink: boolean;
            saveEnabled: boolean;
            showHealthBar: boolean;
            tt: boolean;
            tutorialCompletedThisSession: boolean;
            updated: boolean;
            _ultimateSessionStatus: number;
            _ultimateTaskId: number;
            answerStreak: number;
            aoaTier: number;
            broadcastId: number;
            catchAttempt: number;
            grade: number;
            pvpHP: number;
            starsEarned: number;
            starsReward: number;
            starsRewardBase: number;
            starsToProcess: number;
            ultimateSessionStatus: number;
            ultimateTaskId: number;
            userID: number;
            _locationSelectionType: string;
            _ultimateQuestId: string;
            _userDataPlatform: string;
            curriculumTreeID: string;
            locationSelectionType: string;
            parentEmail: string;
            type: string;
            ultimateQuestId: string;
            userDataPlatform: string;
            username: string;
            _goalId: null;
            chatID: null;
            coOpTeam: null;
            currentVideoSkillId: null;
            danceID: null;
            emoteID: null;
            goalId: null;
            lastVisited: null;
            memberShareDate: null;
            primaryParentID: null;
            source: null;
            transformID: null;
            world: null;
            memberEndDate: undefined;
            memberStartDate: undefined;
            team: undefined;
            addAsset(c: any): void;
            addAssets(c: any): void;
            addBattle(): void;
            addBountyScore(c: any): void;
            addLoss(): void;
            addSpell(c: any): void;
            addStars(u: any, h: any, a: any): any;
            addWin(): void;
            anyPetsAboveLevel(c: any): any;
            canCatch(): any;
            canSpin(c: any): any;
            changeCurrentHearts(c: any, u: any): void;
            changeCurrentHeartsPercent(c: any): void;
            changeEnergy(c: any): void;
            changeGold(c: any, u: any): void;
            checkVersion(): any;
            clearTransitionSessionStatus(): void;
            completeDaily(c: any, u: any): void;
            completeTower(c: any): void;
            createDataClone(): any;
            createRandom(): void;
            diffAttackSlots(c: any): any;
            equip(c: any, u: any): any;
            evolve(c: any, u: any): void;
            forceSaveCharacter(c: any, u: any): void;
            getAllAttacks(): any;
            getAllEvolutions(): any;
            getAllowsHouseVisitors(): any;
            getAnswerStreak(): any;
            getAttacks(c: any): any;
            getAvailableEvolutions(): any;
            getBamSpells(c: any): any;
            getBaseMaxHearts(u: any): any;
            getBattles(): any;
            getBountyScore(): any;
            getColiseum(): any;
            getCurrentBamSpells(): any;
            getCurrentHearts(): any;
            getDailyQuestions(): any;
            getDamageBonus(): any;
            getDataAndClear(): any;
            getDrops(): any;
            getElement(): any;
            getEnergy(): any;
            getEquipmentSpell(c: any): any;
            getFirstName(): any;
            getGold(): any;
            getHeartBonus(): any;
            getID(): any;
            getLatestClassIDLegacy(): any;
            getLevel(): any;
            getLevelingCurve(c: any): any;
            getLosses(): any;
            getMaxHearts(c: any): any;
            getMaxTimeForCurrentMorphMarbleEffect(): any;
            getName(): any;
            getNameWithoutNickname(): any;
            getNativeSpell(c: any, u: any): any;
            getNumAttacks(): any;
            getNumRelics(): any;
            getPercentToLevel(): any;
            getPlayerClass(): any;
            getPlayerData(): any;
            getRegisterDate(): any;
            getSettings(): any;
            getSpellAssets(): any;
            getStarReward(): any;
            getStarRewardByDamage(c: any): any;
            getStars(): any;
            getStarsToLevel(): any;
            getStatHealth(): any;
            getStatPower(): any;
            getTeamScore(): any;
            getTowerProgress(): any;
            getUltimatePetId(): any;
            getUpdatedData(c: any, u: any): any;
            getWins(): any;
            hasCompletedTowerTownTutorial(): any;
            hasCompletedTutorial(): any;
            hasHouseItem(c: any): any;
            hasLegacyMembership(): any;
            hasMaxQuantityOfItem(c: any, u: any): any;
            hasMembership(): any;
            hasValidatedParentEmail(): any;
            hasValidatedTeacherEmail(): any;
            heal(): void;
            healTeam(c: any): void;
            healTeamMember(c: any, u: any, h: any): void;
            init(u: any): any;
            initEducation(): void;
            initFromProtobuf(c: any): void;
            isBlockedByDarkTowerMemberGate(): any;
            isItemOwned(c: any): any;
            isKnockedOut(): any;
            isPlayerTransformed(): any;
            isPlayingAtSchool(): any;
            onEducationLoaded(c: any): void;
            onQuestionAnswered(c: any): void;
            onTutorialComplete(): void;
            processDeserter(): any;
            processStars(): void;
            registerIncomingAttack(c: any, u: any, h: any, a: any): void;
            removeTeam(): void;
            resetAccount(): any;
            resetModifiers(): void;
            rewardMembershipPrizes(c: any): any;
            sendInitialGTMEvents(): void;
            setAllowsHouseVisitors(u: any): void;
            setBGMVolume(c: any): void;
            setColiseum(c: any): void;
            setCurrentHearts(c: any, u: any): void;
            setData(c: any): void;
            setDefault(c: any, u: any): void;
            setEducation(c: any, u: any): void;
            setEnergy(u: any): void;
            setLocation(c: any): void;
            setMembership(c: any): void;
            setParentEmail(c: any): void;
            setPlayerClass(c: any): void;
            setSFXVolume(c: any): void;
            setSpinDate(c: any): void;
            setUltimateSessionStatus(c: any, u: any, h: any, a: any): void;
            setVoiceVolume(c: any): void;
            setZone(c: any): void;
            spinWheel(c: any): void;
            swapSpells(c: any, u: any): void;
            transformPlayer(u: any, h: any, a: any): void;
            unEquip(c: any, u: any): any;
            unlockMemberItems(): void;
            unlockSessionStatus(): void;
            updateMembershipVideoAdData(c: any): void;
            updateModifier(c: any, u: any): void;
            validateLevel(): void;
            registerDate: Date;
            _educationData: Player["_educationData"];
            _playerContainer: Player["_playerContainer"];
            _remoteLogger: {
                isLoggingEnabled(): any;
                logData(c: any, u: any): void;
                logStat(c: any, u: any): void;
                authProvider: {
                    _renewalFailureWait: number;
                    _renewalTimer: null;
                    authenticateRequest(c: any): void;
                    getToken(): any;
                    handleErrorCallback(): void;
                    isLoggedIn(): any;
                    logout(): void;
                    renewToken(): any;
                    setToken(c: any): void;
                    validate(c: any): any;
                    _httpClient: Player["_playerContainer"]["$"]["_localizer"]["dataSource"]["_httpClient"];
                    _sessionTokenAuth: {
                        _userID: number;
                        _token: string;
                        authenticateRequest(c: any): void;
                        getSessionToken(): any;
                        getUserID(): any;
                        isLoggedIn(): any;
                        logout(): void;
                        setSessionToken(c: any, u: any): void;
                    };
                    timeManager: {
                        isServerDeltaSet: boolean;
                        _timezoneOffset: number;
                        serverTimeDeltaMs: number;
                        getIsServerDeltaSet(): any;
                        getLocalTimeMs(): any;
                        getServerTimeDeltaMs(): any;
                        getServerTimeMs(): any;
                        getUTCOffset(): any;
                        setServerTime(c: any): void;
                    };
                };
                currentPlayer: {
                    addStars(c: any): void;
                    dispatchStatChange(c: any, u: any, h: any): void;
                    getAppearance(): any;
                    getBaseHearts(): any;
                    getFirstName(): any;
                    getLastName(): any;
                    getLevel(): any;
                    getMiddleName(): any;
                    getNickname(): any;
                    getStars(): any;
                    getUserID(): any;
                    giveItem(c: any, u: any, h: any): void;
                    hasParentLinkedEmail(): any;
                    initialize(c: any): void;
                    isActivePlayer(): any;
                    isMember(): any;
                    logout(): void;
                    setSavingEnabled(c: any): void;
                    _player: Player["_playerContainer"]["source"];
                    onStatChanged: {
                        _shouldPropagate: boolean;
                        active: boolean;
                        add(c: any, u: any, h: any): any;
                        addBinding(c: any, u: any, h: any, a: any, l: any): any;
                        addOnce(c: any, u: any, h: any): any;
                        dispatch(): void;
                        dispose(): void;
                        getBindingsCount(): any;
                        halt(): void;
                        has(c: any, u: any): any;
                        indexOfListener(c: any, u: any): any;
                        remove(c: any, u: any): void;
                        removeAll(c: any): void;
                        removeAtIndex(c: any): void;
                        toString(): any;
                        validateListener(c: any, u: any): void;
                        _bindings: never[];
                    };
                    player: Player["_playerContainer"]["source"];
                };
                featureFlags: {
                    getAssetsDataURI(): any;
                    getAssetURLSuffix(c: any): any;
                    getBaseAssetsURL(): any;
                    getClassCodePromptCurriculumBlacklist(): any;
                    getFeatureRevisionsURIs(): any;
                    getItemsDataURI(): any;
                    getLocalAssetVersion(): any;
                    getMobilePurchaseProductOverride(): any;
                    getMultiplayerClusterForWorld(c: any): any;
                    getPrefabsURIs(): any;
                    getValue(c: any, u: any): any;
                    getWorkerPath(c: any): any;
                    initializeWithJson(c: any): void;
                    isEventEnabled(c: any): any;
                    isFeatureEnabled(c: any): any;
                    environment: {
                        getCurrentEnvironment(): any;
                        getCurrentEnvironmentByHost(): any;
                        getEnvironmentString(): any;
                        getWindowHost(): any;
                        getWindowQueryString(): any;
                    };
                    jsonData: {
                        allOutAttackDisabled: boolean;
                        autoAttackDisabled: boolean;
                        coOpTitanDisabled: boolean;
                        disableMembershipVideoAdDuringSchoolHours: boolean;
                        disableParentAttach5: boolean;
                        disableTrialMembership: boolean;
                        enableElementalGuardianZone: boolean;
                        enableMembershipVideoAd: boolean;
                        enableUserReportingButton: boolean;
                        enableVerboseAnalytics: boolean;
                        enableVerboseGameServer: boolean;
                        enableYouTubeAd: boolean;
                        enableYouTubeTimeCheck: boolean;
                        experimentLE2: boolean;
                        experimentLE3LaneB: boolean;
                        experimentLE3LaneC: boolean;
                        "launcher-bypassSelectionScreen": boolean;
                        "launcher-isOptimizelyEnabled": boolean;
                        "launcher-performEarlyAccessCheck": boolean;
                        "loader-allowedOverrideIps": boolean;
                        "loader-gameClientOverride": boolean;
                        "loader-newMembershipFlow": boolean;
                        maintenance: boolean;
                        removeAssets: boolean;
                        showClassCodeInOptionsMenu: boolean;
                        showClassCodeOnLogin: boolean;
                        showClassCodeOnLoginIfNotInAClass: boolean;
                        showMembershipPromptsAtSchool: boolean;
                        ultimates: boolean;
                        useNewAnswersURL: boolean;
                        useServerTimeForVideoLockout: boolean;
                        videoLessonInstantWin: boolean;
                        gameAssetsVersion: number;
                        gameDataVersion: number;
                        gameServerRollout: number;
                        "loader-gameDataVersionOverride": number;
                        localAssetsVersion: number;
                        morePetsInShopsExperimentNewLabelExpiry: number;
                        sentrySampleRate: number;
                        setFest: number;
                        surveyCheckIntervalMinutes: number;
                        debugPassword: string;
                        gameAssetsMetaDataPath: string;
                        gameClientVersion: string;
                        gameCodePath: string;
                        gameDataPath: string;
                        gameLibPath: string;
                        "loader-gameCodePathOverride": string;
                        maintenanceMessage: string;
                        mobileProductOverride: string;
                        ServerGameVersion: string;
                        splashScreen: string;
                        classCodePromptCurriculumBlacklist: number[];
                        enabledEvents: {
                            anonymous_game_complete_v3: boolean;
                            anonymous_game_discovery: boolean;
                            "battle-start-type": boolean;
                            "conversion-funnel-event": boolean;
                            "create-character": boolean;
                            education_lesson_encounter_v3: boolean;
                            education_question_interface_v3: boolean;
                            epicAttacks: boolean;
                            game_avatar: boolean;
                            game_avatar_v3: boolean;
                            game_battle_v3: boolean;
                            game_complete: boolean;
                            game_complete_v3: boolean;
                            game_discovery_v3: boolean;
                            game_level_up: boolean;
                            game_mod: boolean;
                            game_question_v3: boolean;
                            game_session_start: boolean;
                            game_session_start_v3: boolean;
                            game_sink: boolean;
                            game_sink_v3: boolean;
                            game_social: boolean;
                            game_social_v3: boolean;
                            game_source: boolean;
                            game_source_v3: boolean;
                            "item-change-event": boolean;
                            login: boolean;
                            "member-ad": boolean;
                            "new-member": boolean;
                            PVP: boolean;
                            "pvp-season-reward": boolean;
                            "survey-results": boolean;
                            "toy-event": boolean;
                            "zone-event": boolean;
                        };
                        enableReporting: {
                            houseReportButton: boolean;
                            playerCardReportButton: boolean;
                        };
                        googleLoginSettings: {
                            amazon: boolean;
                            google: boolean;
                        };
                        "loader-allowedIps": string[];
                        "loader-windowVarBlacklist": string[];
                        lockoutTrial: {
                            trialLengthDays: number;
                            endDate: string;
                            startDate: string;
                        };
                        multiplayerClusterLocations: any /* too deep */[];
                        parentAttachTrial: {
                            trialLengthDays: number;
                            endDate: string;
                            startDate: string;
                            exclusionLanes: any /* too deep */;
                        };
                        prodigyGameFlags: {
                            allOutAttackDisabled: boolean;
                            autoAttackDisabled: boolean;
                            coOpTitanDisabled: boolean;
                            disableMembershipVideoAdDuringSchoolHours: boolean;
                            disableParentAttach5: boolean;
                            disableTrialMembership: boolean;
                            enableElementalGuardianZone: boolean;
                            enableMembershipVideoAd: boolean;
                            enableUserReportingButton: boolean;
                            enableVerboseAnalytics: boolean;
                            enableVerboseGameServer: boolean;
                            enableYouTubeAd: boolean;
                            enableYouTubeTimeCheck: boolean;
                            experimentLE2: boolean;
                            experimentLE3LaneB: boolean;
                            experimentLE3LaneC: boolean;
                            "launcher-bypassSelectionScreen": boolean;
                            "launcher-isOptimizelyEnabled": boolean;
                            "launcher-performEarlyAccessCheck": boolean;
                            "loader-allowedOverrideIps": boolean;
                            "loader-gameClientOverride": boolean;
                            "loader-newMembershipFlow": boolean;
                            removeAssets: boolean;
                            showClassCodeInOptionsMenu: boolean;
                            showClassCodeOnLogin: boolean;
                            showClassCodeOnLoginIfNotInAClass: boolean;
                            showMembershipPromptsAtSchool: boolean;
                            ultimates: boolean;
                            useNewAnswersURL: boolean;
                            useServerTimeForVideoLockout: boolean;
                            videoLessonInstantWin: boolean;
                            gameAssetsVersion: number;
                            gameDataVersion: number;
                            gameServerRollout: number;
                            "loader-gameDataVersionOverride": number;
                            localAssetsVersion: number;
                            morePetsInShopsExperimentNewLabelExpiry: number;
                            sentrySampleRate: number;
                            setFest: number;
                            surveyCheckIntervalMinutes: number;
                            debugPassword: string;
                            gameAssetsMetaDataPath: string;
                            gameDataPath: string;
                            "loader-gameCodePathOverride": string;
                            mobileProductOverride: string;
                            splashScreen: string;
                            classCodePromptCurriculumBlacklist: Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["classCodePromptCurriculumBlacklist"];
                            enabledEvents: Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["enabledEvents"];
                            enableReporting: Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["enableReporting"];
                            googleLoginSettings: Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["googleLoginSettings"];
                            "loader-allowedIps": Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["loader-allowedIps"];
                            "loader-windowVarBlacklist": Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["loader-windowVarBlacklist"];
                            lockoutTrial: Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["lockoutTrial"];
                            multiplayerClusterLocations: Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["multiplayerClusterLocations"];
                            parentAttachTrial: Player["_playerContainer"]["source"]["_remoteLogger"]["featureFlags"]["jsonData"]["parentAttachTrial"];
                            recordingFeatures: any /* too deep */;
                            titanShardMultiplier: any /* too deep */;
                            useCatalystSDK: any /* too deep */;
                            xpMultiplier: any /* too deep */;
                        };
                        recordingFeatures: {
                            "archives-run": boolean;
                            "post-tutorial": boolean;
                        };
                        titanShardMultiplier: {
                            bonusMultiplier: number;
                            endDate: string;
                            startDate: string;
                        };
                        useCatalystSDK: string[];
                        xpMultiplier: {
                            bonusMultiplier: number;
                            endDate: string;
                            startDate: string;
                            zone: string;
                        };
                    };
                };
                httpClient: Player["_playerContainer"]["$"]["_localizer"]["dataSource"]["_httpClient"];
            };
            achievements: {
                updated: boolean;
                complete(c: any): void;
                getDataAndClear(): any;
                getProgress(c: any): any;
                getTag(c: any): any;
                increment(c: any, u: any): void;
                init(c: any): void;
                setProgress(c: any, u: any): void;
                setTag(c: any, u: any): void;
                data: {
                    "0": number;
                    "1": number;
                    "2": number;
                    "3": number;
                    progress: {
                        "1": number;
                        "11": number;
                        "15": number;
                        "16": number;
                        "19": number;
                        "2": number;
                        "20": number;
                        "24": number;
                        "25": number;
                        "28": number;
                        "29": number;
                        "31": number;
                        "33": number;
                        "34": number;
                        "37": number;
                        "38": number;
                        "4": number;
                        "42": number;
                        "44": number;
                        "49": number;
                        "5": number;
                        "56": number;
                        "6": number;
                        "8": number;
                        "9": number;
                    };
                };
            };
            appearance: {
                updated: boolean;
                eyeColor: number;
                face: number;
                hairColor: number;
                hairStyle: number;
                skinColor: number;
                gender: string;
                generateRandom(): void;
                getData(): any;
                getDataAndClear(): any;
                getEyeColor(): any;
                getFace(): any;
                getGender(): any;
                getHair(): any;
                getName(): any;
                getSkinColor(): any;
                init(u: any): void;
                randomize(): void;
                setEyeColor(u: any): void;
                setFace(u: any): void;
                setGender(u: any): void;
                setHair(u: any, h: any): void;
                setName(c: any): void;
                setSkinColor(u: any): void;
                _name: {
                    firstName: number;
                    lastName: number;
                    middleName: number;
                    nickname: number | null;
                    getFirstName(): any;
                    getLastName(): any;
                    getMiddleName(): any;
                    getNickname(): any;
                    isValid(): any;
                    setFirstName(c: any): void;
                    setLastName(c: any): void;
                    setMiddleName(c: any): void;
                    setNickname(c: any): void;
                };
                name: Player["_playerContainer"]["source"]["appearance"]["_name"];
                playerService: {
                    getAppearance(c: any): any;
                    getPlayer(c: any): any;
                    factoriesContainer: {
                        guid: string;
                        _middleware: null;
                        parent: null;
                        _get(t: any, n: any, e: any, i: any, o: any, a: any): any;
                        _planAndResolve(): any;
                        applyCustomMetadataReader(t: any): void;
                        applyMiddleware(): any;
                        bind(t: any): any;
                        createChild(): any;
                        get(t: any): any;
                        getAll(t: any): any;
                        getAllNamed(t: any, n: any): any;
                        getAllTagged(t: any, n: any, e: any): any;
                        getNamed(t: any, n: any): any;
                        getTagged(t: any, n: any, e: any): any;
                        isBound(t: any): any;
                        isBoundNamed(t: any, n: any): any;
                        isBoundTagged(t: any, n: any, e: any): any;
                        load(): any;
                        rebind(t: any): any;
                        resolve(n: any): any;
                        restore(): void;
                        snapshot(): void;
                        unbind(t: any): void;
                        unbindAll(): void;
                        unload(): any;
                        _bindingDictionary: {
                            add(t: any, n: any): void;
                            clone(): any;
                            get(t: any): any;
                            getMap(): any;
                            hasKey(t: any): any;
                            remove(t: any): void;
                            removeByCondition(t: any): any;
                            traverse(t: any): void;
                            _map: Map<never, never>;
                        };
                        _metadataReader: {
                            getConstructorMetadata(t: any): any;
                            getPropertiesMetadata(t: any): any;
                        };
                        _snapshots: never[];
                        options: {
                            autoBindInjectable: boolean;
                            defaultScope: string;
                        };
                    };
                };
            };
            backpack: {
                updated: boolean;
                add(c: any, u: any, h: any, a: any): any;
                addBountyNote(c: any, u: any, h: any): void;
                addKeyItem(c: any, u: any, h: any): any;
                canCraft(c: any, u: any): any;
                consume(c: any, u: any, h: any): any;
                consumeLegacyBounties(): void;
                craft(c: any, u: any): void;
                getBackpackItemsByType(c: any): any;
                getBattleItems(c: any): any;
                getDataAndClear(): any;
                getItem(c: any, u: any): any;
                getItemCount(c: any): any;
                getItemData(c: any, u: any): any;
                getKeyItemData(c: any, u: any): any;
                getTotalUnique(): any;
                hasItem(c: any, u: any): any;
                hasItems(c: any): any;
                hasItemsOfType(c: any): any;
                hasMaxQuantityOfItem(c: any, u: any): any;
                setItemData(c: any, u: any, h: any): void;
                setItems(c: any): void;
                setKeyItemData(c: any, u: any, h: any): void;
                unlockAllItems(): void;
                data: {
                    boots: any /* too deep */[];
                    currency: any /* too deep */[];
                    follow: any /* too deep */[];
                    fossil: any /* too deep */[];
                    gold: any /* too deep */[];
                    hat: any /* too deep */[];
                    item: any /* too deep */[];
                    key: any /* too deep */[];
                    mathTownFrame: any /* too deep */[];
                    mathTownInterior: any /* too deep */[];
                    mount: any /* too deep */[];
                    outfit: any /* too deep */[];
                    relic: never[];
                    spellRelic: any /* too deep */[];
                    weapon: any /* too deep */[];
                };
                onKeyAddedToBackpack: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
            };
            classIDs: never[];
            daily: {
                _isComplete: boolean;
                _updated: boolean;
                isComplete: boolean;
                updated: boolean;
                viewedProgressMenu: boolean;
                _monsterID: number;
                monsterID: number;
                progressPoints: number;
                seenProgressPoints: number;
                _festivalName: string;
                _location: string;
                festivalName: string;
                location: string;
                addProgressPoints(c: any, u: any): any;
                complete(): void;
                getData(): any;
                getDataAndClear(): any;
                getFestivalProgress(): void;
                incrementProgressPoints(): any;
                init(c: any): void;
                isExpired(c: any): any;
                reset(): void;
                setFestival(c: any): void;
                setFestivalProgress(c: any, u: any, h: any): void;
                start(c: any, u: any, h: any): void;
                updateSeenProgressPoints(): void;
                _lastStarted: Date;
                lastStarted: Date;
                _festivalProgress: {
                    viewedProgressMenu: boolean;
                    progressPoints: number;
                    seenProgressPoints: number;
                    instanceID: null;
                };
            };
            dailyQuestions: {
                currentDay: number;
                previousData: null;
                adjustNumAnswered(c: any): void;
                clearPreviousData(): void;
                createValidData(u: any): any;
                getCurrentDay(): any;
                getDataAndClear(c: any): any;
                getNumAnsweredToday(): any;
                getNumRequired(u: any): any;
                getNumRequiredToday(): any;
                getPreviousNumAnsweredToday(): any;
                getResetDayIndex(): any;
                getRewards(c: any, u: any): any;
                getStartedChallenge(): any;
                giveReward(c: any, u: any, h: any, a: any): void;
                hasPreviousData(): any;
                init(c: any, u: any, h: any, f: any, l: any): void;
                isCurrentDayComplete(): any;
                isDayComplete(c: any): any;
                onQuestonAnswered(c: any, u: any, h: any, l: any): void;
                postNotification(c: any): void;
                processDate(u: any, h: any): void;
                resetData(): void;
                setCurrentDay(c: any): void;
                setDayComplete(c: any, u: any): void;
                setNumQuestionsAnswered(c: any): void;
                setStartedChallenge(c: any): void;
                data: {
                    startedChallenge: boolean;
                    completedDays: number;
                    numAnsweredToday: number;
                };
                onDataUpdated: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(c: any, u: any, h: any): any;
                    addBinding(c: any, u: any, h: any, a: any, l: any): any;
                    addOnce(c: any, u: any, h: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(c: any, u: any): any;
                    indexOfListener(c: any, u: any): any;
                    remove(c: any, u: any): void;
                    removeAll(c: any): void;
                    removeAtIndex(c: any): void;
                    toString(): any;
                    validateListener(c: any, u: any): void;
                    _bindings: any /* too deep */[];
                };
                rewards: {
                    resetDayIndex: number;
                    name: string;
                    days: any /* too deep */[];
                };
            };
            data: Player["_playerContainer"]["playerDataSchema"];
            educationData: Player["_educationData"];
            encounters: {
                updated: boolean;
                addToPetRescueAttempts(c: any, u: any): void;
                addToPetTimesBattled(c: any, u: any): void;
                addToPetTimesRescued(c: any, u: any): void;
                createNewPetEncounter(c: any): void;
                getAllTotalPetsRecused(): any;
                getDataAndClear(): any;
                getPetEncounterByID(c: any): any;
                getPetRescueAttempts(c: any): any;
                getPetTimesBattled(c: any): any;
                getPetTimesRescued(c: any): any;
                getSeenAds(): any;
                hasPetBeenEncountered(c: any): any;
                hasSeenAd(c: any): any;
                onPetEncountered(c: any): void;
                setData(c: any): void;
                setSeenAds(c: any): void;
                _data: {
                    ads: number[];
                    pets: any /* too deep */[];
                };
                _timeManager: Player["_playerContainer"]["source"]["_remoteLogger"]["authProvider"]["timeManager"];
            };
            equipment: {
                updated: boolean;
                _lastEquippedMount: number;
                boots: number;
                follow: number;
                hat: number;
                lastEquippedMount: number;
                outfit: number;
                spellRelic: number;
                weapon: number;
                mount: undefined;
                calculateAffixBonus(c: any): any;
                clearData(): void;
                getAffixes(c: any, u: any): any;
                getBoots(): any;
                getDamageBonuses(): any;
                getData(): any;
                getDataAndClear(): any;
                getEquipment(c: any): any;
                getFollow(): any;
                getHat(): any;
                getHeartBonuses(): any;
                getMount(): any;
                getOutfit(): any;
                getSpellRelic(): any;
                getWeapon(): any;
                handleItemEquip(c: any, u: any, h: any): void;
                handleItemUnequip(): void;
                init(c: any): void;
                randomize(): void;
                setBoots(u: any, h: any, a: any): void;
                setFollow(u: any): void;
                setHat(u: any, h: any, a: any): void;
                setMount(u: any, h: any, a: any): void;
                setOutfit(u: any, h: any, a: any): void;
                setSpellRelic(u: any, h: any, a: any): void;
                setWeapon(u: any, h: any, a: any): void;
                unequipLevelLockedItem(c: any, u: any): void;
                unequipLevelLockedItems(): void;
            };
            game: Player["_playerContainer"]["_game"];
            house: {
                updated: boolean;
                add(c: any): void;
                getActive(c: any): any;
                getActiveCount(): any;
                getBackground(): any;
                getCurrentHouseTag(): any;
                getDataAndClear(): any;
                getItemCount(): any;
                getItems(): any;
                getOwned(c: any): any;
                getSortedActive(): any;
                getUnplacedItems(): any;
                hasItems(c: any): any;
                hasMaxQuantityOfItem(c: any): any;
                setActive(c: any, u: any, h: any, a: any, l: any, b: any, d: any, v: any): any;
                setAllInactive(): void;
                setCurrentHouseTag(c: any): void;
                setInactive(c: any): void;
                setItems(c: any): void;
                updateActive(c: any, u: any, h: any, a: any, f: any, l: any, b: any, d: any, v: any): void;
                data: {
                    currentHouseTag: string;
                    active: any /* too deep */[];
                    bg: {
                        active: number;
                        own: number[];
                    };
                    items: {
                        "1": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "10": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "100": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "101": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "102": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "103": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "104": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "105": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "106": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "107": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "108": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "109": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "11": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "110": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "111": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "112": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "113": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "114": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "115": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "116": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "117": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "118": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "119": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "12": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "120": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "121": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "122": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "123": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "124": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "125": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "126": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "127": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "128": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "129": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "13": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "130": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "131": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "132": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "133": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "134": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "135": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "136": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "137": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "138": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "139": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "14": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "140": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "141": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "142": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "143": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "144": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "145": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "146": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "147": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "149": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "15": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "150": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "151": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "152": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "153": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "154": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "156": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "157": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "159": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "16": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "160": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "161": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "162": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "164": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "165": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "166": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "167": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "168": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "169": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "17": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "170": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "171": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "172": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "173": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "174": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "175": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "176": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "177": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "178": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "179": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "18": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "180": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "181": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "182": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "183": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "184": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "185": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "186": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "187": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "188": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "189": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "19": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "191": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "192": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "193": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "194": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "195": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "196": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "197": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "198": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "199": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "2": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "20": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "202": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "203": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "204": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "205": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "206": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "207": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "208": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "209": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "21": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "210": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "212": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "213": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "214": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "215": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "216": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "218": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "219": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "22": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "220": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "221": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "222": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "223": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "224": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "225": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "227": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "228": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "229": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "23": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "230": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "231": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "232": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "234": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "235": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "236": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "237": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "238": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "239": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "24": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "240": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "241": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "242": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "243": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "244": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "247": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "248": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "25": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "251": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "252": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "253": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "255": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "256": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "26": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "27": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "28": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "29": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "3": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "30": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "31": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "32": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "33": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "34": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "35": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "36": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "37": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "38": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "39": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "4": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "40": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "41": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "42": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "43": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "44": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "45": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "46": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "47": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "48": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "49": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "5": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "50": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "51": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "52": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "53": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "54": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "55": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "56": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "57": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "58": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "59": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "6": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "60": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "61": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "62": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "63": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "64": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "65": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "66": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "67": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "68": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "69": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "7": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "70": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "71": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "72": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "73": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "74": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "75": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "76": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "77": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "78": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "79": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "8": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "80": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "81": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "82": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "83": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "84": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "85": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "86": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "87": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "88": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "89": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "9": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "90": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "91": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "92": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "93": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "94": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "95": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "96": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "97": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "98": {
                            N: number;
                            A: any /* too deep */;
                        };
                        "99": {
                            N: number;
                            A: any /* too deep */;
                        };
                    };
                };
            };
            kennel: {
                updated: boolean;
                addPet(c?: any, u?: any, h?: any, a?: any, l?: any): void;
                amountOfPet(c: any): any;
                canSwapPositions(c: any, u: any, h: any): any;
                createNewPet(c: any): any;
                findEmptyTeamIndex(): any;
                findFirstFilledIndex(): any;
                getDataAndClear(): any;
                getNumPets(c: any, u: any): any;
                getPetByID(c: any): any;
                getPets(c: any, u: any): any;
                getPetTeamIDs(): any;
                getTeamPosition(c: any): any;
                hasMaxNonMemberPets(): any;
                hasPet(c: any): any;
                hasUltimate(): any;
                isCreatureCurrentPlayer(c: any): any;
                isFull(): any;
                populateKennel(c: any): void;
                removeAtTeamPosition(c: any): void;
                removePet(c: any): void;
                setPetToTopPosition(): void;
                setPlayerToFrontPosition(): any;
                setTeamPosition(c: any, u: any): void;
                swapTeamPositions(c: any, u: any): void;
                _encounterInfo: Player["_playerContainer"]["source"]["encounters"];
                _petData: ({ catchDate: number; ID: number; level: number; levelCaught: number; stars: number; foreignSpells: any /* too deep */; nickname: any } | { catchDate: number; ID: number; level: number; levelCaught: number; stars: number; team: number; foreignSpells: any /* too deep */; nickname: any; } | { catchDate: number; level: number; levelCaught: number; stars: number; ID: string; foreignSpells: any /* too deep */; nickname: any; })[];
                _petTeam: ({ inPVP: boolean; isOpponent: boolean; justLeveled: boolean; showHealthBar: boolean; aoaTier: number; catchAttempt: number; pvpHP: number; starsEarned: number; starsReward: number; starsRewardBase: number; starsToProcess: number; team: number; type: string; immortal: undefined; nickname: undefined; addStars(u: any, h: any, f: any): any; assignRandomSpells(): any; canCatch(): any; changeCurrentHearts(c: any, u: any): void; changeCurrentHeartsPercent(c: any): void; createDataClone(): any; diffAttackSlots(c: any): any; evolve(c: any, u: any): void; generate(c: any, u: any): void; getAllEvolutions(): any; getAttacks(c: any): any; getAvailableEvolutions(): any; getBamSpells(c: any): any; getBaseMaxHearts(c: any): any; getCurrentBamSpells(): any; getCurrentHearts(): any; getDamageBonus(): any; getDataAndClear(): any; getDrops(): any; getElement(): any; getFirstName(): any; getForeignSpell(c: any, h: any, a: any): any; getID(): any; getLevel(): any; getLevelingCurve(c: any): any; getMaxHearts(c: any): any; getName(): any; getNameWithoutNickname(): any; getNativeSpell(c: any, h: any, a: any): any; getPercentToLevel(): any; getSpellAssets(): any; getStarReward(): any; getStarRewardByDamage(c: any): any; getStars(): any; getStarsToLevel(): any; getStatHealth(): any; getStatPower(): any; init(c: any): any; isKnockedOut(): any; processStars(): void; registerIncomingAttack(c: any, u: any, h: any, a: any): void; removeTeam(): void; resetModifiers(): void; setCurrentHearts(c: any, u: any): void; setData(u: any): void; updateModifier(c: any, u: any): void; bench: any /* too deep */; data: any /* too deep */; game: Player["_playerContainer"]["_game"]; modifiers: any /* too deep */; onHPChange: any /* too deep */; source: any /* too deep */; } | Player["_playerContainer"]["source"])[];
                _timeManager: Player["_playerContainer"]["source"]["_remoteLogger"]["authProvider"]["timeManager"];
                data: Player["_playerContainer"]["source"]["kennel"]["_petData"];
                petTeam: Player["_playerContainer"]["source"]["kennel"]["_petTeam"];
                player: Player["_playerContainer"]["source"];
            };
            modifiers: {
                damage: number;
                ignoreElement: number;
                maxHearts: number;
                miss: number;
                barrier: null;
                potion: null;
            };
            name: {
                gender: string;
                generateRandomName(): void;
                getData(): any;
                getFirstName(): any;
                getFullName(): any;
                getName(): any;
                getNameWithoutNickname(): any;
                init(c: any, u: any): void;
                initFromProtobuf(c: any, u: any): void;
                validateNameData(): any;
                data: Player["_playerContainer"]["source"]["appearance"]["_name"];
                localizer: Player["_playerContainer"]["$"]["_localizer"];
            };
            onEquipmentChange: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onHPChange: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            onSessionStatusChange: {
                _shouldPropagate: boolean;
                active: boolean;
                add(c: any, u: any, h: any): any;
                addBinding(c: any, u: any, h: any, a: any, l: any): any;
                addOnce(c: any, u: any, h: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(c: any, u: any): any;
                indexOfListener(c: any, u: any): any;
                remove(c: any, u: any): void;
                removeAll(c: any): void;
                removeAtIndex(c: any): void;
                toString(): any;
                validateListener(c: any, u: any): void;
                _bindings: never[];
            };
            owners: never[];
            playerContainer: Player["_playerContainer"];
            playerParents: never[];
            playerTeachers: never[];
            quests: {
                updated: boolean;
                defeatBoss(c: any): void;
                defeatMonster(u: any, h: any, a: any): void;
                getDataAndClear(): any;
                setQuests(c: any): void;
                data: {};
            };
            state: {
                _updated: boolean;
                updated: boolean;
                get(c: any): any;
                getCompletedQuests(c: any): any;
                getDataAndClear(): any;
                getDungeonSchema(c: any): any;
                getDungeonState(c: any, u: any): any;
                getZoneVars(c: any, u: any, h: any): any;
                set(c: any, u: any): void;
                setData(c: any): void;
                _dungeonStates: {};
                data: {
                    breadcrumbs: {
                        BREADCRUMB_TITAN_UNLOCKED_HUD_BUTTON: number;
                        FEATURE_ACADEMY_TOWERS: number;
                        FEATURE_BADGES: number;
                        FEATURE_BATTLE_TUTORIAL: number;
                        FEATURE_CLOUD_MOUNT: number;
                        FEATURE_EG_ARENA: number;
                        FEATURE_ELEMENTAL_GUARDIAN: number;
                        FEATURE_HOUSE_MOVING: number;
                        FEATURE_HOUSE_VISITING: number;
                        FEATURE_SOCIAL_FEED: number;
                        FEATURE_STYLIST: number;
                        FEATURE_TOWERS_PROMPT: number;
                    };
                    dungeons: {
                        crystal_caverns: {
                            persistentData: any /* too deep */;
                            phaseData: any /* too deep */;
                            runData: any /* too deep */;
                        };
                    };
                    elementalGuardian: {
                        global: {
                            favoriteLoadoutIndex: number;
                            torchesLit: number;
                            teamCurrentHP: any /* too deep */;
                        };
                    };
                    towers: {
                        earthtower: {
                            boss: boolean;
                            wardenSaved: boolean;
                            achievementMonstersCount: number;
                            achievementPagesCount: number;
                            floors: number;
                        };
                        icetower: {
                            achievementMonstersCount: number;
                            achievementPagesCount: number;
                        };
                    };
                    tutorial: {
                        "0": number;
                    };
                    world: {
                        bounties: number[];
                        dailyQuests: {
                            "0": any /* too deep */;
                        };
                    };
                    zone: {
                        academy: {
                            "0": any /* too deep */;
                            quest: any /* too deep */;
                        };
                        bonfire_spire: {
                            "9": number;
                            quest: any /* too deep */;
                        };
                        dyno: {
                            "0": any /* too deep */;
                        };
                        forest: {
                            "8": any /* too deep */;
                            quest: any /* too deep */;
                        };
                        house: {
                            "6": number;
                            "0": any /* too deep */;
                            quest: any /* too deep */;
                        };
                        lamplight: {
                            "2": string;
                            "3": any /* too deep */;
                            quest: any /* too deep */;
                        };
                        shipwreck_shore: {
                            "16": number;
                            quest: any /* too deep */;
                        };
                        shiverchill: {
                            "11": any /* too deep */;
                            quest: any /* too deep */;
                        };
                        skywatch: {
                            "7": any /* too deep */;
                            quest: any /* too deep */;
                        };
                    };
                };
            };
            tutorial: {
                updated: boolean;
                getDataAndClear(): any;
                getMenuValue(c: any): any;
                getValue(c: any, u: any, h: any): any;
                setData(c: any): void;
                setMenuValue(c: any, u: any): void;
                setValue(c: any, u: any, h: any, a: any): void;
                data: {
                    menus: {
                        "14": number[];
                    };
                    zones: {};
                };
            };
        };
        sprites: Player["_playerContainer"]["collisionBody"]["parent"];
        stage: Player["_playerContainer"]["_game"]["_add"]["stage"];
        tempDisplayObjectParent: Player["_playerContainer"]["_tempDisplayObjectParent"];
        trackedPointers: Player["_playerContainer"]["_trackedPointers"];
        transform: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"];
        tweenAnimations: {
            attack: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            attackBig: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            attackFloat: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            dabfemale: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            dabmale: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            dig: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            floatDig: never[];
            hammerfemale: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            hammermale: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            moonwalkfemale: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            moonwalkmale: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            runningMan: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["collisionBody"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            setup: never[];
            shimmy: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            stand: ({ noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; } | { noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; } | { noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; } | { noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; } | { noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; } | { noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; } | { noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; } | { noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; } | { noSkipFrames: boolean; index: number; startTime: number; onComplete: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; current: { delay: number; duration: number; end: number; lastUpdate: number; start: number; tag: string; type: string; frames: any /* too deep */; }; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: { frame: number; next: number; }; })[];
            standFloat: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            walk: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            walkfemale: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            walkFloat: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
            walkmale: ({ noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["pivot"]["scope"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["eyes"]["parent"]["parent"]["parent"]["scale"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["shirt"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["neck"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["leftArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["rightArm"]; tweens: any /* too deep */[]; tweenVars: {}; } | { noSkipFrames: boolean; index: number; current: null; delay(c: any): void; end(c: any): void; set(c: any, u: any, h: any, a: any): void; start(c: any, u: any, h: any): void; update(c: any): any; onEndCallbacks: never[]; src: Player["_playerContainer"]["legs"]; tweens: any /* too deep */[]; tweenVars: {}; })[];
        };
        weaponMetadata: {
            angle: number;
            size: number;
            v: number;
            vIcon: number;
            type: string;
            anchor: {
                x: number;
                y: number;
            };
        };
        world: {
            x: number;
            y: number;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
        };
        worldGamePosition: {
            x: number;
            y: number;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
        };
        worldPosition: {
            x: number;
            y: number;
            clone(): any;
            copyFrom(t: any): any;
            copyTo(t: any): any;
            equals(t: any): any;
            set(t: any, e: any): any;
        };
        worldScale: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"]["scale"];
        worldTransform: Player["_playerContainer"]["follow"]["followController"]["lastTargetPosition"]["scope"]["worldTransform"];
    };
    _remoteLogger: Player["_playerContainer"]["source"]["_remoteLogger"];
    achievements: Player["_playerContainer"]["source"]["achievements"];
    appearance: Player["_playerContainer"]["source"]["appearance"];
    backpack: Player["_playerContainer"]["source"]["backpack"];
    classIDs: Player["_playerContainer"]["source"]["classIDs"];
    daily: Player["_playerContainer"]["source"]["daily"];
    dailyQuestions: Player["_playerContainer"]["source"]["dailyQuestions"];
    data: Player["_playerContainer"]["playerDataSchema"];
    educationData: Player["_educationData"];
    encounters: Player["_playerContainer"]["source"]["encounters"];
    equipment: Player["_playerContainer"]["source"]["equipment"];
    game: Player["_playerContainer"]["_game"];
    house: Player["_playerContainer"]["source"]["house"];
    kennel: Player["_playerContainer"]["source"]["kennel"];
    modifiers: Player["_playerContainer"]["source"]["modifiers"];
    name: Player["_playerContainer"]["source"]["name"];
    onEquipmentChange: Player["_playerContainer"]["source"]["onEquipmentChange"];
    onHPChange: Player["_playerContainer"]["source"]["onHPChange"];
    onSessionStatusChange: Player["_playerContainer"]["source"]["onSessionStatusChange"];
    owners: Player["_playerContainer"]["source"]["owners"];
    playerContainer: Player["_playerContainer"];
    playerParents: Player["_playerContainer"]["source"]["playerParents"];
    playerTeachers: Player["_playerContainer"]["source"]["playerTeachers"];
    quests: Player["_playerContainer"]["source"]["quests"];
    state: Player["_playerContainer"]["source"]["state"];
    tutorial: Player["_playerContainer"]["source"]["tutorial"];
}