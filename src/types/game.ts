export interface Game {
    _paused: boolean;
    _pausedByCode: boolean;
    isBooted: boolean;
    paused: boolean;
    pausedByCode: boolean;
    transparent: boolean;
    versioned: boolean;
    _height: number;
    _width: number;
    broadcastId: number;
    height: number;
    resolution: number;
    width: number;
    clientVersion: string;
    windowHeight: undefined;
    windowWidth: undefined;
    boot(): void;
    bootSystems(): void;
    createApp(Y: any, q: any): any;
    createSystems(): void;
    destroy(): void;
    focusGain(V: any): void;
    focusLoss(V: any): void;
    gamePaused(V: any): void;
    gameResumed(Y: any): void;
    init(): void;
    pauseGame(Y: any): void;
    postUpdate(V: any): void;
    showDebugHeader(): void;
    toggleFpsGraph(): void;
    update(Y: any): void;
    canvas: HTMLCanvasElement;
    parent: HTMLCanvasElement;
    _add: {
        audio(V: any, Y: any, q: any, Q: any): any;
        bitmapData(V: any, Y: any, q: any, Q: any): any;
        container(V: any, Y: any, q: any): any;
        existing(V: any): any;
        graphics(V: any, Y: any, q: any): any;
        group(V: any, Y: any, q: any): any;
        renderTexture(V: any, Y: any, q: any, Q: any): any;
        sound(V: any, Y: any, q: any, Q: any): any;
        spine(V: any, Y: any, q: any, Q: any): any;
        sprite(V: any, Y: any, q: any, Q: any, X: any, J: any): any;
        text(V: any, Y: any, q: any, X: any, J: any): any;
        tileSprite(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any): any;
        tween(V: any, Y: any, q: any): any;
        game: {
            _paused: boolean;
            _pausedByCode: boolean;
            isBooted: boolean;
            paused: boolean;
            pausedByCode: boolean;
            transparent: boolean;
            versioned: boolean;
            _height: number;
            _width: number;
            broadcastId: number;
            height: number;
            resolution: number;
            width: number;
            clientVersion: string;
            windowHeight: undefined;
            windowWidth: undefined;
            boot(): void;
            bootSystems(): void;
            createApp(Y: any, q: any): any;
            createSystems(): void;
            destroy(): void;
            focusGain(V: any): void;
            focusLoss(V: any): void;
            gamePaused(V: any): void;
            gameResumed(Y: any): void;
            init(): void;
            pauseGame(Y: any): void;
            postUpdate(V: any): void;
            showDebugHeader(): void;
            toggleFpsGraph(): void;
            update(Y: any): void;
            canvas: HTMLCanvasElement;
            parent: HTMLCanvasElement;
            _add: Game["_add"];
            _app: {
                _resizeId: null;
                _resizeTo: null;
                cancelResize(): void;
                destroy(e: any, r: any): void;
                queueResize(): any;
                render(): void;
                resize(): void;
                start(): void;
                stop(): void;
                view: HTMLCanvasElement;
                _ticker: {
                    _protected: boolean;
                    autoStart: boolean;
                    started: boolean;
                    _lastFrame: number;
                    _maxElapsedMS: number;
                    _minElapsedMS: number;
                    _requestId: number;
                    count: number;
                    deltaMS: number;
                    deltaTime: number;
                    elapsedMS: number;
                    FPS: number;
                    lastTime: number;
                    maxFPS: number;
                    minFPS: number;
                    speed: number;
                    _addListener(t: any): any;
                    _cancelIfNeeded(): void;
                    _requestIfNeeded(): void;
                    _startIfPossible(): void;
                    _tick(e: any): void;
                    add(e: any, r: any, i: any): any;
                    addOnce(e: any, r: any, i: any): any;
                    destroy(): void;
                    remove(t: any, e: any): any;
                    start(): void;
                    stop(): void;
                    update(t: any): any;
                    _head: any /* too deep */;
                };
                loader: {
                    _protected: boolean;
                    loading: boolean;
                    concurrency: number;
                    progress: number;
                    baseUrl: string;
                    defaultQueryString: string;
                    _add(e: any, r: any, i: any, n: any): any;
                    _boundLoadResource(t: any, e: any): any;
                    _loadResource(t: any, e: any): void;
                    _onComplete(): void;
                    _onLoad(t: any): void;
                    _onStart(): void;
                    _prepareUrl(t: any): any;
                    add(t: any, e: any, r: any, i: any): any;
                    destroy(): void;
                    load(t: any): any;
                    pre(t: any): any;
                    reset(): any;
                    use(t: any): any;
                    _afterMiddleware: any /* too deep */;
                    _beforeMiddleware: any /* too deep */;
                    _queue: any /* too deep */;
                    _resourcesParsing: any /* too deep */;
                    onComplete: any /* too deep */;
                    onError: any /* too deep */;
                    onLoad: any /* too deep */;
                    onProgress: any /* too deep */;
                    onStart: any /* too deep */;
                    resources: any /* too deep */;
                };
                renderer: {
                    autoDensity: boolean;
                    clearBeforeRender: boolean;
                    preserveDrawingBuffer: boolean;
                    renderingToScreen: boolean;
                    useContextAlpha: boolean;
                    _backgroundColor: number;
                    _eventsCount: number;
                    backgroundAlpha: number;
                    backgroundColor: number;
                    CONTEXT_UID: number;
                    height: number;
                    multisample: number;
                    resolution: number;
                    type: number;
                    width: number;
                    _backgroundColorString: string;
                    addListener(t: any, e: any, r: any): any;
                    addSystem(t: any, e: any): any;
                    clear(): void;
                    contextChange(): void;
                    destroy(t: any): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    eventNames(): any;
                    generateTexture(t: any, r: any, i: any, n: any): any;
                    initPlugins(t: any): void;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any, e: any): void;
                    reset(): any;
                    resize(t: any, r: any): void;
                    gl: WebGL2RenderingContext;
                    view: HTMLCanvasElement;
                    _backgroundColorRgba: any /* too deep */;
                    _events: any /* too deep */;
                    _lastObjectRendered: any /* too deep */;
                    batch: any /* too deep */;
                    buffer: any /* too deep */;
                    context: any /* too deep */;
                    extract: any /* too deep */;
                    filter: any /* too deep */;
                    framebuffer: any /* too deep */;
                    geometry: any /* too deep */;
                    globalUniforms: any /* too deep */;
                    mask: any /* too deep */;
                    options: any /* too deep */;
                    plugins: any /* too deep */;
                    projection: any /* too deep */;
                    renderTexture: any /* too deep */;
                    runners: any /* too deep */;
                    scissor: any /* too deep */;
                    screen: any /* too deep */;
                    shader: any /* too deep */;
                    state: any /* too deep */;
                    stencil: any /* too deep */;
                    texture: any /* too deep */;
                    textureGC: any /* too deep */;
                };
                screen: {
                    bottom: number;
                    height: number;
                    left: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    pad(t: any, e: any): any;
                };
                stage: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    sortableChildren: boolean;
                    sortDirty: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    height: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    width: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateBounds(): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _render(t: any): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addChild(): any;
                    addChildAt(t: any, e: any): any;
                    addListener(t: any, e: any, r: any): any;
                    calculateBounds(): void;
                    containerUpdateTransform(): void;
                    destroy(e: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getChildAt(t: any): any;
                    getChildByName(t: any, e: any): any;
                    getChildIndex(t: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(e: any, r: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    onChildrenChange(t: any): void;
                    removeAllListeners(t: any): any;
                    removeChild(): any;
                    removeChildAt(t: any): any;
                    removeChildren(t: any, e: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    render(t: any): void;
                    renderAdvanced(t: any): void;
                    setChildIndex(t: any, e: any): void;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    sortChildren(): void;
                    swapChildren(t: any, e: any): void;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _localBounds: any /* too deep */;
                    _localBoundsRect: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    children: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    tempDisplayObjectParent: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
            };
            _cache: {
                addAtlasAlias(V: any, Y: any, q: any): void;
                addBitmapData(Y: any, q: any, Q: any): any;
                addImage(Y: any, q: any, Q: any): any;
                addItem(V: any, Y: any, q: any): void;
                addJSON(Y: any, q: any): any;
                addRenderTexture(Y: any, q: any): any;
                addSound(Y: any, q: any): any;
                addSpine(Y: any, q: any): any;
                addText(Y: any, q: any): any;
                addTextureAtlas(Y: any, q: any, Q: any): any;
                checkBitmapDataKey(Y: any): any;
                checkFrameData(Y: any): any;
                checkImageKey(Y: any): any;
                checkJSONKey(Y: any): any;
                checkRenderTextureKey(Y: any): any;
                checkSoundKey(Y: any): any;
                checkSpineKey(Y: any): any;
                checkTextKey(Y: any): any;
                deleteStaleCache(Y: any, q: any, Q: any): void;
                destroy(): void;
                getAtlasAlias(V: any): any;
                getBitmapData(Y: any): any;
                getFrameByName(Y: any, q: any, Q: any): any;
                getFrameData(Y: any, q: any): any;
                getGameKey(V: any): any;
                getImage(Y: any): any;
                getJSON(Y: any): any;
                getKeys(V: any): any;
                getMap(V: any): any;
                getRenderTexture(Y: any): any;
                getSound(Y: any): any;
                getSpine(Y: any): any;
                getText(Y: any): any;
                getTexture(Y: any, q: any): any;
                getTextureAtlas(V: any): any;
                hasMap(V: any): any;
                isSoundDecoded(V: any): any;
                removeAllItems(): void;
                removeAllItemsOfType(V: any): void;
                removeAtlasAlias(V: any): void;
                removeBitmapData(Y: any): any;
                removeImage(Y: any): any;
                removeItem(V: any, Y: any): void;
                removeJSON(Y: any): any;
                removeRenderTexture(Y: any): any;
                removeSound(Y: any): any;
                removeSpine(Y: any): any;
                removeText(Y: any): any;
                removeTextureAtlas(Y: any): any;
                _atlasFrameAlias: Map<never, never>;
                _cacheMap: Map<number, (Map<string, any /* too deep */> | Map<never, never>)>;
                cacheMap: Map<number, (Map<string, any /* too deep */> | Map<never, never>)>;
                _game: Game["_add"]["game"];
                game: Game["_add"]["game"];
            };
            _cameraCollisions: {
                addCollider(V: any): void;
                removeCollider(V: any): any;
                _cameraColliders: never[];
                cameraColliders: Game["_add"]["game"]["_cameraCollisions"]["_cameraColliders"];
            };
            _config: {
                failIfMajorPerformanceCaveat: boolean;
                roundPixels: boolean;
                height: number;
                width: number;
                parent: string;
            };
            _consoleLogger: {
                _shouldColorCodeLogs: boolean;
                _minimumLogLevel: number;
                _stackTraceLogLevel: number;
                getLogStyle(V: any): any;
                getTextStyle(): any;
                log(V: any, Y: any): void;
                setColoredLogsEnabled(V: any): void;
                setLogLevel(V: any): void;
            };
            _destroyQueue: {
                addGameObjectToDestroyQueue(V: any): void;
                destroy(): void;
                processDestroyQueue(): void;
                _queue: Set<never>;
            };
            _device: {
                isInitialized: boolean;
                deviceReadyAt: number;
                cleanUp(): void;
                initialize(): void;
                onDeviceRotation(): void;
                whenReady(V: any): void;
                callbacks: never[];
                rotationEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
            };
            _input: {
                enabled: boolean;
                pollLocked: boolean;
                recordPointerHistory: boolean;
                resetLocked: boolean;
                _pollCounter: number;
                _x: number;
                _y: number;
                doubleTapRate: number;
                holdRate: number;
                justPressedRate: number;
                justReleasedRate: number;
                maxPointers: number;
                minPriorityID: number;
                multiInputOverride: number;
                pollRate: number;
                recordLimit: number;
                recordRate: number;
                tapRate: number;
                totalActivePointers: number;
                totalInactivePointers: number;
                worldX: number;
                worldY: number;
                x: number;
                y: number;
                customCandidateHandler: null;
                customCandidateHandlerContext: null;
                addMoveCallback(V: any, Y: any): void;
                addPointer(): any;
                addTouchLockCallback(V: any, Y: any, q: any): void;
                boot(V: any): void;
                clearEnterCallback(): void;
                countActivePointers(V: any): any;
                deleteMoveCallback(V: any, Y: any): void;
                destroy(): void;
                executeTouchLockCallbacks(V: any, Y: any): void;
                getLocalPosition(V: any, Y: any, q: any): any;
                getPointer(V: any): any;
                getPointerFromId(V: any): any;
                getPointerFromIdentifier(V: any): any;
                hitTest(V: any, Y: any): any;
                preUpdate(): void;
                removeTouchLockCallback(V: any, Y: any): any;
                reset(V: any): void;
                resetSpeed(V: any, Y: any): void;
                setEnterCallback(V: any): void;
                setInteractiveCandidateHandler(V: any, Y: any): void;
                startPointer(V: any): any;
                stopPointer(V: any, Y: any): any;
                update(): void;
                updateChildren(V: any): void;
                updateInteractiveItems(): void;
                updatePointer(V: any): any;
                hitCanvas: HTMLCanvasElement;
                hitContext: CanvasRenderingContext2D;
                _oldPosition: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                activePointer: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    button: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    identifier: null;
                    pointerId: null;
                    targetObject: null;
                    justPressed(V: any): any;
                    justReleased(V: any): any;
                    leave(V: any): void;
                    move(V: any, Y: any): any;
                    processButtonsDown(V: any, Y: any): void;
                    processButtonsUp(V: any, Y: any): void;
                    processButtonsUpDown(V: any, Y: any): void;
                    processInteractiveObjects(V: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(V: any): any;
                    stop(V: any, Y: any): any;
                    swapTarget(V: any, Y: any): void;
                    update(): void;
                    updateButtons(V: any): void;
                    updateWorldPosition(): void;
                    target: HTMLCanvasElement;
                    _history: any /* too deep */;
                    backButton: any /* too deep */;
                    circle: any /* too deep */;
                    eraserButton: any /* too deep */;
                    forwardButton: any /* too deep */;
                    game: Game["_add"]["game"];
                    interactiveCandidates: any /* too deep */;
                    leftButton: any /* too deep */;
                    middleButton: any /* too deep */;
                    position: any /* too deep */;
                    positionDown: any /* too deep */;
                    positionUp: any /* too deep */;
                    rightButton: any /* too deep */;
                    worldPosition: any /* too deep */;
                };
                circle: {
                    _diameter: number;
                    _radius: number;
                    circumference: number;
                    diameter: number;
                    radius: number;
                    x: number;
                    y: number;
                    circumferencePoint(V: any, Y: any, q: any): any;
                    getBounds(): any;
                    setTo(V: any, Y: any, q: any): any;
                };
                game: Game["_add"]["game"];
                interactiveItems: {
                    _cursor: number;
                    total: number;
                    add(V: any): any;
                    callAll(V: any): void;
                    exists(V: any): any;
                    getByKey(V: any, Y: any): any;
                    getIndex(V: any): any;
                    remove(V: any): any;
                    removeAll(V: any): void;
                    reset(): void;
                    setAll(V: any, Y: any): void;
                    _list: any /* too deep */;
                    first: any /* too deep */;
                    list: any /* too deep */;
                    next: any /* too deep */;
                };
                keyboard: {
                    active: boolean;
                    enabled: boolean;
                    _i: number;
                    _k: number;
                    lastChar: null;
                    pressEvent: null;
                    _onKeyDown(Y: any): void;
                    _onKeyPress(Y: any): void;
                    _onKeyUp(Y: any): void;
                    addCallbacks(V: any, Y: any, q: any, Q: any): void;
                    addKey(V: any): any;
                    addKeyCapture(V: any): void;
                    addKeys(V: any): any;
                    clearCaptures(): void;
                    createCursorKeys(): any;
                    destroy(): void;
                    downDuration(V: any, Y: any): any;
                    isDown(V: any): any;
                    justPressed(V: any): any;
                    justReleased(V: any): any;
                    onDownCallback(arg0: any): void;
                    onPressCallback(arg0: any): void;
                    onUpCallback(arg0: any): void;
                    processKeyDown(V: any): void;
                    processKeyPress(V: any): void;
                    processKeyUp(V: any): void;
                    removeCallbacks(): void;
                    removeKey(V: any): void;
                    removeKeyCapture(V: any): void;
                    reset(V: any): void;
                    start(): any;
                    stop(): void;
                    update(): void;
                    upDuration(V: any, Y: any): any;
                    event: KeyboardEvent;
                    _capture: any /* too deep */;
                    _keys: any /* too deep */;
                    callbackContext: Game["_add"]["game"]["_input"]["keyboard"];
                    game: Game["_add"]["game"];
                    lastKey: any /* too deep */;
                };
                mouse: {
                    active: boolean;
                    capture: boolean;
                    enabled: boolean;
                    stopOnGameOut: boolean;
                    wheelDelta: number;
                    _onMouseDown(Y: any): void;
                    _onMouseMove(Y: any): void;
                    _onMouseOut(Y: any): void;
                    _onMouseOutGlobal(Y: any): void;
                    _onMouseOver(Y: any): void;
                    _onMouseUp(Y: any): void;
                    _onMouseUpGlobal(Y: any): void;
                    addMouseWheelCallback(V: any): any;
                    onMouseDown(V: any): void;
                    onMouseMove(V: any): void;
                    onMouseOut(V: any): void;
                    onMouseOutGlobal(V: any): void;
                    onMouseOver(V: any): void;
                    onMouseUp(V: any): void;
                    onMouseUpGlobal(V: any): void;
                    removeMouseWheelCallback(V: any): void;
                    start(): any;
                    stop(): void;
                    event: MouseEvent;
                    callbackContext: Game["_add"]["game"];
                    game: Game["_add"]["game"];
                    input: Game["_add"]["game"]["_input"];
                };
                mousePointer: Game["_add"]["game"]["_input"]["activePointer"];
                mouseWheel: {
                    active: boolean;
                    preventDefault: boolean;
                    delta: number;
                    wheelEventName: string;
                    boundOnWheelHandler(arg0: any): void;
                    onWheelHandler(V: any): void;
                    start(): any;
                    stop(): void;
                    element: HTMLCanvasElement;
                    callbackContext: Game["_add"]["game"];
                    callbacks: any /* too deep */;
                    game: Game["_add"]["game"];
                };
                mspointer: {
                    active: boolean;
                    pointerDownCallback: null;
                    pointerMoveCallback: null;
                    pointerUpCallback: null;
                    onPointerDown(Y: any): void;
                    onPointerMove(Y: any): void;
                    onPointerOut(Y: any): void;
                    onPointerOver(Y: any): void;
                    onPointerUp(Y: any): void;
                    onPointerUpGlobal(Y: any): void;
                    start(): any;
                    stop(): void;
                    callbackContext: Game["_add"]["game"];
                    game: Game["_add"]["game"];
                    input: Game["_add"]["game"]["_input"];
                };
                onDown: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onHold: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onPointerMove: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onTap: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onTouchEndEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onTouchStartEvent: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onUp: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                pointer1: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    identifier: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    targetObject: null;
                    justPressed(V: any): any;
                    justReleased(V: any): any;
                    leave(V: any): void;
                    move(V: any, Y: any): any;
                    processButtonsDown(V: any, Y: any): void;
                    processButtonsUp(V: any, Y: any): void;
                    processButtonsUpDown(V: any, Y: any): void;
                    processInteractiveObjects(V: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(V: any): any;
                    stop(V: any, Y: any): any;
                    swapTarget(V: any, Y: any): void;
                    update(): void;
                    updateButtons(V: any): void;
                    updateWorldPosition(): void;
                    _history: any /* too deep */;
                    backButton: any /* too deep */;
                    circle: any /* too deep */;
                    eraserButton: any /* too deep */;
                    forwardButton: any /* too deep */;
                    game: Game["_add"]["game"];
                    interactiveCandidates: any /* too deep */;
                    leftButton: any /* too deep */;
                    middleButton: any /* too deep */;
                    position: any /* too deep */;
                    positionDown: any /* too deep */;
                    positionUp: any /* too deep */;
                    rightButton: any /* too deep */;
                    worldPosition: any /* too deep */;
                };
                pointer2: {
                    _holdSent: boolean;
                    _stateReset: boolean;
                    active: boolean;
                    dirty: boolean;
                    exists: boolean;
                    isDown: boolean;
                    isMouse: boolean;
                    isUp: boolean;
                    withinGame: boolean;
                    _nextDrop: number;
                    clientX: number;
                    clientY: number;
                    duration: number;
                    id: number;
                    identifier: number;
                    movementX: number;
                    movementY: number;
                    msSinceLastClick: number;
                    pageX: number;
                    pageY: number;
                    pointerMode: number;
                    previousTapTime: number;
                    rawMovementX: number;
                    rawMovementY: number;
                    screenX: number;
                    screenY: number;
                    timeDown: number;
                    timeUp: number;
                    totalTouches: number;
                    x: number;
                    y: number;
                    targetObject: null;
                    justPressed(V: any): any;
                    justReleased(V: any): any;
                    leave(V: any): void;
                    move(V: any, Y: any): any;
                    processButtonsDown(V: any, Y: any): void;
                    processButtonsUp(V: any, Y: any): void;
                    processButtonsUpDown(V: any, Y: any): void;
                    processInteractiveObjects(V: any): any;
                    reset(): void;
                    resetButtons(): void;
                    resetMovement(): void;
                    start(V: any): any;
                    stop(V: any, Y: any): any;
                    swapTarget(V: any, Y: any): void;
                    update(): void;
                    updateButtons(V: any): void;
                    updateWorldPosition(): void;
                    _history: any /* too deep */;
                    backButton: any /* too deep */;
                    circle: any /* too deep */;
                    eraserButton: any /* too deep */;
                    forwardButton: any /* too deep */;
                    game: Game["_add"]["game"];
                    interactiveCandidates: any /* too deep */;
                    leftButton: any /* too deep */;
                    middleButton: any /* too deep */;
                    position: any /* too deep */;
                    positionDown: any /* too deep */;
                    positionUp: any /* too deep */;
                    rightButton: any /* too deep */;
                    worldPosition: any /* too deep */;
                };
                pointerLock: {
                    active: boolean;
                    locked: boolean;
                    pointerlockchange: undefined;
                    pointerLockElement: undefined;
                    pointerlockerror: undefined;
                    boundOnChangeHandler(arg0: any): void;
                    boundOnErrorHandler(arg0: any): void;
                    cleanUp(): void;
                    exit(): void;
                    onChangeHandler(V: any): void;
                    onErrorHandler(V: any): void;
                    request(): void;
                    start(): any;
                    stop(): void;
                    element: HTMLCanvasElement;
                    game: Game["_add"]["game"];
                    onChange: any /* too deep */;
                    onError: any /* too deep */;
                };
                pointers: (Game["_add"]["game"]["_input"]["pointer1"] | Game["_add"]["game"]["_input"]["pointer2"])[];
                position: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                scale: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                speed: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                touch: {
                    active: boolean;
                    enabled: boolean;
                    consumeDocumentTouches(): void;
                    onTouchCancel(V: any): void;
                    onTouchEnd(V: any): void;
                    onTouchEnter(V: any): void;
                    onTouchLeave(V: any): void;
                    onTouchMove(V: any): void;
                    onTouchStart(V: any): void;
                    start(): any;
                    stop(): void;
                    callbackContext: Game["_add"]["game"];
                    game: Game["_add"]["game"];
                };
            };
            _load: {
                _isLoading: boolean;
                _wasFail: boolean;
                isLoading: boolean;
                _crossOrigin: string;
                baseURL: string;
                crossOrigin: string;
                addFile(V: any, Y: any, q: any, Q: any, X: any): void;
                addFileToInternalLoader(V: any): void;
                atlasJSONHash(V: any, Y: any, q: any): void;
                audio(V: any, Y: any, q: any, Q: any): void;
                destroy(): void;
                fileCompleteCallback(V: any, Y: any): void;
                fileStartCallback(V: any): void;
                getMaxParallelDownloads(): any;
                getNumLoadedFiles(): any;
                image(V: any, Y: any, q: any, Q: any): void;
                isInLoadingQueue(V: any): any;
                isInQueue(V: any): any;
                json(V: any, Y: any, q: any, Q: any): void;
                processImage(V: any, Y: any, q: any): void;
                processJSON(V: any, Y: any, q: any): void;
                processScript(V: any, Y: any): void;
                processSound(V: any, Y: any, q: any): void;
                processSpine(V: any, Y: any, q: any): void;
                processSpritesheet(V: any, Y: any, q: any): void;
                processTextureAtlas(V: any, Y: any, q: any): void;
                removeFromLoadingQueue(V: any): any;
                reset(V: any): void;
                script(V: any, Y: any, q: any, Q: any, X: any): void;
                setupFileCallbacks(V: any): void;
                spine(V: any, Y: any, q: any, Q: any): void;
                spritesheet(V: any, Y: any, q: any, Q: any, X: any, J: any): void;
                start(): void;
                startLoad(): void;
                totalQueuedFiles(): any;
                _immediateQueue: never[];
                _loader: {
                    _protected: boolean;
                    loading: boolean;
                    concurrency: number;
                    progress: number;
                    baseUrl: string;
                    defaultQueryString: string;
                    _add(e: any, r: any, i: any, n: any): any;
                    _boundLoadResource(t: any, e: any): any;
                    _loadResource(t: any, e: any): void;
                    _onComplete(): void;
                    _onLoad(t: any): void;
                    _onStart(): void;
                    _prepareUrl(t: any): any;
                    add(t: any, e: any, r: any, i: any): any;
                    destroy(): void;
                    load(t: any): any;
                    pre(t: any): any;
                    reset(): any;
                    use(t: any): any;
                    _afterMiddleware: any /* too deep */;
                    _beforeMiddleware: any /* too deep */;
                    _queue: any /* too deep */;
                    _resourcesParsing: any /* too deep */;
                    onComplete: any /* too deep */;
                    onError: any /* too deep */;
                    onLoad: any /* too deep */;
                    onProgress: any /* too deep */;
                    onStart: any /* too deep */;
                    resources: any /* too deep */;
                };
                _loadingQueue: never[];
                _onFileComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                _onFileStart: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                _onLoadComplete: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                _queue: never[];
                loader: Game["_add"]["game"]["_load"]["_loader"];
                onFileComplete: Game["_add"]["game"]["_load"]["_onFileComplete"];
                onFileStart: Game["_add"]["game"]["_load"]["_onFileStart"];
                onLoadComplete: Game["_add"]["game"]["_load"]["_onLoadComplete"];
                onReset: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
            };
            _navMeshSystem: {
                _currentStreamedMap: null;
                _navMeshConstructorWorker: null;
                addNonWalkableArea(V: any): any;
                addWalkableArea(V: any): void;
                bindStreamedMap(V: any): void;
                buildNavMeshFromGlobalPolys(): any;
                constructBlockMesh(V: any): any;
                destroy(): void;
                findPath(V: any, Y: any): any;
                generateBlockID(V: any): any;
                getNavMeshConstructor(): any;
                getPolyBoolPoly(V: any): any;
                modifyNavMesh(V: any, Y: any, q: any): any;
                onStreamedMapBlocksChanged(V: any, Y: any): any;
                releaseStreamedMap(): any;
                reloadStreamedBlock(V: any): any;
                unloadStreamedBlock(V: any): any;
                _blockPolygonIDs: Map<never, never>;
                _streamedBlockMeshes: Map<never, never>;
                _globalNonWalkableAreas: never[];
                _globalPolygonIDs: never[];
                _globalWalkableAreas: never[];
                _navMesh: {
                    _fromPolySearchRadius: number;
                    _meshShrinkAmount: number;
                    _nextId: number;
                    addPolygon(V: any): any;
                    calculateAllNeighbours(): void;
                    calculatePairNeighbours(V: any, Y: any): any;
                    calculatePolyNeighbours(V: any): void;
                    destroy(): any;
                    findPath(V: any, Y: any): any;
                    getPolygons(): any;
                    getSegmentOverlap(V: any, Y: any): any;
                    projectPointToEdge(V: any, Y: any): any;
                    projectPointToPolygon(V: any, Y: any): any;
                    removePolygon(V: any): any;
                    _graph: any /* too deep */;
                    _navPolygons: any /* too deep */;
                };
                navMesh: Game["_add"]["game"]["_navMeshSystem"]["_navMesh"];
            };
            _onPause: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            _onResume: {
                _shouldPropagate: boolean;
                active: boolean;
                add(V: any, Y: any, q: any): any;
                addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                addOnce(V: any, Y: any, q: any): any;
                dispatch(): void;
                dispose(): void;
                getBindingsCount(): any;
                halt(): void;
                has(V: any, Y: any): any;
                indexOfListener(V: any, Y: any): any;
                remove(V: any, Y: any): void;
                removeAll(V: any): void;
                removeAtIndex(V: any): void;
                toString(): any;
                validateListener(V: any, Y: any): void;
                _bindings: any /* too deep */[];
            };
            _rnd: {
                c: number;
                s0: number;
                s1: number;
                s2: number;
                angle(): any;
                frac(): any;
                hash(V: any): any;
                integer(): any;
                integerInRange(V: any, Y: any): any;
                normal(): any;
                pick(V: any): any;
                real(): any;
                realInRange(V: any, Y: any): any;
                rnd(): any;
                shuffle(V: any): any;
                sign(): any;
                sow(V: any): void;
                state(V: any): any;
                uuid(): any;
                weightedPick(V: any): any;
            };
            _rootContainer: {
                _parentContainer: null;
                parent: null;
                bind(V: any): any;
                get(V: any): any;
                hasBinding(V: any, Y: any): any;
                rebind(V: any): any;
                resolve(V: any): any;
                unbind(V: any): void;
                unbindAll(): void;
                _inversifyContainer: {
                    guid: string;
                    _middleware: null;
                    parent: null;
                    _get(t: any, n: any, e: any, i: any, o: any, a: any): any;
                    _planAndResolve(): any;
                    applyCustomMetadataReader(t: any): void;
                    applyMiddleware(): any;
                    bind(t: any): any;
                    createChild(): any;
                    get(t: any): any;
                    getAll(t: any): any;
                    getAllNamed(t: any, n: any): any;
                    getAllTagged(t: any, n: any, e: any): any;
                    getNamed(t: any, n: any): any;
                    getTagged(t: any, n: any, e: any): any;
                    isBound(t: any): any;
                    isBoundNamed(t: any, n: any): any;
                    isBoundTagged(t: any, n: any, e: any): any;
                    load(): any;
                    rebind(t: any): any;
                    resolve(n: any): any;
                    restore(): void;
                    snapshot(): void;
                    unbind(t: any): void;
                    unbindAll(): void;
                    unload(): any;
                    _bindingDictionary: any /* too deep */;
                    _metadataReader: any /* too deep */;
                    _snapshots: any /* too deep */;
                    options: any /* too deep */;
                };
                sourceContainer: Game["_add"]["game"]["_rootContainer"]["_inversifyContainer"];
            };
            _scale: {
                _booted: boolean;
                _forceLandscape: boolean;
                _forcePortrait: boolean;
                _incorrectOrientation: boolean;
                isFullScreen: boolean;
                isLandscape: boolean;
                isPortrait: boolean;
                pageAlignHorizontally: boolean;
                pageAlignVertically: boolean;
                parentIsWindow: boolean;
                _lastUpdate: number;
                _updateThrottle: number;
                _updateThrottleReset: number;
                aspectRatio: number;
                currentScaleMode: number;
                fullScreenScaleMode: number;
                height: number;
                scaleMode: number;
                sourceAspectRatio: number;
                trackParentInterval: number;
                width: number;
                screenOrientation: string;
                _onResizeContext: null;
                _pendingScaleMode: null;
                _fullScreenChange(Y: any): void;
                _fullScreenError(Y: any): void;
                _gameResumed(): void;
                _orientationChange(Y: any): void;
                _windowResize(Y: any): void;
                align(V: any, Y: any): void;
                alignCanvas(V: any, Y: any): void;
                boot(): void;
                cleanupCreatedTarget(): void;
                createFullScreenTarget(): any;
                destroy(): void;
                forceOrientation(V: any, Y: any): void;
                fullScreenChange(V: any): void;
                fullScreenError(V: any): void;
                getParentBounds(V: any, Y: any): any;
                orientationChange(V: any): void;
                parseConfig(V: any): void;
                pauseUpdate(): void;
                prepScreenMode(Y: any): void;
                preUpdate(): void;
                queueUpdate(V: any): void;
                recalculateCanvasOffset(): void;
                reflowCanvas(): void;
                reflowGame(): void;
                refresh(): void;
                resetCanvas(V: any, Y: any): void;
                setExactFit(): void;
                setGameSize(Y: any, q: any): void;
                setMaximum(): void;
                setMinMax(V: any, Y: any, q: any, Q: any): void;
                setResizeCallback(V: any, Y: any): void;
                setShowAll(V: any): void;
                setupScale(V: any, Y: any): void;
                signalSizeChange(): void;
                startFullScreen(): any;
                stopFullScreen(): any;
                updateDimensions(Y: any, q: any, Q: any): void;
                updateLayout(): void;
                updateOrientationState(): any;
                updateScalingAndBounds(): void;
                windowResize(V: any): void;
                boundingParent: HTMLDivElement;
                parentNode: HTMLCanvasElement;
                _dom: {
                    scrollX: number;
                    scrollY: number;
                    getOffset(V: any, Y: any): any;
                    getScreenOrientation(): any;
                    onDeviceReady(): void;
                    layoutBounds: any /* too deep */;
                    visualBounds: any /* too deep */;
                };
                _game: Game["_add"]["game"];
                _gameSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                _lastReportedCanvasSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                _lastReportedGameSize: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                _parentBounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                _scaleFactorInverted: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                _tempBounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                bounds: {
                    empty: boolean;
                    bottom: number;
                    centerX: number;
                    centerY: number;
                    halfHeight: number;
                    halfWidth: number;
                    height: number;
                    left: number;
                    offsetX: number;
                    offsetY: number;
                    right: number;
                    top: number;
                    type: number;
                    width: number;
                    x: number;
                    y: number;
                    ceil(t: any, e: any): any;
                    clone(): any;
                    contains(t: any, e: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    enlarge(t: any): any;
                    fit(t: any): any;
                    intersectsRectValues(V: any, q: any, Q: any, X: any): any;
                    pad(t: any, e: any): any;
                    resize(V: any, Y: any): any;
                    setPosition(V: any, Y: any): void;
                    setTo(V: any, Y: any, q: any, Q: any): any;
                    anchor: any /* too deep */;
                    bottomLeft: any /* too deep */;
                    bottomRight: any /* too deep */;
                    topLeft: any /* too deep */;
                    topRight: any /* too deep */;
                };
                canvasOffset: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                enterIncorrectOrientation: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                leaveIncorrectOrientation: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                margin: {
                    bottom: number;
                    left: number;
                    right: number;
                    top: number;
                    x: number;
                    y: number;
                };
                onFullScreenChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onFullScreenError: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onFullScreenInit: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onOrientationChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onSizeChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parentScaleFactor: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                scaleFactor: {
                    _recalculateMagnitude: boolean;
                    _recalculateMagnitudeSq: boolean;
                    _magnitude: number;
                    _magnitudeSq: number;
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    add(V: any): void;
                    angle(V: any): any;
                    ceil(): void;
                    clamp(V: any, Y: any, q: any): void;
                    clip(V: any): void;
                    copyFrom(V: any): any;
                    copyTo(V: any): any;
                    cross(V: any): any;
                    divide(V: any): void;
                    dot(V: any): any;
                    equals(V: any): any;
                    floor(): void;
                    getDistance(V: any): any;
                    getDistanceSq(V: any): any;
                    getMagnitude(): any;
                    getMagnitudeSq(): any;
                    interpolate(V: any, Y: any): void;
                    invert(): void;
                    isNearlyEqual(V: any, Y: any): any;
                    isNearlyEqualToValues(V: any, Y: any, q: any): any;
                    isZero(): any;
                    multiply(V: any): void;
                    negate(): void;
                    normalize(): void;
                    normalRightHand(): void;
                    perpendicular(V: any): void;
                    print(V: any): void;
                    project(V: any, Y: any): void;
                    recalculateMagnitude(): void;
                    recalculateMagnitudeSq(): void;
                    rotate(V: any, Y: any, q: any): void;
                    round(): void;
                    set(V: any, Y: any): void;
                    setTo(V: any, Y: any): void;
                    setToPolar(V: any, Y: any): void;
                    subtract(V: any): void;
                    toString(): any;
                    trunc(): void;
                };
                windowConstraints: {
                    bottom: string;
                    right: string;
                };
            };
            _sound: {
                _codeMuted: boolean;
                _muted: boolean;
                _watching: boolean;
                connectToMaster: boolean;
                mute: boolean;
                muteOnPause: boolean;
                noAudio: boolean;
                touchLocked: boolean;
                baseLatency: number;
                channels: number;
                volume: number;
                _unlockSource: null;
                _watchCallback: null;
                _watchContext: null;
                _onResumeWebAudioOnClick(): void;
                _resumeWebAudioOnClick(): void;
                add(V: any, Y: any, q: any, Q: any): any;
                boot(): void;
                destroy(): void;
                pauseAll(): void;
                play(V: any, Y: any, q: any): any;
                remove(V: any): any;
                removeAll(): void;
                removeByKey(V: any): any;
                resumeAll(): void;
                resumeWebAudio(): any;
                setDecodedCallback(V: any, Y: any, q: any): void;
                setMute(): void;
                setTouchUnlock(): void;
                stopAll(): void;
                unlock(): any;
                unsetMute(): void;
                update(): void;
                context: AudioContext;
                emptyBuffer: AudioBuffer;
                _sounds: never[];
                _watchList: {
                    _cursor: number;
                    total: number;
                    first: null;
                    next: null;
                    add(V: any): any;
                    callAll(V: any): void;
                    exists(V: any): any;
                    getByKey(V: any, Y: any): any;
                    getIndex(V: any): any;
                    remove(V: any): any;
                    removeAll(V: any): void;
                    reset(): void;
                    setAll(V: any, Y: any): void;
                    _list: any /* too deep */;
                    list: any /* too deep */;
                };
                game: Game["_add"]["game"];
                onMute: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onSoundDecode: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onTouchUnlock: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onUnMute: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                onVolumeChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                sounds: Game["_add"]["game"]["_sound"]["_sounds"];
            };
            _stage: {
                _accessibleActive: boolean;
                _cacheAsBitmap: boolean;
                _destroyed: boolean;
                accessible: boolean;
                accessibleChildren: boolean;
                buttonMode: boolean;
                cacheAsBitmap: boolean;
                destroyed: boolean;
                disableVisibilityChange: boolean;
                exists: boolean;
                fixedToCamera: boolean;
                interactive: boolean;
                interactiveChildren: boolean;
                isMask: boolean;
                isSprite: boolean;
                renderable: boolean;
                sortableChildren: boolean;
                sortDirty: boolean;
                visible: boolean;
                worldVisible: boolean;
                _boundsID: number;
                _cacheAsBitmapMultisample: number;
                _eventsCount: number;
                _lastSortedIndex: number;
                _zIndex: number;
                alpha: number;
                angle: number;
                cacheAsBitmapMultisample: number;
                height: number;
                renderId: number;
                rotation: number;
                tabIndex: number;
                width: number;
                worldAlpha: number;
                x: number;
                y: number;
                zIndex: number;
                _hiddenVar: string;
                accessiblePointerEvents: string;
                accessibleType: string;
                name: string;
                _accessibleDiv: null;
                _boundsRect: null;
                _cacheAsBitmapResolution: null;
                _cacheData: null;
                _enabledFilters: null;
                _localBounds: null;
                _localBoundsRect: null;
                _mask: null;
                accessibleHint: null;
                accessibleTitle: null;
                cacheAsBitmapResolution: null;
                cursor: null;
                filterArea: null;
                filters: null;
                hitArea: null;
                mask: null;
                camera: undefined;
                _cacheAsBitmapDestroy(t: any): void;
                _calculateBounds(): void;
                _calculateCachedBounds(): void;
                _destroyCachedDisplayObject(): void;
                _getCachedLocalBounds(): any;
                _initCachedDisplayObject(t: any): void;
                _initCachedDisplayObjectCanvas(t: any): void;
                _recursivePostUpdateTransform(): void;
                _render(t: any): void;
                _renderCached(t: any): void;
                _renderCachedCanvas(t: any): void;
                addChild(): any;
                addChildAt(t: any, e: any): any;
                addListener(t: any, e: any, r: any): any;
                boot(): void;
                calculateBounds(): void;
                checkVisibility(): void;
                containerUpdateTransform(): void;
                destroy(): void;
                disableTempParent(t: any): void;
                displayObjectUpdateTransform(): void;
                emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                enableTempParent(): any;
                eventNames(): any;
                getBounds(t: any, e: any): any;
                getChildAt(t: any): any;
                getChildByName(t: any, e: any): any;
                getChildIndex(t: any): any;
                getGlobalPosition(t: any, e: any): any;
                getLocalBounds(e: any, r: any): any;
                listenerCount(t: any): any;
                listeners(t: any): any;
                off(t: any, e: any, i: any, n: any): any;
                on(t: any, e: any, r: any): any;
                once(t: any, e: any, r: any): any;
                onChildrenChange(t: any): void;
                parseConfig(V: any): void;
                removeAllListeners(t: any): any;
                removeChild(): any;
                removeChildAt(t: any): any;
                removeChildren(t: any, e: any): any;
                removeListener(t: any, e: any, i: any, n: any): any;
                render(t: any): void;
                renderAdvanced(t: any): void;
                setBackgroundColor(V: any): void;
                setChildIndex(t: any, e: any): void;
                setParent(t: any): any;
                setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                sortChildren(): void;
                swapChildren(t: any, e: any): void;
                toGlobal(t: any, e: any, r: any): any;
                toLocal(t: any, e: any, r: any, i: any): any;
                update(): void;
                updateTransform(): void;
                visibilityChange(V: any): any;
                _bounds: {
                    maxX: number;
                    maxY: number;
                    minX: number;
                    minY: number;
                    updateID: number;
                    rect: null;
                    addBounds(t: any): void;
                    addBoundsArea(t: any, e: any): void;
                    addBoundsMask(t: any, e: any): void;
                    addBoundsMatrix(t: any, e: any): void;
                    addFrame(t: any, e: any, r: any, i: any, n: any): void;
                    addFrameMatrix(t: any, e: any, r: any, i: any, n: any): void;
                    addFramePad(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    addPoint(t: any): void;
                    addPointMatrix(t: any, e: any): void;
                    addQuad(t: any): void;
                    addVertexData(t: any, e: any, r: any): void;
                    addVertices(t: any, e: any, r: any, i: any): void;
                    addVerticesMatrix(t: any, e: any, r: any, i: any, n: any, o: any): void;
                    clear(): void;
                    getRectangle(t: any): any;
                    isEmpty(): any;
                    pad(t: any, e: any): void;
                };
                _events: {};
                _game: Game["_add"]["game"];
                _tempDisplayObjectParent: {
                    _accessibleActive: boolean;
                    _cacheAsBitmap: boolean;
                    _destroyed: boolean;
                    accessible: boolean;
                    accessibleChildren: boolean;
                    buttonMode: boolean;
                    cacheAsBitmap: boolean;
                    destroyed: boolean;
                    interactive: boolean;
                    interactiveChildren: boolean;
                    isMask: boolean;
                    isSprite: boolean;
                    renderable: boolean;
                    visible: boolean;
                    worldVisible: boolean;
                    _boundsID: number;
                    _cacheAsBitmapMultisample: number;
                    _eventsCount: number;
                    _lastSortedIndex: number;
                    _zIndex: number;
                    alpha: number;
                    angle: number;
                    cacheAsBitmapMultisample: number;
                    renderId: number;
                    rotation: number;
                    tabIndex: number;
                    worldAlpha: number;
                    x: number;
                    y: number;
                    zIndex: number;
                    accessiblePointerEvents: string;
                    accessibleType: string;
                    _accessibleDiv: null;
                    _boundsRect: null;
                    _cacheAsBitmapResolution: null;
                    _cacheData: null;
                    _enabledFilters: null;
                    _localBounds: null;
                    _localBoundsRect: null;
                    _mask: null;
                    accessibleHint: null;
                    accessibleTitle: null;
                    cacheAsBitmapResolution: null;
                    cursor: null;
                    filterArea: null;
                    filters: null;
                    hitArea: null;
                    mask: null;
                    name: null;
                    parent: null;
                    sortDirty: null;
                    _cacheAsBitmapDestroy(t: any): void;
                    _calculateCachedBounds(): void;
                    _destroyCachedDisplayObject(): void;
                    _getCachedLocalBounds(): any;
                    _initCachedDisplayObject(t: any): void;
                    _initCachedDisplayObjectCanvas(t: any): void;
                    _recursivePostUpdateTransform(): void;
                    _renderCached(t: any): void;
                    _renderCachedCanvas(t: any): void;
                    addListener(t: any, e: any, r: any): any;
                    destroy(t: any): void;
                    disableTempParent(t: any): void;
                    displayObjectUpdateTransform(): void;
                    emit(t: any, e: any, i: any, n: any, o: any, s: any): any;
                    enableTempParent(): any;
                    eventNames(): any;
                    getBounds(t: any, e: any): any;
                    getGlobalPosition(t: any, e: any): any;
                    getLocalBounds(t: any): any;
                    listenerCount(t: any): any;
                    listeners(t: any): any;
                    off(t: any, e: any, i: any, n: any): any;
                    on(t: any, e: any, r: any): any;
                    once(t: any, e: any, r: any): any;
                    removeAllListeners(t: any): any;
                    removeListener(t: any, e: any, i: any, n: any): any;
                    setParent(t: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toGlobal(t: any, e: any, r: any): any;
                    toLocal(t: any, e: any, r: any, i: any): any;
                    updateTransform(): void;
                    _bounds: any /* too deep */;
                    _events: any /* too deep */;
                    _tempDisplayObjectParent: any /* too deep */;
                    _trackedPointers: any /* too deep */;
                    localTransform: any /* too deep */;
                    pivot: any /* too deep */;
                    position: any /* too deep */;
                    scale: any /* too deep */;
                    skew: any /* too deep */;
                    tempDisplayObjectParent: any /* too deep */;
                    trackedPointers: any /* too deep */;
                    transform: any /* too deep */;
                    worldTransform: any /* too deep */;
                };
                _trackedPointers: {};
                children: any /* too deep */[];
                game: Game["_add"]["game"];
                localTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
                onDestroy: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                parent: Game["_add"]["game"]["_app"]["stage"];
                pivot: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                position: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                scale: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                skew: {
                    _x: number;
                    _y: number;
                    x: number;
                    y: number;
                    cb(): void;
                    clone(e: any, r: any): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    equals(t: any): any;
                    set(t: any, e: any): any;
                    scope: any /* too deep */;
                };
                tempDisplayObjectParent: Game["_add"]["game"]["_stage"]["_tempDisplayObjectParent"];
                trackedPointers: Game["_add"]["game"]["_stage"]["_trackedPointers"];
                transform: {
                    _currentLocalID: number;
                    _cx: number;
                    _cy: number;
                    _localID: number;
                    _parentID: number;
                    _rotation: number;
                    _sx: number;
                    _sy: number;
                    _worldID: number;
                    rotation: number;
                    onChange(): void;
                    setFromMatrix(t: any): void;
                    updateLocalTransform(): void;
                    updateSkew(): void;
                    updateTransform(t: any): void;
                    localTransform: Game["_add"]["game"]["_stage"]["localTransform"];
                    pivot: Game["_add"]["game"]["_stage"]["pivot"];
                    position: Game["_add"]["game"]["_stage"]["position"];
                    scale: Game["_add"]["game"]["_stage"]["scale"];
                    skew: Game["_add"]["game"]["_stage"]["skew"];
                    worldTransform: any /* too deep */;
                };
                worldTransform: {
                    a: number;
                    b: number;
                    c: number;
                    d: number;
                    tx: number;
                    ty: number;
                    array: null;
                    append(t: any): any;
                    apply(t: any, e: any): any;
                    applyInverse(t: any, e: any): any;
                    clone(): any;
                    copyFrom(t: any): any;
                    copyTo(t: any): any;
                    decompose(t: any): any;
                    fromArray(t: any): void;
                    identity(): any;
                    invert(): any;
                    prepend(t: any): any;
                    rotate(t: any): any;
                    scale(t: any, e: any): any;
                    set(t: any, e: any, r: any, i: any, n: any, o: any): any;
                    setTransform(t: any, e: any, r: any, i: any, n: any, o: any, s: any, a: any, h: any): any;
                    toArray(t: any, e: any): any;
                    translate(t: any, e: any): any;
                };
            };
            _state: {
                _clearWorld: boolean;
                current: string;
                _pendingState: null;
                add(V: any, Y: any, q: any): any;
                boot(): void;
                clearCurrentState(): void;
                destroy(): void;
                get(V: any): any;
                getCurrentState(): any;
                loadComplete(): void;
                pause(): void;
                preUpdate(): any;
                remove(V: any): void;
                resume(): void;
                setCurrentState(V: any): void;
                start(V: any, Y: any): void;
                update(): void;
                _states: Map<string, (any | any /* too deep */)>;
                states: Map<string, (any | any /* too deep */)>;
                _current: {
                    combatManager: any;
                    _loadCompleteSent: boolean;
                    complete: boolean;
                    fadeInSet: boolean;
                    hasBroadcastedInfo: boolean;
                    hideHex: boolean;
                    isMapScreen: boolean;
                    showMenu: boolean;
                    walkEnabled: boolean;
                    frameUntilAddNextPlayer: number;
                    hudMenuStyle: number;
                    startX: number;
                    startY: number;
                    tileSize: number;
                    _key: string;
                    key: string;
                    saveTag: string;
                    screenName: string;
                    zoneName: string;
                    _friendListLoadTimeoutID: null;
                    _modalFilters: null;
                    _modalRenderTexture: null;
                    screenData: null;
                    previousMapData: undefined;
                    previousZone: undefined;
                    addAreaEvent(V: any, Y: any, q: any, Q: any, X: any): any;
                    addBlock(V: any, Y: any, q: any): any;
                    addBounty(V: any, Y: any, q: any, Q: any, X: any, Z: any, $: any): any;
                    addChest(V: any, Y: any, q: any, Q: any, X: any, J: any): any;
                    addClickableArea(V: any, Y: any, q: any, Q: any, X: any): void;
                    addClickableEvent(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any, $: any): any;
                    addClickableMoveEvent(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any, $: any, tt: any, it: any): any;
                    addCollect(V: any, Y: any, q: any, Q: any): any;
                    addConstructedNPC(V: any, Y: any, q: any, Q: any, J: any, Z: any): any;
                    addConstructedQuestNPC(V: any, Y: any, q: any, Q: any, X: any): any;
                    addDoor(V: any, Y: any): void;
                    addFireflyEvent(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any): any;
                    addFollow(V: any, Y: any): any;
                    addGnome(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any): any;
                    addMimic(V: any, Y: any, q: any, Q: any, X: any, J: any): any;
                    addMonster(V: any, Y: any, q: any, Q: any, X: any, Z: any, $: any, tt: any): any;
                    addNPC(V: any, Y: any, q: any, Q: any, X: any, J: any, Z: any): any;
                    addPathingIcon(V: any, Y: any): void;
                    addPippet(V: any, Y: any): any;
                    addPlayer(V: any): void;
                    addQuestNPC(V: any, Y: any, q: any, Q: any, X: any, J: any): any;
                    addUltimate(V: any, Y: any, q: any): any;
                    addWizard(V: any, Y: any, q: any, Q: any): any;
                    arePopupsEnabled(): any;
                    bitmapCacheGameRender(V: any): void;
                    callFunctionOrSignal(V: any, Y: any): void;
                    canAddUsersToScreen(): any;
                    clearAndResetRenderCache(): void;
                    create(): void;
                    createBackground(): void;
                    disableOverlay(V: any): void;
                    enableOverlay(V: any): void;
                    endFX(): void;
                    fadeIn(): void;
                    fadeOut(V: any, Y: any): void;
                    fadeOutCachedGameRender(): void;
                    findTargetEvent(V: any): any;
                    generateNPCTrail(V: any): void;
                    generateTamingUI(V: any, Y: any): void;
                    generateTrackingUI(): any;
                    generateUltimateTrail(V: any, Y: any): void;
                    getInjectedValue(V: any): any;
                    getParentalConsentBanner(): any;
                    handlePlayerChatMessage(V: any): void;
                    handleSessionStatusChange(V: any, Y: any): any;
                    hideChat(V: any): void;
                    hideOtherPlayer(V: any): any;
                    hideParentalConsentBanner(): void;
                    init(): void;
                    initListeners(): void;
                    initMap(V: any, Y: any, q: any, Q: any): void;
                    initScene(V: any, Y: any): void;
                    listener(V: any, Y: any): any;
                    movePlayer(V: any): void;
                    onAddChild(V: any, Y: any, q: any): void;
                    onDoorClick(V: any, Y: any): void;
                    onEnableBackground(V: any): void;
                    onEnableContent(V: any): void;
                    onGetLayer(V: any): any;
                    onMessage(V: any): void;
                    onPlayerFullInfo(V: any): void;
                    onPlayerJoined(V: any): void;
                    onPlayerLeft(V: any): void;
                    onPlayerList(V: any): any;
                    openFeed(V: any): void;
                    openHUD(): void;
                    paused(): void;
                    playerEffect(V: any): void;
                    preload(): void;
                    preprocess(): any;
                    process(V: any): void;
                    processAddCollect(V: any): void;
                    processPopups(V: any): any;
                    processUltimatesIndicators(): void;
                    removeFollow(V: any): void;
                    removePlayer(V: any): void;
                    resumed(): void;
                    screenSetup(): void;
                    screenUpdate(): void;
                    setFakePlayer(V: any): void;
                    setUpModalTransition(): void;
                    showCollisions(V: any): void;
                    showMessage(V: any, Y: any): void;
                    showParentalConsentBanner(V: any): void;
                    shutdown(): any;
                    start(Y: any, q: any): any;
                    startFX(): void;
                    stopListeners(): void;
                    transformPlayer(V: any): void;
                    triggerElementClick(V: any): void;
                    update(): void;
                    updatePlayer(V: any): void;
                    pendingCoordinates: Map<never, never>;
                    _background: any /* too deep */;
                    _bgSprite: any /* too deep */;
                    _consentUiLayer: any /* too deep */;
                    _content: any /* too deep */;
                    _dialogue: any /* too deep */;
                    _foreground: any /* too deep */;
                    _gameRenderCache: any /* too deep */;
                    _menuBarCreationPromise: any /* too deep */;
                    _menus: any /* too deep */;
                    _opaque: any /* too deep */;
                    _overlay: any /* too deep */;
                    _parentalConsentLoadPromise: any /* too deep */;
                    _root: any /* too deep */;
                    _uiLayer: any /* too deep */;
                    _ultimatesElements: any /* too deep */;
                    _world: any /* too deep */;
                    above: any /* too deep */;
                    aboveGameObject: any /* too deep */;
                    add: Game["_add"];
                    area: any /* too deep */;
                    assets: any /* too deep */;
                    background: any /* too deep */;
                    backgroundGameObject: any /* too deep */;
                    below: any /* too deep */;
                    belowGameObject: any /* too deep */;
                    clickAreas: any /* too deep */;
                    content: any /* too deep */;
                    contentGameObject: any /* too deep */;
                    data: any /* too deep */;
                    dialogue: any /* too deep */;
                    events: any /* too deep */;
                    floor: any /* too deep */;
                    foreground: any /* too deep */;
                    foregroundGameObject: any /* too deep */;
                    game: Game["_add"]["game"];
                    gameRenderCache: any /* too deep */;
                    input: Game["_add"]["game"]["_input"];
                    menuBar: any /* too deep */;
                    menus: any /* too deep */;
                    metricsManager: any /* too deep */;
                    opaque: any /* too deep */;
                    overlay: any /* too deep */;
                    path: any /* too deep */;
                    pendingPlayers: any /* too deep */;
                    playerList: any /* too deep */;
                    playersInfo: any /* too deep */;
                    prodigyGame: Game["_add"]["game"];
                    questProgress: any /* too deep */;
                    stage: Game["_add"]["game"]["_stage"];
                    uiLayer: any /* too deep */;
                    user: any /* too deep */;
                    zone: any /* too deep */;
                };
                _initArgs: never[];
                _onStateChange: {
                    _shouldPropagate: boolean;
                    active: boolean;
                    add(V: any, Y: any, q: any): any;
                    addBinding(V: any, Y: any, q: any, Q: any, J: any): any;
                    addOnce(V: any, Y: any, q: any): any;
                    dispatch(): void;
                    dispose(): void;
                    getBindingsCount(): any;
                    halt(): void;
                    has(V: any, Y: any): any;
                    indexOfListener(V: any, Y: any): any;
                    remove(V: any, Y: any): void;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): void;
                    toString(): any;
                    validateListener(V: any, Y: any): void;
                    _bindings: any /* too deep */;
                };
                game: Game["_add"]["game"];
                onStateChange: Game["_add"]["game"]["_state"]["_onStateChange"];
            };
            _time: {
                _deltaMS: number;
                _timeMS: number;
                deltaMS: number;
                timeMS: number;
                add(V: any): any;
                boot(): void;
                create(V: any): any;
                gamePaused(): any;
                gameResumed(): any;
                removeAll(): any;
                update(): void;
                updateTime(): void;
                _events: {
                    _destroyOnExpire: boolean;
                    _expired: boolean;
                    _timeAtLastUpdate: number;
                    _updateTimeThreshold: number;
                    _state: string;
                    addTimer(V: any, Y: any, q: any): any;
                    canDestroy(): any;
                    createTimer(V: any, Y: any, q: any, X: any): any;
                    destroy(): void;
                    getGameTime(): any;
                    loop(V: any, Y: any, q: any): any;
                    offsetEventTimers(V: any): any;
                    pause(): void;
                    remove(V: any): any;
                    removeAll(V: any): void;
                    removeAtIndex(V: any): any;
                    repeat(V: any, Y: any, q: any, X: any): any;
                    resume(): void;
                    sortEvents(): any;
                    start(V: any): any;
                    stop(V: any, Y: any): void;
                    update(): void;
                    _events: any /* too deep */;
                    _game: Game["_add"]["game"];
                    onComplete: any /* too deep */;
                };
                _game: Game["_add"]["game"];
                _timers: never[];
                events: Game["_add"]["game"]["_time"]["_events"];
            };
            _tweens: {
                add(V: any, Y: any, q: any): any;
                create(V: any, Y: any, q: any): any;
                destroy(): void;
                findOwnerForTween(V: any): any;
                getAll(): any;
                pauseAll(): void;
                remove(V: any): void;
                removeAll(): void;
                removeAllFromOwner(V: any): void;
                removeFrom(V: any, Y: any): void;
                removeTweenFromOwner(V: any): any;
                resumeAll(): void;
                update(): any;
                _owners: Map<any /* too deep */, Set<any /* too deep */>>;
                _tweens: any /* too deep */[];
                game: Game["_add"]["game"];
            };
            add: Game["_add"];
            app: Game["_add"]["game"]["_app"];
            broadcaster: {
                broadcastIdCount: number;
                addAppListener(V: any, Y: any, q: any, Q: any, X: any): void;
                broadcast(V: any, Y: any, q: any): any;
                clear(): void;
                hashContext(V: any): any;
                removeAppListener(V: any, Y: any, q: any): void;
                callbacks: {
                    bId0: any /* too deep */;
                    bId11: any /* too deep */;
                    bId12: any /* too deep */;
                    bId2: any /* too deep */;
                    bId5: any /* too deep */;
                    bId6: any /* too deep */;
                    bId8: any /* too deep */;
                    bId9: any /* too deep */;
                    Card: any /* too deep */;
                    ConjureCubes: any /* too deep */;
                    FriendsList: any /* too deep */;
                    FriendsListOfActualFriends: any /* too deep */;
                    HUD: any /* too deep */;
                    mount: any /* too deep */;
                    NetworkHandlers: any /* too deep */;
                    ProdigyMailerButton: any /* too deep */;
                    ProdigyMailView: any /* too deep */;
                    Titan: any /* too deep */;
                    UI: any /* too deep */;
                };
                game: Game["_add"]["game"];
                listeners: {
                    bId0: any /* too deep */;
                    bId11: any /* too deep */;
                    bId12: any /* too deep */;
                    bId2: any /* too deep */;
                    bId5: any /* too deep */;
                    bId6: any /* too deep */;
                    bId8: any /* too deep */;
                    bId9: any /* too deep */;
                    Card: any /* too deep */;
                    ConjureCubes: any /* too deep */;
                    FriendsList: any /* too deep */;
                    FriendsListOfActualFriends: any /* too deep */;
                    HUD: any /* too deep */;
                    mount: any /* too deep */;
                    NetworkHandlers: any /* too deep */;
                    ProdigyMailerButton: any /* too deep */;
                    ProdigyMailView: any /* too deep */;
                    Titan: any /* too deep */;
                    UI: any /* too deep */;
                };
            };
            cache: Game["_add"]["game"]["_cache"];
            cameraCollisions: Game["_add"]["game"]["_cameraCollisions"];
            config: Game["_add"]["game"]["_config"];
            destroyQueue: Game["_add"]["game"]["_destroyQueue"];
            device: Game["_add"]["game"]["_device"];
            fps: {
                _isPendingResumeRecordFPS: boolean;
                _record: boolean;
                record: boolean;
                _framerate: number;
                _frames: number;
                _prevTime: number;
                _rollingCount: number;
                _rollingSum: number;
                endFrame(): void;
                getAverageFramerate(): any;
                getFramerate(): any;
                timeNow(): any;
            };
            frameWorkManager: {
                _frameWorkDone: boolean;
                _frameStartTime: number;
                frameBudget: number;
                frameBudgetRemaining: number;
                frameTimeElapsed: number;
                _now(): void;
                awaitFreeTime(V: any, Y: any): void;
                cancelWork(): any;
                flushWorkQueue(): void;
                markFrameEnd(): void;
                markFrameStart(): void;
                _workPromises: never[];
            };
            input: Game["_add"]["game"]["_input"];
            inputDispatcher: {
                dispatchKeyboardEvent(V: any, Y: any): void;
                dispatchKeyPressEvent(V: any, Y: any, q: any): void;
                dispatchMouseEvent(V: any, Y: any): void;
                game: Game["_add"]["game"];
            };
            load: Game["_add"]["game"]["_load"];
            navMeshSystem: Game["_add"]["game"]["_navMeshSystem"];
            onPause: Game["_add"]["game"]["_onPause"];
            onResume: Game["_add"]["game"]["_onResume"];
            renderer: Game["_add"]["game"]["_app"]["renderer"];
            rnd: Game["_add"]["game"]["_rnd"];
            rootContainer: Game["_add"]["game"]["_rootContainer"];
            scale: Game["_add"]["game"]["_scale"];
            seededRandom: {
                frac(V: any): any;
                pick(V: any, Y: any): any;
                shuffleArray(V: any, Y: any): any;
                randomDataGenerator: {
                    c: number;
                    s0: number;
                    s1: number;
                    s2: number;
                    angle(): any;
                    frac(): any;
                    hash(V: any): any;
                    integer(): any;
                    integerInRange(V: any, Y: any): any;
                    normal(): any;
                    pick(V: any): any;
                    real(): any;
                    realInRange(V: any, Y: any): any;
                    rnd(): any;
                    shuffle(V: any): any;
                    sign(): any;
                    sow(V: any): void;
                    state(V: any): any;
                    uuid(): any;
                    weightedPick(V: any): any;
                };
            };
            sound: Game["_add"]["game"]["_sound"];
            stage: Game["_add"]["game"]["_stage"];
            state: Game["_add"]["game"]["_state"];
            time: Game["_add"]["game"]["_time"];
            tweens: Game["_add"]["game"]["_tweens"];
            world: Game["_add"]["game"]["_stage"];
        };
        prodigyGame: Game["_add"]["game"];
        stage: Game["_add"]["game"]["_stage"];
    };
    _app: Game["_add"]["game"]["_app"];
    _cache: Game["_add"]["game"]["_cache"];
    _cameraCollisions: Game["_add"]["game"]["_cameraCollisions"];
    _config: Game["_add"]["game"]["_config"];
    _consoleLogger: Game["_add"]["game"]["_consoleLogger"];
    _destroyQueue: Game["_add"]["game"]["_destroyQueue"];
    _device: Game["_add"]["game"]["_device"];
    _input: Game["_add"]["game"]["_input"];
    _load: Game["_add"]["game"]["_load"];
    _navMeshSystem: Game["_add"]["game"]["_navMeshSystem"];
    _onPause: Game["_add"]["game"]["_onPause"];
    _onResume: Game["_add"]["game"]["_onResume"];
    _rnd: Game["_add"]["game"]["_rnd"];
    _rootContainer: Game["_add"]["game"]["_rootContainer"];
    _scale: Game["_add"]["game"]["_scale"];
    _sound: Game["_add"]["game"]["_sound"];
    _stage: Game["_add"]["game"]["_stage"];
    _state: Game["_add"]["game"]["_state"];
    _time: Game["_add"]["game"]["_time"];
    _tweens: Game["_add"]["game"]["_tweens"];
    add: Game["_add"];
    app: Game["_add"]["game"]["_app"];
    broadcaster: Game["_add"]["game"]["broadcaster"];
    cache: Game["_add"]["game"]["_cache"];
    cameraCollisions: Game["_add"]["game"]["_cameraCollisions"];
    config: Game["_add"]["game"]["_config"];
    destroyQueue: Game["_add"]["game"]["_destroyQueue"];
    device: Game["_add"]["game"]["_device"];
    fps: Game["_add"]["game"]["fps"];
    frameWorkManager: Game["_add"]["game"]["frameWorkManager"];
    input: Game["_add"]["game"]["_input"];
    inputDispatcher: Game["_add"]["game"]["inputDispatcher"];
    load: Game["_add"]["game"]["_load"];
    navMeshSystem: Game["_add"]["game"]["_navMeshSystem"];
    onPause: Game["_add"]["game"]["_onPause"];
    onResume: Game["_add"]["game"]["_onResume"];
    renderer: Game["_add"]["game"]["_app"]["renderer"];
    rnd: Game["_add"]["game"]["_rnd"];
    rootContainer: Game["_add"]["game"]["_rootContainer"];
    scale: Game["_add"]["game"]["_scale"];
    seededRandom: Game["_add"]["game"]["seededRandom"];
    sound: Game["_add"]["game"]["_sound"];
    stage: Game["_add"]["game"]["_stage"];
    state: Game["_add"]["game"]["_state"];
    time: Game["_add"]["game"]["_time"];
    tweens: Game["_add"]["game"]["_tweens"];
    world: Game["_add"]["game"]["_stage"];
}
